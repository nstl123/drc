<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="900" height="800" 
		 xmlns:utils="utils.*"
		 xmlns:depot1="services.depot1.*" 
		 xmlns:depot21="services.depot21.*"
		 creationComplete="startApp(event)"
		 >

	
	<fx:Declarations>
		<depot1:Depot1 id="depot1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
					   showBusyCursor="true"/>
		<depot21:Depot21 id="depot21" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
						 showBusyCursor="true"/>
		
		<s:CallResponder id="getDeviceList" result="getDeviceList_resultHandler(event)" />
<!--		<s:CallResponder id="indicatorsNamesList" result="setIndicatorsList(event)"/> !-->		
		
		<s:CallResponder id="getMacroDataResult" result="getMacroDataResult_resultHandler(event)" fault="getMacroDataResult_faultHandler(event)"/>
		<s:CallResponder id="updateData" result="updateData_resultHandler(event)" />
		
		<s:RadioButtonGroup id="batTypes"/>		
		<s:RadioButtonGroup id="pwrTypes"/>
		<s:RadioButtonGroup id="growthType" />
		<s:RadioButtonGroup id="shockType"/>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			protected function updateData_resultHandler(event:ResultEvent):void
			{
				var r:Object = event.message;
				Alert.show("Data Updated Successfully", "Info");
				this.dispatchEvent(new Event("refreshData", false));
			}
			
			import controls.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.Depot1;
			import services.depot3.Depot3;
			
			import spark.events.IndexChangeEvent;
			
			import utils.helper;
			
			public var dataServiceNames:Depot1;
			public var dataServiceData:Depot21;
			public var dataServiceUpdate:Depot3;
			
			[bindable] private var workingScenarioID:int;
			private var hlp:helper;
			[bindable] private var indicatorsList:ArrayCollection;			
			
			protected function startApp(event:FlexEvent):void {
				trace("app start panelTab F");			
				hlp = new helper();	
				this.addEventListener("updateCharts", updateCharts);	
				this.addEventListener("refreshData", refreshData);
				
				initShockControls();		
			}
			
			public function initNames():void {
				trace("init names inside panel F");				
//				indicatorsNamesList.token = this.dataServiceNames.getIndicatorNames();				
				this.getDeviceList.token = this.dataServiceNames.getDeviceNames();
			}
			
			[bindable] private var yrsList:ArrayCollection = new ArrayCollection();
			protected function initShockControls():void {
				for (var i:int = 2004; i < 2021; i++) {
					yrsList.addItem({"yrs":i});
				};
				this.shockYears.dataProvider = yrsList;
				this.shockYears.labelField = "yrs";
				
				this.shockValue.value = 10;
			}	
			
			public function setWorkingScenario(nv:int, flag:Boolean):void {
				this.workingScenarioID = nv;
				this.testGrid.setWorkingScenario(workingScenarioID, flag);				
			}			
			
			[bindable] private var flMngr:FlowManager;
			public function setFlowManagerRef(z:FlowManager):void {
				flMngr = z;
			}
			
			protected function getDeviceList_resultHandler(event:ResultEvent):void
			{
				this.deviceListDrop.dataProvider = this.getDeviceList.lastResult as ArrayCollection;
			}
			
			// ----- COMMUNICATION PART ---------------/////
			[bindable]
			private var dataList:ArrayCollection;
			public function getDataList():ArrayCollection {
				return this.dataList;
			}
			
			public function setDataList(data:ArrayCollection):void {
				this.dataList = data;
			}			
			
			public function setIndicatorsList(arr:ArrayCollection):void {
				this.indicatorsList = arr;
				this.indicatorsList.filterFunction = filterB;
				this.indicatorsList.refresh();
				this.indicatorsBox.dataProvider = this.indicatorsList;
				
				this.setSelectedIndicators();
			}
			
			public function setSelectedIndicators():void {
				var rr:ArrayCollection = this.flMngr.getRecordedSelectedIndicators();
				if (rr) this.setActiveIndis(0, rr.getItemAt(0).id);
				else this.setActiveIndis(0);
			}
			
			private function filterB(item:Object):Boolean {				
				var fl:Boolean = true;				
				( (item.id >= 204)&&(item.id <= 207) ) ?  fl = true : fl = false;				
				return fl;
			}					
			
			protected function button3_clickHandler(event:MouseEvent):void
			{				
				trace("calling macro data token");
				this.dispatchEvent(new Event("refreshData", false));
				//this.refreshData();
			}
			
			public function refreshData(evt:Event):void {
				if (!this.dataList) {}
				
				else {
				
					var countryIDs:Array = this.dataList.source;				
					var tmp:Array = this.hlp.formStringFromIDs(countryIDs);				
					trace("calling macro data token");
				
					var tmpType:int = 1;
					var fl:Boolean = true; //hasSplitFlag.selected;
					switch (this.selectedIndi) {
						case 204: 
							tmpType = this.selBatType; break;							
						case 205: 
							tmpType = this.selPwrType; break;					
						case 206: 
							tmpType = this.selBatType; break;
						case 207: 
							tmpType = this.selPwrType;
							fl = false;
							break;
					};				
				
					if (tmp.length > 0) {
						this.cursorManager.setBusyCursor();
						getMacroDataResult.token = dataServiceData.getMacroData(tmp, selectedIndi, workingScenarioID, 
							fl, tmpType, 1);
					} else {					
						Alert.show("select at least one country", "Error F51");					
					};
				
				};
			}
			
			[bindable] private var selectedIndi:int = 204;
			[bindable] private var currentData:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataChart:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataGrid:ArrayCollection = new ArrayCollection();
			
			protected function indicatorsBox_changeHandler(event:IndexChangeEvent):void {
				this.selectedIndi = this.indicatorsBox.selectedItem.id;				
				this.hasSplitFlag.selected = this.indicatorsBox.selectedItem.hasSplitByTypes;
				
				this.dispatchEvent(new Event("refreshData", false));
			}			
			
			protected function getMacroDataResult_resultHandler(event:ResultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				currentData = this.getMacroDataResult.lastResult as ArrayCollection;				

				this.currentDataChart.source = this.currentData.source;
				this.currentDataGrid.source = this.currentData.source;
				this.dispatchEvent(new Event("updateCharts", false));				
	
			}
			
			private function filterGrid(item:Object):Boolean {				
				var f:Boolean = true;				
				if ((item.scenarioID == this.workingScenarioID)
					&& (item.deviceID == this.selDevice)) {					
					f = true
				}  else f = false;				
				return f;
			}	
			
			private function filterChart(item:Object):Boolean {				
				var f:Boolean = true;				
				if (item.deviceID == this.selDevice) {					
					f = true
				}  else f = false;				
				return f;
			}			
			
			[bindable] private var isSingleGeo:Boolean = true;
			protected function changeShockType_handler(event:MouseEvent):void
			{
				this.isSingleGeo = this.shockType.selectedValue;
				this.shockControls.enabled = !this.isSingleGeo;
			}
			
			[bindable] public var alteredData:ArrayCollection = new ArrayCollection();
			public function digestChanges(evt:Event):void {
				this.dispatchEvent(new Event("changesMadeInScenario", true));
			
				var temp:Object = new Object();
				
				if (this.isSingleGeo) { 				
					alteredData = this.testGrid.getData();									
				} else {
					var yrs:int = 2010;
					if (this.shockYears.selectedItem.yrs) yrs = this.shockYears.selectedItem.yrs;
					var val:Number = this.shockValue.value;		
					
					var rawData:ArrayCollection = this.testGrid.getAllData();
					alteredData = hlp.formShockArray(selectedIndi, this.workingScenarioID, yrs, val, rawData);				
				};
				
				temp = ({'id':1, data:this.alteredData});
				
				var tmpType:int = 0;
				switch (this.selectedIndi) {
					case 204: 
						tmpType = this.selBatType; break;
					case 205: 
						tmpType = this.selPwrType; break;					
					case 206: 
						tmpType = this.selBatType; break;
					case 207: 
						tmpType = this.selPwrType; break;
				};
				
				if (this.selectedIndi == 207) {
					this.updateData.token = this.dataServiceUpdate.updateData(temp, false, this.selDevice, tmpType);
				} else {				
					this.updateData.token = this.dataServiceUpdate.updateDataProxy(temp, this.selDevice, tmpType);
				};
			}			

			protected function button4_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new Event("scenarioResetRequested", true));
			}

			[bindable] private var selDevice:int = 1;			
			protected function deviceListDrop_changeHandler(event:IndexChangeEvent):void
			{
				this.selDevice = this.deviceListDrop.selectedItem.id;	
				this.dispatchEvent(new Event("updateCharts", false));			
			}

			protected function getMacroDataResult_faultHandler(event:FaultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				Alert.show("Error retrieving data from DB", "Error F51");
			}

			[bindable] private var selBatType:int = 3;
			[bindable] private var selPwrType:int = 1;
			protected function batTypes_clickHandler(event:MouseEvent):void
			{
				this.selBatType = int(this.batTypes.selectedValue);
				this.dispatchEvent(new Event("refreshData", false));
			}
			
			protected function pwrTypes_clickHandler(event:MouseEvent):void
			{
				this.selPwrType = int(this.pwrTypes.selectedValue);
				this.dispatchEvent(new Event("refreshData", false));
			}
			
			[bindable] public var tabEditable:Boolean;			
			public function enableGrid(flag:Boolean, isLocal:Boolean) : void {				
				if (!isLocal) this.tabEditable = flag; 
				this.testGrid.isEditable = flag && isLevel;
				(flag && isLevel) ? this.flagLabel.text = "Table is editable" : this.flagLabel.text = "Table is not editable";
				this.saveBtn.enabled = (flag && isLevel);
				
				this.shockBtn1.enabled = (flag && isLevel); 
				this.shockBtn2.enabled = (flag && isLevel);
			}
			
			[bindable] private var isLevel:Boolean = true;
			protected function radiobutton2_changeHandler(event:Event):void
			{
				this.isLevel = !this.isLevel;
				this.dispatchEvent(new Event("updateCharts", false));				
				
				var tmp:int = 1 - int(this.growthType.selection.value);
				this.enableGrid(tmp == 0 && this.tabEditable, true);		
				this.saveBtn.enabled = (tmp == 0 && this.tabEditable);
			}
			
			protected function updateCharts(evt:Event):void {
				this.currentDataGrid.filterFunction = this.filterGrid;
				this.currentDataGrid.refresh();
				this.currentDataChart.filterFunction = this.filterChart;
				this.currentDataChart.refresh();				
				
				this.testChart.setData(currentDataChart, isLevel); // transformation is performed inside chart component
				this.testGrid.setData(currentDataGrid, isLevel);
				
				this.testChart.updateChartTitle(
					(indicatorsBox.selectedItem ? indicatorsBox.selectedItem.namen : "-"),
					(deviceListDrop.selectedIndex ? deviceListDrop.selectedIndex : 0), 
					(deviceListDrop.selectedIndex >= 0), 
					this.isLevel, 
					(deviceListDrop.selectedItem ? deviceListDrop.selectedItem.namen : ""));
			}
		
			public function setActiveIndis(k:int, idd:int = -1):void {
				var kk:int = 0;
				var i:int = 0;				
				if ( (idd > 0) && (this.indicatorsBox.dataProvider) ) {				
					while (i < this.indicatorsBox.dataProvider.length) {				    						
						if (this.indicatorsBox.dataProvider.getItemAt(i).id == idd)	break;						
						i++;
					};					
				} else {
					this.indicatorsBox.selectedIndex = k;
					kk = k;
				};
				if ( this.indicatorsBox.dataProvider ) {
					if (this.indicatorsBox.dataProvider.length > i) {				
						this.indicatorsBox.selectedIndex = i;
						kk = i;
					};
					this.indicatorsBox.selectedItem = this.indicatorsBox.dataProvider.getItemAt(kk);
					this.selectedIndi = this.indicatorsBox.selectedItem.id;				
				};				
			}			
			
		]]>
	</fx:Script>

	<utils:CTwoAxisChart width="747" height="277" id="testChart" top="101" left="10">
	</utils:CTwoAxisChart>
	
	<utils:CInteractiveGrid width="747" height="195" id="testGrid" top="457" left="10">
	</utils:CInteractiveGrid>
	
	<s:DropDownList width="242" height="18" id="indicatorsBox" 
					change="indicatorsBox_changeHandler(event)" labelField="namen" top="22" left="50"/>
	
	<s:CheckBox x="300" y="24" label="hasSplit" enabled="false" id="hasSplitFlag"/>
	<s:Button label="save changes" width="222" click="digestChanges(event)" id="saveBtn" left="535" top="383" fontWeight="bold" height="27"/>
	<s:Button label="Reset" click="button4_clickHandler(event)" width="222" left="535" top="416" height="23"/>
	<s:DropDownList width="272" id="deviceListDrop"
					 labelField="namen" change="deviceListDrop_changeHandler(event)" top="22" left="371"></s:DropDownList>
	
	<s:Button label="refresh data" click="button3_clickHandler(event)" id="button" width="122" height="25" fontWeight="bold" left="191" top="51"/>
	
	<s:Label x="515" text="Battery type/size" id="selDeviceLabel0" fontSize="11" fontStyle="italic" top="48" fontFamily="Arial"/>
	<s:Label x="343" text="Battery Power Type" id="selDeviceLabel1" fontSize="11" fontStyle="italic" top="48" fontFamily="Arial"/>
	<s:RadioButton label="Levels" groupName="growthType" enabled="true" value="0" 
				   selected="true" height="19" change="radiobutton2_changeHandler(event)" left="45" top="58" fontSize="11" fontFamily="Arial"/>
	<s:RadioButton label="Growths" groupName="growthType" value="1" 
				   enabled="true" height="19" change="radiobutton2_changeHandler(event)" left="112" top="58" fontSize="11" fontFamily="Arial"/>
	<s:Label y="444" text="Table activiy state" width="196" fontStyle="italic" fontSize="11" id="flagLabel" left="10" fontFamily="Arial"/>
	<s:BorderContainer width="517" height="59" left="10" top="381" borderVisible="false">
		<s:Label text="Shock Mechanism" fontStyle="italic" fontSize="11" x="7" y="8" fontFamily="Arial"/>
		<s:BorderContainer x="265" y="5" width="244" height="48" id="shockControls" enabled="false">
			<s:Label x="3" y="1" text="When (Year)" width="106" height="20" verticalAlign="middle" fontSize="10"/>
			<s:Label x="110" y="1" text="Value (in % points)" width="133" height="20" verticalAlign="middle" fontSize="10"/>
			<s:DropDownList id="shockYears" width="100" left="13" top="19">					
			</s:DropDownList>
			<s:NumericStepper id="shockValue" minimum="-20" maximum="20" stepSize="1" width="97" left="137" top="19"/>
		</s:BorderContainer>
		<s:RadioButton x="66" label="Single Country (table below)" groupName="shockType" enabled="true" value="1"
					   selected="true" top="19" fontSize="11" click="changeShockType_handler(event)" id="shockBtn1"/>
		<s:RadioButton x="66" label="All countries  (left)" groupName="shockType" enabled="true" value="0"
					   top="35" fontSize="11" click="changeShockType_handler(event)" id="shockBtn2"/>
	</s:BorderContainer>
	<s:Label text="Data In:" fontStyle="italic" fontSize="11" left="10" top="46" fontFamily="Arial"/>
	<s:Label text="Select Indicator" fontStyle="italic" fontSize="11" top="10" height="10" left="10" fontFamily="Arial"/>
	<s:Label text="Select Device" fontStyle="italic" fontSize="11" top="10" height="10" left="342" fontFamily="Arial"/>
	<s:RadioButton label="Disposable (DPP)" value="1" groupName="pwrTypes" selected="true"
				   click="pwrTypes_clickHandler(event)" top="61" fontSize="11" fontFamily="Arial" left="353"/>
	<s:RadioButton label="Round Cell Rechargeable (RCR)" value="2" groupName="pwrTypes"
				   click="pwrTypes_clickHandler(event)" top="80" fontSize="11" fontFamily="Arial" left="353"/>	

	<s:RadioButton x="537" label="AAA"  value="3" groupName="batTypes" click="batTypes_clickHandler(event)" top="60" selected="true" fontSize="11" fontFamily="Arial"/>
	<s:RadioButton x="585" label="AA" value="5" groupName="batTypes" click="batTypes_clickHandler(event)" top="60" fontSize="11" fontFamily="Arial"/>	
	<s:RadioButton x="626" label="C"  value="1" groupName="batTypes" selected="true" click="batTypes_clickHandler(event)" top="60" fontSize="11" fontFamily="Arial"/>
	<s:RadioButton x="661" label="D"  value="2" groupName="batTypes" click="batTypes_clickHandler(event)" top="60" fontSize="11" fontFamily="Arial"/>	
	<s:RadioButton x="697" label="9V"  value="4" groupName="batTypes" click="batTypes_clickHandler(event)" top="60" fontSize="11" fontFamily="Arial"/>


</s:Group>
