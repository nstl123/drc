<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300"
		  creationComplete="startApp(event)">
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>
	
	<fx:Declarations>		
		<mx:CurrencyFormatter   id="stilius2" precision="0"
								rounding="nearest"
								decimalSeparatorTo="."
								thousandsSeparatorTo=","
								useThousandsSeparator="true"
								currencySymbol=""
								useNegativeSign="true"                  
								/>
		
		<mx:CurrencyFormatter   id="stilius3" precision="2"
								rounding="nearest"
								decimalSeparatorTo="."
								thousandsSeparatorTo=","
								useThousandsSeparator="true"
								currencySymbol=""
								useNegativeSign="true"                  
								/>
		<mx:NumberFormatter id="numForm" useThousandsSeparator="true"/>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.FlexEvent;		
			
			public function format_numbers(item:Object, column:DataGridColumn):String { 
				var a:Object = item[column.dataField]				
				return this.stilius2.format(a);	
			}		
			
			public function format_text(item:Object, column:DataGridColumn):String { 
				var a:Object = item[column.dataField]				
				return a.toString();	
			}		

			import mx.charts.AxisRenderer;
			import mx.charts.HitData;
			import mx.graphics.SolidColorStroke;
			import mx.charts.series.ColumnSeries;
			import mx.charts.series.LineSeries;
			import mx.charts.LinearAxis;
			import mx.charts.CategoryAxis;
			
			[bindable] public var isLineSeries:Boolean = true;
			
			[bindable] public var selectedCntry:int = 1;
			[bindable] public var selectedIndiIn:int = 1;
			[bindable] public var selectedIndiOut:int = 1;
			[bindable] public var selectedDevice:int = 1;
			[bindable] public var selectedBatType:int = 1;
			[bindable] public var selectedPwrType:int = 1;
			[bindable] public var isLevel:Boolean = false;
			
			
			[bindable] private var dataSet:ArrayCollection = new ArrayCollection();		
			private var hlp:helper;
			
			import mx.collections.ArrayCollection;			
			import utils.helper;			
			
			protected function startApp(event:FlexEvent):void
			{
				hlp = new helper();			
			}
			
			public function setData(data:ArrayCollection, isLevel:Boolean):void {
				this.dataSet = data;	
				this.isLevel = isLevel;
				drawChart(isLevel);
			}
			
			public function getData():ArrayCollection {
				return this.dataSet;			
			}
			
			public function getBaseData(scen:int):ArrayCollection {
				var rez:ArrayCollection = new ArrayCollection();				
				for (var i:uint = 0; i < this.dataSet.length; i++) {
					var z:Object = this.dataSet.getItemAt(i);
					if (z.scenarioID == scen) {
						rez.addItem(z);
					};				
				};
				return rez;			
			}
			
			public function prepareDataForChart(raw:ArrayCollection):ArrayCollection {
				// iterate to change Y200x to yrs field
				return raw;
			}
			
			protected function drawChart(isLevel:Boolean):void {
				var tmp:ArrayCollection = hlp.transformArrCol(this.dataSet, isLevel);
				createSeries(tmp);
				// some transformation of arrColl here
			}
			
			[Bindable] private var vaxis1:LinearAxis = new LinearAxis;
			[Bindable] private var vaxis2:LinearAxis = new LinearAxis;
			[Bindable] private var hAxis:CategoryAxis = new CategoryAxis;
			
			[Bindable] private var vaRndr:AxisRenderer = new AxisRenderer;
			[Bindable] private var axStroke:SolidColorStroke = new SolidColorStroke;
			
			private var series2:Object;
			private var mySeries:Array=new Array(); 
			
			public function createSeries(someData:ArrayCollection):void {
				vaxis1 = new LinearAxis;
				vaxis2 = new LinearAxis;		
				
				hAxis = new CategoryAxis();
				mySeries.splice(0, mySeries.length);
				var counter:int = 0;		
				
				for (var i:int = 0; i < someData.length; i++) {
					if (isLineSeries) series2 = new LineSeries();
					else series2 = new ColumnSeries();
					
					series2.dataProvider = someData.getItemAt(i);			
					series2.xField="yrs";
					series2.yField="data";
					
					var tmp:Object = someData.getItemAt(i)[0]; 
					
					/*if (tmp.indicatorID == someData.getItemAt(0)[0].indicatorID)
							series2.verticalAxis = vaxis1
					else series2.verticalAxis = vaxis2;*/
					series2.verticalAxis = vaxis1;				
					series2.displayName = tmp.countryID + ", " 
						+ (tmp.scenarioID == 10001 ? "Baseline" : "Scenario");
					
/* 					var stroke : SolidColorStroke = new SolidColorStroke();
						stroke.color    = 0xFF0000 + 10 * i;
						stroke.weight   = 1;
					series2.setStyle( "lineStroke", stroke );
 */					//series2.setStyle("lineStroke", s1);				
					
					hAxis.dataProvider = someData.getItemAt(i);
					vaxis1.baseAtZero = false;
					vaxis2.baseAtZero = false;
					vaxis1.labelFunction = this.defineLabel;				
					
					//vaxis2.labelFunction = this.defineLabel;
					mySeries.push(series2);
				};	
				
				hAxis.categoryField = "yrs";						
				this.lineChart.horizontalAxis  = hAxis;				     
				this.lineChart.series = mySeries;			
				this.lineChart.dataProvider = mySeries;
				this.lineChart.showDataTips = true;
				this.lineChart.dataTipFunction = tooltips_formater;			
				
				this.lineChart.invalidateDisplayList();				
				//this.redrawColors();
			}
			
			public function redrawColors():void {
				for each (var series:LineSeries in this.lineChart.series) {
					var series_stroke:SolidColorStroke = series.getStyle('lineStroke') as SolidColorStroke;
					series_stroke.weight = 10;
					series.setStyle('lineStroke', series_stroke);
				};				
			}
			
			public function changeStyle(s1:SolidColorStroke):void {
				for (var k:int = 0; k < mySeries.length; k++) {
					this.mySeries[k].setStyle("lineStroke", s1);
				}
			}
			
			private function intToHex(color:uint = 0):String {
				var mask:String = "00000F";
				var str:String = mask + color.toString(16).toUpperCase();
				return "0x" + str.substr(str.length - 6);
			}
			
			public function defineLabel(cat:Object, pcat:Object, ax:LinearAxis):String 
			{
				if (cat < 1000)				
					return stilius3.format(cat)
				else
					return stilius2.format(cat)
				//return cat.toString();
			}
			
			[Bindable] private var chartDGToolTip:String;		 
			public function tooltips_formater(m:Object):String		{			
				(m.item.scenarioID == "10001") ? chartDGToolTip = "Baseline" : chartDGToolTip = "Working Scenario";			
								
				chartDGToolTip = m.item['countryID'] + ", " + chartDGToolTip + "\n";
				chartDGToolTip = chartDGToolTip + m.item['yrs'] + ": ";
				
				if (Math.abs(m.item['data']) < 100) {
					chartDGToolTip = chartDGToolTip + stilius3.format(m.item['data']);
				} else {
					chartDGToolTip = chartDGToolTip + stilius2.format(m.item['data']);
				};				
				
				return chartDGToolTip + (!this.isLevel ? "%" : "");            
			}
			
			[bindable] public var chartTitleText:String = "";
			/*public function setChartTitle(tx:String):void {
				this.chartTitle.text = tx;
			}*/
			
			public function updateChartTitle(baseName:String, selIndi:int, activityFlag:Boolean, isLv:Boolean, nm:String, perHH:Boolean):void {
				var tx1:String = baseName;
				var tx2:String = "";
				var addTx:String = ", All Devices";
				if ((selIndi >= 0) && (activityFlag)) 
					tx1 = tx1 + ", "+ nm;
				else 
					tx1 = tx1 +  ( (baseName == "Demand") ? addTx : "" );			
			
				tx2 = tx2 + ( perHH ? ("per HH, ") : "");
				tx2 = tx2 + ( isLv  ? ("units") : ("growth") );
				
				this.chartTitle.text = tx1;
				this.chartSubtitle.text = tx2;
			}
			
		]]>
	</fx:Script>	
	
	
	<s:BorderContainer width="100%" height="100%" horizontalCenter="0" verticalCenter="0" borderVisible="false">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
		<s:BorderContainer width="70%" height="100%" borderVisible="false">
			<s:layout>
				<s:VerticalLayout gap="0"/>
			</s:layout>
			<s:Label width="100%" fontStyle="normal"
					 verticalAlign="bottom" textAlign="center" fontSize="12" 
					 fontFamily="Arial" id="chartTitle" color="#000000" fontWeight="normal" height="20"/>
			<s:Label text="Label" width="100%" height="15" verticalAlign="middle" textAlign="center" fontSize="10" id="chartSubtitle"/>
			<mx:LineChart id="lineChart" width="100%" height="100%"
						  seriesFilters="[]" showDataTips="true" top="0" horizontalCenter="0">
				
	<!--	<mx:verticalAxisRenderers>
				<mx:AxisRenderer placement="left" axis="{this.vaxis1}">
					 <mx:axisStroke>
						 <s:SolidColorStroke weight="1" alpha=".6" caps="round"/>
					 </mx:axisStroke>
				 </mx:AxisRenderer>									 
			 </mx:verticalAxisRenderers> 
			 <mx:horizontalAxisRenderers>
				<mx:AxisRenderer axis="{this.hAxis}">
					<mx:axisStroke>
						<s:SolidColorStroke weight="1" alpha=".6" caps="round"/>
					</mx:axisStroke>
				</mx:AxisRenderer>
			</mx:horizontalAxisRenderers>
		!-->	
				
			</mx:LineChart>
		</s:BorderContainer>
	
	<mx:Legend dataProvider="{lineChart}" width="30%" height="100%" horizontalCenter="0" verticalCenter="139" fontWeight="normal" fontFamily="Arial" fontSize="11" borderVisible="false" textAlign="left" fontStyle="normal" backgroundAlpha="0.5" contentBackgroundAlpha="0.5">
		<s:DataGroup width="100%" height="100%">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
		</s:DataGroup>		
	</mx:Legend>
		
	</s:BorderContainer>
</s:Group>
