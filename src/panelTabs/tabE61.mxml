<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="1005" height="100%"
		 
		 creationComplete="startApp(event)"
		 xmlns:depot1="services.depot1.*" 
		 xmlns:depot21="services.depot21.*"
		 xmlns:utils="utils.*"
		 >

	<fx:Declarations>
		<depot1:Depot1 id="depot1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
					   showBusyCursor="true"/>
		<depot21:Depot21 id="depot21" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
						 showBusyCursor="true"/>
		
		<s:CallResponder id="countryListNames"  result="countryListNames_resultHandler(event)"/>
		<s:CallResponder id="regionListNames" result="regionsListNames_resultHandler(event)" />
		
		<s:CallResponder id="deviceNamesList" result="deviceNamesList_resultHandler(event)" />		
		<s:CallResponder id="getDemandData" result="getDemandData_resultHandler(event)" />
		<s:CallResponder id="getDemandRegions" result="getDemandRegions_resultHandler(event)" />
		<s:CallResponder id="getIndicatorNames" result="getIndicatorNames_resultHandler(event)" />		
		
		<s:RadioButtonGroup id="demandTypes"/>
		<s:RadioButtonGroup id="batTypes"/>
		<s:RadioButtonGroup id="pwrTypes"/>
		<s:CallResponder id="getMacroData" result="getMacroDataResult_resultHandler(event)" 
						 fault="getMacroData_faultHandler(event)"/>
		
	</fx:Declarations>

	<fx:Script>
		<![CDATA[	
			
			import controls.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.Depot1;
			import services.depot21.Depot21;
			
			import spark.events.IndexChangeEvent;
			
			import utils.helper;
			
			private var hlp:helper;
			public var dataServiceNames:Depot1;
			public var dataServiceData:Depot21;
			
			[bindable] private var workingScenarioID:int;
			
			[bindable] private var indicatorsList:ArrayCollection;
			[bindable] private var deviceList:ArrayCollection;
			[bindable] public var selDevice:int; 
			
			[bindable] private var batTypesActiveFlag:Boolean = true;
			[bindable] private var pwrTypesActiveFlag:Boolean = true;
			[bindable] private var devicesActiveFlag:Boolean = true;
			
			public static const CNTRYCHANGED:String = "CNTRY_CHANGED";
			public static const CNTRYUNCHANGED:String = "CNTRY_UNCHANGED"			
			
			
			protected function startApp(event:FlexEvent):void {
				trace("app start panelTab B");			
				hlp = new helper();				
			}
			
			public function initNames():void {
				trace("init names inside panel B");			
				
				this.deviceNamesList.token = this.dataServiceNames.getDeviceNames();
				//this.countryListNames.token = this.dataServiceNames.getCountryList(0);
				
				this.regionListNames.token = this.dataServiceNames.getCountryList(1);
				// here we get regions names				
				this.getIndicatorNames.token = this.dataServiceNames.getIndicatorNames();
			}
			
			public function setWorkingScenario(nv:int, flag:Boolean):void {
				this.workingScenarioID = nv;
				this.testGrid.setWorkingScenario(this.workingScenarioID, flag);	
				this.testGridExo.setWorkingScenario(this.workingScenarioID, false);
			}					
			
			protected function countryListNames_resultHandler(event:ResultEvent):void
			{
				this.countryListGrid.dataList = this.countryListNames.lastResult as ArrayCollection;
			}
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				var selCntries:Object = this.countryListGrid.dataList;
				this.dispatchEvent(new Event(tabE61.CNTRYCHANGED, true));
			}
			// ----- COMMUNICATION PART ---------------/////			
			public function getDataList():ArrayCollection {
				return this.countryListGrid.dataList;			
			}
			
			public function setDataList(data:ArrayCollection):void {
				this.countryListGrid.dataList = data;
			}		
			
			public function setDataListActive(data:ArrayCollection):void {				
				this.countryListGrid.activateSelections(data);
			}						
			
			private var tmpDevices:int  = 0;
			private var tmpPwrTypes:int = 0;
			private var tmpBatTypes:int = 0;
			protected function getSomeData_clickHandler(event:MouseEvent):void
			{
				//send query to DB mit countryIDs and IndiID
				var countryIDs:Array = this.countryListGrid.getActiveDataList().source;				
				var tmp:Array = this.hlp.formStringFromIDs(countryIDs);				
				
				var regionIDs:Array = this.regionsListGrid.getActiveDataList().source;
				var tmp2:Array = this.hlp.formStringFromIDs(regionIDs);			
				
				this.devicesActiveFlag ? this.tmpDevices = this.selDevice : this.tmpDevices = -1; 
				this.pwrTypesActiveFlag ? this.tmpPwrTypes = this.selPwrType : this.tmpPwrTypes = -1; 
				this.batTypesActiveFlag ? this.tmpBatTypes = this.selBatType : this.tmpBatTypes = -1;
				
				trace("calling demand token");				
				
				if (tmp2.length > 0) {
					this.getDemandRegions.token = this.dataServiceData.getDemandData(tmp2, this.workingScenarioID, 
						aggType, this.tmpDevices, this.tmpBatTypes, this.tmpPwrTypes, 1); 
				} else if (tmp.length > 0) {				
					this.getDemandData.token = this.dataServiceData.getDemandData(tmp, this.workingScenarioID, 
						aggType, this.tmpDevices, this.tmpBatTypes, this.tmpPwrTypes, 0);
				} else {
					Alert.show("select some countries and/or regions", "Info");
				};
				
				this.cursorManager.setBusyCursor();
			}
			
			[bindable] private var regList:ArrayCollection = new ArrayCollection();
			protected function regionsListNames_resultHandler(event:ResultEvent):void
			{
				regList = this.regionListNames.lastResult as ArrayCollection;
				regList.filterFunction = filterRegions;
				regList.refresh();
				this.regionsListGrid.dataList = this.regList;				
			}

			private function filterRegions(item:Object):Boolean {								
				return (item.id < 108);			
			}

			protected function getDemandRegions_resultHandler(event:ResultEvent):void
			{
				currentData = this.getDemandRegions.lastResult as ArrayCollection;				
				
				this.currentDataChart.source = this.currentData.source;
				this.currentDataGrid.source = this.currentData.source;
				
				this.currentDataChart.filterFunction = this.filterChart;
				this.currentDataGrid.filterFunction  = this.filterGrid;
				
				this.currentDataChart.refresh();
				this.currentDataGrid.refresh();
				
				this.testChart.setData(currentDataChart); // transformation is performed inside chart component
				this.testGrid.setData(currentDataGrid);
				
				this.cursorManager.removeBusyCursor();
			}


			protected function pwrTypesActive_clickHandler(event:MouseEvent):void
			{
				this.pwrTypesActiveFlag = !this.pwrTypesActiveFlag;
				this.pwrTypes.enabled = this.pwrTypesActiveFlag;
			}


			protected function batTypesActive_clickHandler(event:MouseEvent):void
			{
				this.batTypesActiveFlag = !this.batTypesActiveFlag;
				this.batTypes.enabled = this.batTypesActiveFlag;
			}


			protected function devicesActive_clickHandler(event:MouseEvent):void
			{
				this.devicesActiveFlag = !this.devicesActiveFlag;
				this.deviceListDrop.enabled = this.devicesActiveFlag;
			}

		]]>
	</fx:Script>
	
	<fx:Script>
		<![CDATA[	
			[bindable] private var selectedIndi:int;
			[bindable] private var currentData:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataChart:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataGrid:ArrayCollection = new ArrayCollection();
			
			[bindable] private var currentDataExo:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataExoChart:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataExoGrid:ArrayCollection = new ArrayCollection();
			
			[bindable] private var aggType:int = 0;				
			
			protected function getDemandData_resultHandler(event:ResultEvent):void
			{
				currentData = this.getDemandData.lastResult as ArrayCollection;				
				
				this.currentDataChart.source = this.currentData.source;
				this.currentDataGrid.source = this.currentData.source;
				
				this.currentDataChart.filterFunction = this.filterChart;
				this.currentDataGrid.filterFunction  = this.filterGrid;
				
				this.currentDataChart.refresh();
				this.currentDataGrid.refresh();
				
				this.testChart.setData(currentDataChart); // transformation is performed inside chart component
				this.testGrid.setData(currentDataGrid);
				
				this.cursorManager.removeBusyCursor();
			}
			
			protected function radiobutton1_clickHandler(event:MouseEvent):void
			{							
				this.selectedIndi = int(this.demandTypes.selectedValue);
				if (this.selectedIndi== 301) { // has split
					aggType = 0;					
				} else { // has not, is aggregated
					aggType = 1;
				};			
				activateSplits(aggType == 0);
			}
			
			private function activateSplits(on:Boolean):void {
				this.batTypes.enabled = on && this.batTypesActiveFlag;
				this.pwrTypes.enabled = on && this.pwrTypesActiveFlag;
				this.deviceListDrop.enabled = on && this.devicesActiveFlag;
				
				this.batTypesActive.enabled = on;
				this.pwrTypesActive.enabled = on;
				this.devicesActive.enabled = on;
			}
			
			protected function dropdownlist1_changeHandler(event:IndexChangeEvent):void
			{
				this.selDevice = this.deviceListDrop.selectedItem.id;
				this.selDeviceLabel.text = this.deviceListDrop.selectedItem.namen;
			}
			
			protected function deviceNamesList_resultHandler(event:ResultEvent):void
			{
				this.deviceListDrop.dataProvider = this.deviceNamesList.lastResult as ArrayCollection;
			}
			
			[bindable] private var selBatType:int = 1;
			[bindable] private var selPwrType:int = 1;
			protected function batTypes_clickHandler(event:MouseEvent):void
			{
				this.selBatType = int(this.batTypes.selectedValue);
			}
			
			protected function pwrTypes_clickHandler(event:MouseEvent):void
			{
				this.selPwrType = int(this.pwrTypes.selectedValue);
			}
			
			protected function getIndicatorNames_resultHandler(event:ResultEvent):void
			{
				this.indicatorsList = this.getIndicatorNames.lastResult;
				this.indicatorsList.filterFunction = filterB;
				this.indicatorsList.refresh();
				this.exoListDrop.dataProvider = this.indicatorsList;				
			}
			
			private function filterB(item:Object):Boolean {			
				// here should be all indis within ID range
				var fl:Boolean = true;				
				if ((item.isOutputIndicator == 0)) {					
					fl = true
				}  else fl = false;				
				return fl;
			}					
			
			[bindable] private var selExoIndi:int = 0;
			protected function exoListDrop_changeHandler(event:IndexChangeEvent):void
			{
				this.selExoIndi = this.exoListDrop.selectedItem.id;
			}
			
			protected function button3_clickHandler(event:MouseEvent):void
			{					
				var countryIDs:Array = this.countryListGrid.getActiveDataList().source;				
				var tmp:Array = this.hlp.formStringFromIDs(countryIDs);				
				var typeID:int = 0;
				var tmpDev:int = 0;
				var tmpSplit:int = 0;
				
				if ((this.selExoIndi == 204)||(this.selExoIndi == 206)) typeID = this.selBatType;
				else 
					if ((this.selExoIndi == 205)||(this.selExoIndi == 207)) typeID = this.selPwrType;
				
				if ((this.selExoIndi >= 204) && (this.selExoIndi <= 206)) tmpSplit = 1; else tmpSplit = aggType;
				
				if ( this.selExoIndi == 101 ) { 
					tmpDev = 0; tmpSplit = 0; 
				} else tmpDev = this.selDevice; 
				
				
				getMacroData.token = this.dataServiceData.getMacroData(tmp, selExoIndi, workingScenarioID, 
					tmpSplit, typeID); 
				//getMacroDataResult.token = this.dataServiceData.getMacroData(tmp, indicatorID, scenarioID, hasSplit, deviceID, typeID);
			}
			
			protected function getMacroDataResult_resultHandler(event:ResultEvent):void
			{
				currentDataExo = this.getMacroData.lastResult as ArrayCollection;				
				
				this.currentDataExoChart.source = this.currentDataExo.source;
				this.currentDataExoGrid.source = this.currentDataExo.source;

				this.currentDataExoChart.filterFunction = this.filterChartExo;
				this.currentDataExoGrid.filterFunction = this.filterGridExo;
				
				this.currentDataExoChart.refresh();
				this.currentDataExoGrid.refresh();
				
				this.testChartExo.setData(currentDataExoChart); // transformation is performed inside chart component
				this.testGridExo.setData(currentDataExoGrid);
				
				this.cursorManager.removeBusyCursor();
			}			
			
			private function filterGrid(item:Object):Boolean {				
				var f:Boolean = true;				
				if ((item.scenarioID == this.workingScenarioID)
					&& ((item.deviceID == this.selDevice)||(!devicesActiveFlag))) {					
					f = true
				}  else f = false;				
				return f;
			}	
			
			private function filterChart(item:Object):Boolean {				
				var f:Boolean = true;				
				if ((item.deviceID == this.selDevice)||(!devicesActiveFlag)) {					
					f = true
				}  else f = false;				
				return f;
			}			
			
			private function filterGridExo(item:Object):Boolean {				
				var f:Boolean = true;				
				if (((item.scenarioID == this.workingScenarioID)
					&& (item.deviceID == this.selDevice))||(this.selExoIndi < 200)) {					
					f = true
				}  else f = false;				
				return f;
			}	
			
			private function filterChartExo(item:Object):Boolean {				
				var f:Boolean = true;				
				if ((item.deviceID == this.selDevice)||(this.selExoIndi < 200)) {					
					f = true
				}  else f = false;				
				return f;
			}
			
			protected function getMacroData_faultHandler(event:FaultEvent):void
			{
				var z:int = 0;
				z = z + 1;
				Alert.show("some fockin err in SQL query");
			}	
			
			public function enableGrid(flag:Boolean) : void {
				this.testGrid.isEditable = flag;			
			}
			
		]]>
	</fx:Script>
	<s:BorderContainer width="220" height="26" left="10" top="10">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>		
		<s:Label text="Tab E. Demand" height="100%" width="50%" x="61" y="38"/>		
		<s:Button label="notify E" click="button2_clickHandler(event)" width="50%" height="100%"/>			
	</s:BorderContainer>	
	
	<utils:CCheckBoxGrid id="countryListGrid" width="220" height="332" left="8" y="36"
						 labelText="Countries">
	</utils:CCheckBoxGrid>	
	
	
	<utils:CTwoAxisChart x="237" width="383" height="283" id="testChart" y="147">
	</utils:CTwoAxisChart>
	<utils:CInteractiveGrid x="234" width="761" height="203" id="testGrid" y="440">
	</utils:CInteractiveGrid>
	<s:Button x="605" label="getSomeData" id="getSomeData" click="getSomeData_clickHandler(event)" y="76" width="171"/>
	<s:Label x="422" y="9" text="Selected Device" width="344" id="selDeviceLabel"/>
	<s:Label x="393" y="103" text="Bat Type" width="112" id="selDeviceLabel0"/>
	<s:Label x="230" y="103" text="Pwr Type" width="112" id="selDeviceLabel1"/>
	<s:DropDownList x="485" y="30" width="281" id="deviceListDrop"
					change="dropdownlist1_changeHandler(event)" labelField="namen"/>
	<s:BorderContainer x="408" y="118" width="208" height="21" fontSize="11">
		<s:layout>
			<s:HorizontalLayout paddingLeft="5"/>
		</s:layout>
		<s:RadioButton x="14" y="10" label="1C"  value="1" groupName="batTypes" selected="true" click="batTypes_clickHandler(event)"/>
		<s:RadioButton x="14" y="36" label="1D"  value="2" groupName="batTypes" click="batTypes_clickHandler(event)"/>
		<s:RadioButton x="14" y="62" label="3A"  value="3" groupName="batTypes" click="batTypes_clickHandler(event)"/>
		<s:RadioButton x="14" y="88" label="9V"  value="4" groupName="batTypes" click="batTypes_clickHandler(event)"/>
		<s:RadioButton x="14" y="114" label="AA" value="5" groupName="batTypes" click="batTypes_clickHandler(event)"/>
	</s:BorderContainer>
	<s:BorderContainer width="116" height="21" x="248" y="118" fontSize="11">
		<s:layout>
			<s:HorizontalLayout paddingLeft="5"/>
		</s:layout>
		<s:RadioButton x="14" y="10" label="DPP" value="1" groupName="pwrTypes" selected="true"
					   click="pwrTypes_clickHandler(event)"/>
		<s:RadioButton x="14" y="36" label="RCR" value="2" groupName="pwrTypes"
					   click="pwrTypes_clickHandler(event)"/>			
	</s:BorderContainer>
	<s:Label x="778" y="10" text="some exogenous var" width="193"/>
	<s:DropDownList x="789" y="29" width="201" id="exoListDrop" labelField="namen" change="exoListDrop_changeHandler(event)"/>
	<s:Button x="819" y="76" label="getSomeExo" width="171" click="button3_clickHandler(event)" id="button"/>
	<utils:CTwoAxisChart x="630" y="147" height="283" id="testChartExo" width="365">
	</utils:CTwoAxisChart>
	<utils:CInteractiveGrid x="751" y="583" height="58" id="testGridExo" width="254"
							 visible="false" enabled="false"
							>
	</utils:CInteractiveGrid>
	<utils:CCheckBoxGrid x="10" y="383" height="268" width="220" id="regionsListGrid"
						 labelText="Regions" >
	</utils:CCheckBoxGrid>
	<s:BorderContainer x="246" y="25" width="153" height="56">
		<s:layout>
			<s:VerticalLayout paddingLeft="5" paddingTop="5"/>
		</s:layout>
		<s:RadioButton x="41" y="9" label="Demand" groupName="demandTypes"  value="301"
					   click="radiobutton1_clickHandler(event)" id="dem0" selected="true" fontSize="13" fontFamily="Georgia"/>
		<s:RadioButton label="DemandAggegated" groupName="demandTypes" value="302"
					   click="radiobutton1_clickHandler(event)" id="dem1" fontSize="13" fontFamily="Georgia"/>
	</s:BorderContainer>
	<s:CheckBox x="305" y="98" label="Use?" fontSize="11" fontStyle="italic" 
				id="pwrTypesActive" enabled="true" selected="true" 
				 click="pwrTypesActive_clickHandler(event)"/>
	<s:CheckBox x="463" y="98" label="Use?" fontSize="11" fontStyle="italic" 
				id="batTypesActive" enabled="true" selected="true" 
			 	click="batTypesActive_clickHandler(event)"	/>
	<s:CheckBox x="423" y="27" label="Use?" fontSize="11" fontStyle="italic" id="devicesActive" 
				enabled="true" selected="true" height="23"
			     click="devicesActive_clickHandler(event)"/>


</s:Group>
