<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 
		 creationComplete="startApp(event)"
		 xmlns:depot1="services.depot1.*" 
		 xmlns:depot21="services.depot21.*"
		 xmlns:utils="utils.*"
		 >

	<fx:Declarations>
		<depot1:Depot1 id="depot1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
					   showBusyCursor="true"/>
		<depot21:Depot21 id="depot21" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
						 showBusyCursor="true"/>	
		
		<s:CallResponder id="deviceNamesList" result="deviceNamesList_resultHandler(event)" />		
		<s:CallResponder id="getDemandData" result="getDemandData_resultHandler(event)" fault="getDemandData_faultHandler(event)" />
		<s:CallResponder id="getDemandRegions" result="getDemandRegions_resultHandler(event)" />
		<s:CallResponder id="getIndicatorNames" result="getIndicatorNames_resultHandler(event)" />		
		
		<s:RadioButtonGroup id="demandTypes"/>
		<s:RadioButtonGroup id="batTypes" enabled="true"/>
		<s:RadioButtonGroup id="pwrTypes" enabled="true"/>
		<s:RadioButtonGroup id="chemTypes" enabled="false"/>
		
		<s:CallResponder id="getMacroData" result="getMacroDataResult_resultHandler(event)" 
						 fault="getMacroData_faultHandler(event)"/>		
		<s:CallResponder id="getDemandByChemistryResult" result="getDemandByChemistryResult_resultHandler(event)"/>
		<s:RadioButtonGroup id="regionType"/>
		<s:RadioButtonGroup id="splitByDevices"/>
		<s:RadioButtonGroup id="splitByChemistry"/>
		
	</fx:Declarations>

	<fx:Script>
		<![CDATA[	
			
			import controls.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.Depot1;
			import services.depot21.Depot21;
			
			import spark.events.IndexChangeEvent;
			
			import utils.helper;
			
			private var hlp:helper;
			public var dataServiceNames:Depot1;
			public var dataServiceData:Depot21;
			
			[bindable] private var workingScenarioID:int;
			
			[bindable] private var indicatorsList:ArrayCollection;
			[bindable] private var deviceList:ArrayCollection;
			[bindable] public var selDevice:int = 1; 
			
			[bindable] private var batTypesActiveFlag:Boolean = false;
			[bindable] private var pwrTypesActiveFlag:Boolean = false;
			[bindable] private var chemTypesActiveFlag:Boolean = false;
			[bindable] private var devicesActiveFlag:Boolean = false;			
			
			protected function startApp(event:FlexEvent):void {
				trace("app start panelTab E");			
				hlp = new helper();			
				this.addEventListener("updateCharts", updateCharts);	
				this.addEventListener("demandAggChanged", updateChemistrySplit);
				
				this.addEventListener("refreshData", refreshData);
			}
			
			public function initNames():void {
				trace("init names inside panel E");			
				
				this.deviceNamesList.token = this.dataServiceNames.getDeviceNames();				
				//this.regionListNames.token = this.dataServiceNames.getCountryList(1);								
				this.getIndicatorNames.token = this.dataServiceNames.getIndicatorNames();
			}
			
			public function setWorkingScenario(nv:int, flag:Boolean):void {
				this.workingScenarioID = nv;
				this.testGrid.setWorkingScenario(this.workingScenarioID, flag);	
				this.testGridExo.setWorkingScenario(this.workingScenarioID, false);
			}					
			
			// ----- COMMUNICATION PART ---------------/////
			[bindable]	private var dataList:ArrayCollection;
			[bindable]	private var dataListReg:ArrayCollection;
			public function getDataList():ArrayCollection {
				return this.dataList;			
			}
			
			public function setDataList(data:ArrayCollection):void {
				this.dataList = data;
			}		
			
			public function setDataListReg(data:ArrayCollection):void {
				this.dataListReg = data;
			}	
			
			public function setUseCluster(flag:Boolean):void {
				this.useCluster = flag;
			}
			
			private var tmpDevices:int  = 0;
			private var tmpPwrTypes:int = 0;
			private var tmpBatTypes:int = 0;
			
			protected function getSomeData_clickHandler(event:MouseEvent):void
			{			
				trace("calling demand token");				
				//this.refreshData();
				this.dispatchEvent(new Event("refreshData", false));
			}		
			
			/*public function updateChartTitle():void {
				var tx:String = "Demand";
				if ((deviceListDrop.selectedIndex >= 0) && (devicesActive)) 
					tx = tx + ", " + this.deviceListDrop.selectedItem.namen;
				else 
					tx = tx +  ", All Devices";				
				tx = tx + ( isLevel ? (", units") : (", growth") );				
				this.testChart.setChartTitle(tx);			
			}*/
			
			[bindable] public var useCluster:Boolean = false;
			public function refreshData(evt:Event):void {
				if (!this.dataList) {
					Alert.show("select some countries and/or regions", "Error E61");
				} else {				
					var countryIDs:Array = this.dataList.source;				
					var tmp:Array = this.hlp.formStringFromIDs(countryIDs);				
					
					var regionIDs:Array = this.dataListReg.source;
					var tmp2:Array = this.hlp.formStringFromIDs(regionIDs);			
					
					this.devicesActiveFlag ? this.tmpDevices = this.selDevice : this.tmpDevices = -1; 
					this.pwrTypesActiveFlag ? this.tmpPwrTypes = this.selPwrType : this.tmpPwrTypes = -1; 
					this.batTypesActiveFlag ? this.tmpBatTypes = this.selBatType : this.tmpBatTypes = -1;				
					
					trace("calling demand token");				
					
					this.cursorManager.setBusyCursor();
					
					if ((this.chemTypesActiveFlag)&&(tmp2.length > 0)) {
						getDemandByChemistryResult.token = this.dataServiceData.getDemandByChemistry(tmp2, workingScenarioID, 1 +  int(useCluster));
					} else if ((this.chemTypesActiveFlag)&&(tmp.length > 0)) {
						getDemandByChemistryResult.token = this.dataServiceData.getDemandByChemistry(tmp, workingScenarioID, 0);					
					} else if (tmp2.length > 0) {
						this.getDemandRegions.token = this.dataServiceData.getDemandData(tmp2, this.workingScenarioID, 
							this.tmpDevices, this.tmpBatTypes, this.tmpPwrTypes, 1 + int(useCluster));					
					} else if (tmp.length > 0) {				
						this.getDemandData.token = this.dataServiceData.getDemandData(tmp, this.workingScenarioID, 
							this.tmpDevices, this.tmpBatTypes, this.tmpPwrTypes, 0);					
					} else {
						this.cursorManager.removeBusyCursor();						
					};
				};
			}			
			
			[bindable] private var regList:ArrayCollection = new ArrayCollection();
			
			protected function getDemandRegions_resultHandler(event:ResultEvent):void
			{
				currentData = this.getDemandRegions.lastResult as ArrayCollection;				
				
				this.currentDataChart.source = this.currentData.source;
				this.currentDataGrid.source = this.currentData.source;
				
				this.dispatchEvent(new Event("updateCharts", false));
				
				this.cursorManager.removeBusyCursor();
			}


			protected function pwrTypesActive_clickHandler(event:MouseEvent):void
			{
				this.pwrTypesActiveFlag = !this.pwrTypesActiveFlag;
				this.pwrTypes.enabled = this.pwrTypesActiveFlag;

				this.dispatchEvent(new Event("demandAggChanged", true));
			}


			protected function batTypesActive_clickHandler(event:MouseEvent):void
			{
				this.batTypesActiveFlag = !this.batTypesActiveFlag;
				this.batTypes.enabled = this.batTypesActiveFlag;
				
				this.dispatchEvent(new Event("demandAggChanged", true));		
			}

			protected function chemTypesActive_clickHandler(event:MouseEvent):void
			{
				this.chemTypesActiveFlag = (int(this.splitByChemistry.selectedValue) > 0);
				this.chemTypes.enabled = this.chemTypesActiveFlag;
				
				//if (this.chemTypesActiveFlag) {					
					this.pwrTypesActiveFlag = (!this.chemTypesActiveFlag) && (selBatType > 0);					
					this.pwrTypes.enabled = !this.chemTypesActiveFlag;
										
					this.batTypesActiveFlag = (!this.chemTypesActiveFlag) && (selPwrType > 0);
					this.batTypes.enabled = !this.chemTypesActiveFlag;
										
					this.devicesActiveFlag = (!this.chemTypesActiveFlag) && (this.selDeviceAggLevel > 0);
					this.deviceListDrop.enabled = !this.chemTypesActiveFlag;					
					this.radioDevCat.enabled = !this.chemTypesActiveFlag;
					this.radioDevSingle.enabled = !this.chemTypesActiveFlag;
				//};
				
				this.dispatchEvent(new Event("refreshData", false));
			}

			[bindable] private var selDeviceAggLevel:int = 0;
			protected function devicesActive_clickHandler(event:MouseEvent):void
			{
				this.selDeviceAggLevel = int(this.splitByDevices.selectedValue);			
				
				this.devicesActiveFlag = (this.selDeviceAggLevel > 0);				
				this.deviceListDrop.enabled = this.devicesActiveFlag;
				
				this.dispatchEvent(new Event("demandAggChanged", true));				
			}

			private function filterGrid(item:Object):Boolean {				
				var f:Boolean = true;	
				
				if (chemTypesActiveFlag) {
					if ((item.chemistryID == this.selChemType)&&
						(item.scenarioID == this.workingScenarioID))
							f = true;
					else 
							f = false;
				} else {									
					if ( (item.scenarioID == this.workingScenarioID) &&
						( (item.deviceID == this.selDevice) || (!devicesActiveFlag) ) ) {					
						f = true
					}  else 
						f = false;		
				};
				
				return f;
			}	
			
			private function filterChart(item:Object):Boolean {				
				var f:Boolean = true;
				
				if (chemTypesActiveFlag) {
					if (item.chemistryID == this.selChemType) f = true;
					else f = false;
				} else {
					if ((item.deviceID == this.selDevice)||(!devicesActiveFlag)) {					
						f = true
					}  else 
						f = false;				
				};			
				
				return f;
			}					

			protected function getDemandByChemistryResult_resultHandler(event:ResultEvent):void
			{
				currentData = this.getDemandByChemistryResult.lastResult as ArrayCollection;				
				
				this.currentDataChart.source = this.currentData.source;
				this.currentDataGrid.source = this.currentData.source;				
				this.dispatchEvent(new Event("updateCharts", false));				
				this.cursorManager.removeBusyCursor();
			}

			protected function chemTypes_clickHandler(event:MouseEvent):void
			{
				this.selChemType = int(this.chemTypes.selectedValue);
				this.dispatchEvent(new Event("updateCharts", false));
				
				this.chemTypesActiveFlag = (this.selChemType > 0);
				//need to disable pwrSplit and sizeSplit accordingly
				//this.chemTypes.enabled = this.chemTypesActiveFlag;
			}


			protected function getDemandData_faultHandler(event:FaultEvent):void
			{
				Alert.show("could not get Demand data", "Error E61");
			}

			
			
		]]>
	</fx:Script>
	
	<fx:Script>
		<![CDATA[	
			[bindable] private var selectedIndi:int = 301;
			[bindable] private var currentData:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataChart:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataGrid:ArrayCollection = new ArrayCollection();
			
			[bindable] private var currentDataExo:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataExoChart:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataExoGrid:ArrayCollection = new ArrayCollection();
			
			[bindable] private var aggType:int = 0;				
			
			protected function getDemandData_resultHandler(event:ResultEvent):void
			{
				currentData = this.getDemandData.lastResult as ArrayCollection;				
				
				this.currentDataChart.source = this.currentData.source;
				this.currentDataGrid.source = this.currentData.source;
				
				this.dispatchEvent(new Event("updateCharts", false));
							
				this.cursorManager.removeBusyCursor();
			}
			
			protected function radiobutton1_clickHandler(event:MouseEvent):void
			{							
				this.selectedIndi = int(this.demandTypes.selectedValue);
				if (this.selectedIndi== 301) { // has split
					aggType = 0;					
				} else { // has not, is aggregated
					aggType = 1;
				};			
				activateSplits(aggType == 0);
			}
			
			private function activateSplits(on:Boolean):void {
				this.batTypes.enabled = on && this.batTypesActiveFlag;
				this.pwrTypes.enabled = on && this.pwrTypesActiveFlag;
				this.deviceListDrop.enabled = on && this.devicesActiveFlag;
				
				/*this.batTypesActive.enabled = on;
				this.pwrTypesActive.enabled = on;
				this.devicesActive.enabled = on;*/
			}
			
			protected function dropdownlist1_changeHandler(event:IndexChangeEvent):void
			{
				this.selDevice = this.deviceListDrop.selectedItem.id;
				//this.selDeviceLabel.text = this.deviceListDrop.selectedItem.namen;
								
				this.currentDataChart.filterFunction = this.filterChart;
				this.currentDataGrid.filterFunction  = this.filterGrid;				
				this.currentDataChart.refresh();
				this.currentDataGrid.refresh();				
				this.testChart.setData(currentDataChart, isLevel);
				this.testGrid.setData(currentDataGrid, isLevel);
				
				this.currentDataExoChart.filterFunction = this.filterChartExo;
				this.currentDataExoChart.refresh();				
				this.testChartExo.setData(this.currentDataExoChart, isLevel);
				
				//updateChartTitle();
				this.testChart.updateChartTitle("Demand", this.deviceListDrop.selectedIndex, this.devicesActiveFlag, 
					this.isLevel, this.deviceListDrop.selectedItem.namen);
			}
			
			protected function deviceNamesList_resultHandler(event:ResultEvent):void
			{
				this.deviceListDrop.dataProvider = this.deviceNamesList.lastResult as ArrayCollection;
			}
			
			[bindable] private var selBatType:int = 0;
			[bindable] private var selPwrType:int = 1;
			[bindable] private var selChemType:int = 1;
			
			protected function batTypes_clickHandler(event:MouseEvent):void
			{
				this.selBatType = int(this.batTypes.selectedValue);				
				this.batTypesActiveFlag = (this.selBatType > 0);				
				if (this.selBatType == 0) {	this.dispatchEvent(new Event("demandAggChanged", true)); };				
				this.dispatchEvent(new Event("refreshData", false));
				
				exoIndi_clickHandler(null);
			}
			
			protected function pwrTypes_clickHandler(event:MouseEvent):void
			{
				this.selPwrType = int(this.pwrTypes.selectedValue);				
				this.pwrTypesActiveFlag = (this.selPwrType > 0);		
				if (this.selPwrType == 0) { this.dispatchEvent(new Event("demandAggChanged", true)); };				
				this.dispatchEvent(new Event("refreshData", false));			
				
				exoIndi_clickHandler(null);
			}
			
			protected function getIndicatorNames_resultHandler(event:ResultEvent):void
			{
				this.indicatorsList = this.getIndicatorNames.lastResult;
				this.indicatorsList.filterFunction = filterB;
				this.indicatorsList.refresh();
				this.exoListDrop.dataProvider = this.indicatorsList;				
			}
			
			private function filterB(item:Object):Boolean {			
				// here should be all indis within ID range
				var fl:Boolean = true;				
				if ((item.isOutputIndicator == 0)) {					
					fl = true
				}  else fl = false;				
				return fl;
			}					
			
			[bindable] private var selExoIndi:int = 101;
			protected function exoListDrop_changeHandler(event:IndexChangeEvent):void
			{
				this.selExoIndi = this.exoListDrop.selectedItem.id;
				exoIndi_clickHandler(null);
			}
			
			protected function 	exoIndi_clickHandler(event:MouseEvent):void
			{					
				var countryIDs:Array = this.dataList.source;		
				var tmp:Array = this.hlp.formStringFromIDs(countryIDs);				
				var typeID:int = 0;
				var tmpDev:int = 0;
				var tmpSplit:int = 0;
				
				if ((this.selExoIndi == 204)||(this.selExoIndi == 206)) typeID = this.selBatType;
				else 
					if ((this.selExoIndi == 205)||(this.selExoIndi == 207)) typeID = this.selPwrType;
				
				if ((this.selExoIndi >= 204) && (this.selExoIndi <= 206)) tmpSplit = 1; else tmpSplit = aggType;
				
				if ( this.selExoIndi == 101 ) { 
					tmpDev = 0; tmpSplit = 0; 
				} else tmpDev = this.selDevice; 				
				
				getMacroData.token = this.dataServiceData.getMacroData(tmp, selExoIndi, workingScenarioID, 
					tmpSplit, typeID, 1);				
			}
			
			protected function getMacroDataResult_resultHandler(event:ResultEvent):void
			{
				currentDataExo = this.getMacroData.lastResult as ArrayCollection;				
				this.currentDataExoChart.source = this.currentDataExo.source;
				//this.currentDataExoGrid.source = this.currentDataExo.source;				
				this.dispatchEvent(new Event("updateCharts", false));				
				this.cursorManager.removeBusyCursor();
			}			
			
			private function filterGridExo(item:Object):Boolean {				
				var f:Boolean = true;				
				if (((item.scenarioID == this.workingScenarioID)
					&& (item.deviceID == this.selDevice))||(this.selExoIndi < 200)) {					
					f = true
				}  else f = false;				
				return f;
			}	
			
			private function filterChartExo(item:Object):Boolean {				
				var f:Boolean = true;				
				if ((item.deviceID == this.selDevice)||(this.selExoIndi < 200)) {					
					f = true
				}  else f = false;				
				return f;
			}
			
			protected function getMacroData_faultHandler(event:FaultEvent):void
			{
				var z:int = 0;
				z = z + 1;
				Alert.show("error in macroData SQL query", "Error E61");
			}	
			
			public function enableGrid(flag:Boolean, isLocal:Boolean) : void {
				this.testGrid.isEditable = flag;			
			}
			
			[bindable] private var isLevel:Boolean = true;
			protected function radiobutton2_changeHandler(event:Event):void
			{
				this.isLevel = !this.isLevel;
				this.dispatchEvent(new Event("updateCharts", false));
			}
			
			protected function updateCharts(evt:Event):void {
				this.currentDataChart.filterFunction = this.filterChart;
				this.currentDataGrid.filterFunction  = this.filterGrid;
				
				this.currentDataChart.refresh();
				this.currentDataGrid.refresh();
				
				this.testChart.setData(currentDataChart, isLevel); // transformation is performed inside chart component
				this.testGrid.setData(currentDataGrid, isLevel);
				
				this.currentDataExoChart.filterFunction = this.filterChartExo;
				this.currentDataExoChart.refresh();
				
				this.testChartExo.setData(this.currentDataExoChart, isLevel);	
				
				//updateChartTitle()
				this.testChart.updateChartTitle("Demand", 
					(deviceListDrop.selectedIndex ? deviceListDrop.selectedIndex : 0), 
					this.devicesActiveFlag,	this.isLevel, 
					(deviceListDrop.selectedItem  ? deviceListDrop.selectedItem.namen : "")
				);
			}
			
			protected function updateChemistrySplit(evt:Event):void {
				var z:Boolean = (!batTypesActiveFlag && !pwrTypesActiveFlag && !devicesActiveFlag);
				
				if (!z) {
					//this.chemistryActive.selected = z;
					this.chemTypesActiveFlag = z;
					this.chemTypes.enabled = this.chemTypesActiveFlag;
				};
				
				this.dispatchEvent(new Event("refreshData", false));
			}
			
			protected function setActiveIndis(k:int):void {
				//this.indicatorsBox.selectedIndex = k;
			}

			public function setIndicatorsList(arr:ArrayCollection):void {
				/*var rr:ArrayCollection = this.flMngr.getRecordedSelectedIndicators();
				if (rr) this.setActiveIndis(0, rr.getItemAt(0).id);*/
			}		
			
			
		]]>
	</fx:Script>
	
	<utils:CTwoAxisChart width="747" height="274" id="testChart" left="10" top="169">
	</utils:CTwoAxisChart>
	<utils:CInteractiveGrid width="747" height="194" id="testGrid" left="10" top="489">
	</utils:CInteractiveGrid>
	<s:Button x="326" label="refresh data" id="getSomeData" click="getSomeData_clickHandler(event)" y="136" width="285" height="25" fontWeight="bold"/>
	<s:Label text="Devices Aggeragtion Level" id="selDeviceLabel" fontSize="11" fontStyle="italic" top="21" left="11" fontFamily="Arial"/>
	<s:Label y="132" text="Show Data in:" id="selDeviceLabel2" fontStyle="italic" fontSize="11" left="14" fontFamily="Arial"/>
	<s:Label text="Battery Types" id="selDeviceLabel3" fontStyle="italic" fontSize="11" left="13" fontFamily="Arial" top="57"/>
	<s:DropDownList width="280" id="deviceListDrop"
					change="dropdownlist1_changeHandler(event)" labelField="namen" selectedIndex="1" height="20" top="34" left="441" enabled="false"/>
	<s:BorderContainer x="253" height="59" fontSize="11" fontFamily="Verdana" top="70" borderVisible="false" backgroundAlpha="0.0" id="sizeBorder" width="210">
		<s:layout>
			<s:TileLayout horizontalGap="5" verticalGap="1"/>
		</s:layout>
		<s:RadioButton x="269" y="75" label="All battery sizes"  value="0" groupName="batTypes" click="batTypes_clickHandler(event)" selected="true" fontFamily="Arial" fontSize="11"/>
		<s:RadioButton x="269" y="75" label="AAA"  value="3" groupName="batTypes" click="batTypes_clickHandler(event)" selected="false" fontFamily="Arial" fontSize="11"/>
		<s:RadioButton x="318" y="75" label="AA" value="5" groupName="batTypes" click="batTypes_clickHandler(event)" fontFamily="Arial" fontSize="11"/>
		<s:RadioButton x="359" y="75" label="C"  value="1" groupName="batTypes" selected="true" click="batTypes_clickHandler(event)" fontFamily="Arial" fontSize="11"/>
		<s:RadioButton x="391" y="75" label="D"  value="2" groupName="batTypes" click="batTypes_clickHandler(event)" fontFamily="Arial" fontSize="11"/>
		<s:RadioButton x="423" y="75" label="9V"  value="4" groupName="batTypes" click="batTypes_clickHandler(event)" fontFamily="Arial" fontSize="11"/>

	</s:BorderContainer>
	<s:BorderContainer width="192" x="32" fontSize="11" fontFamily="Verdana" top="72" borderVisible="false" backgroundAlpha="0.0" id="pwrTypesBorder" height="53">
		<s:layout>
			<s:VerticalLayout gap="1"/>
		</s:layout>
		<s:RadioButton x="44" y="50" label="All battery types" value="0" groupName="pwrTypes" selected="true"
					   click="pwrTypes_clickHandler(event)" fontSize="11" fontFamily="Arial" enabled="true"/>	
		<s:RadioButton x="44" y="75" label="Disposable (DPP)" value="1" groupName="pwrTypes" selected="false"
					   click="pwrTypes_clickHandler(event)" fontSize="11" fontFamily="Arial" enabled="true"/>
		<s:RadioButton x="44" y="93" label="Round Cell Rechargeable (RCR)" value="2" groupName="pwrTypes"
					   click="pwrTypes_clickHandler(event)" fontSize="11" fontFamily="Arial" selected="false" enabled="true"/>

	</s:BorderContainer>
	<s:Label x="10" text="some exogenous var" fontStyle="italic" fontSize="11" top="451" fontFamily="Arial"/>
	<s:DropDownList x="39" width="226" id="exoListDrop" labelField="namen" 
					change="exoListDrop_changeHandler(event)" selectedIndex="0" height="20" top="462" enabled="false"/>
	<s:Button x="628" y="462" label="refresh exo data" width="129" 
			  click="exoIndi_clickHandler(event)" id="button" enabled="false"/>
	<utils:CTwoAxisChart x="598" y="461" height="154" id="testChartExo" width="267"
						 visible="false" >
	</utils:CTwoAxisChart>
	<utils:CInteractiveGrid x="528" y="585" height="58" id="testGridExo" width="254"
							 visible="false" enabled="false"
							>
	</utils:CInteractiveGrid>
	<s:RadioButton x="74" y="144" label="Levels" groupName="growthType" enabled="true" 
				   selected="true" height="19" change="radiobutton2_changeHandler(event)" fontFamily="Arial" fontSize="11"/>
	<s:RadioButton x="137" y="144" label="Growths" groupName="growthType" 
				   enabled="true" height="19" change="radiobutton2_changeHandler(event)" fontFamily="Arial" fontSize="11"/>
	<s:BorderContainer width="124" x="657" fontFamily="Verdana" fontSize="11" top="91" borderVisible="false" backgroundAlpha="0.0" height="53">
		<s:layout>
			<s:VerticalLayout gap="1"/>
		</s:layout>
		
			<s:RadioButton x="4" y="10" label="Alkaline" groupName="chemTypes" value="1" selected="true" 
						   click="chemTypes_clickHandler(event)" fontFamily="Arial" fontSize="11"/>
			<s:RadioButton x="4" y="28" label="Zinc" groupName="chemTypes" value="2" click="chemTypes_clickHandler(event)" fontFamily="Arial" fontSize="11"/>
			<s:RadioButton x="4" y="46" label="Lithium" groupName="chemTypes" value="3" click="chemTypes_clickHandler(event)" fontFamily="Arial" fontSize="11"/>
		
	</s:BorderContainer>

	<s:Label text="Step 7: You can adjust any battery type, size and chemistry below." verticalAlign="middle" fontStyle="italic" fontSize="13" top="5" left="10" fontFamily="Arial" color="#00B050"/>
	
	<s:BorderContainer x="33" width="391" backgroundAlpha="0.0" borderVisible="false" height="25" top="34">
		<s:layout>
			<s:HorizontalLayout gap="20"/>
		</s:layout>
		<s:RadioButton x="201" y="92"  value="0" label="All devices (aggregate)" groupName="splitByDevices" selected="true" click="devicesActive_clickHandler(event)" fontFamily="Arial" fontSize="11"/>
		<s:RadioButton x="201" y="118" value="1" label="Device category" groupName="splitByDevices" selected="false" click="devicesActive_clickHandler(event)" fontFamily="Arial" fontSize="11" id="radioDevCat"/>
		<s:RadioButton x="201" y="144" value="2" label="Single device" groupName="splitByDevices" selected="false" click="devicesActive_clickHandler(event)" fontFamily="Arial" fontSize="11" id="radioDevSingle"/>
	</s:BorderContainer>
	<s:Label text="Battery type/size" id="selDeviceLabel1" fontStyle="italic" fontSize="11" 
			 verticalAlign="middle" fontFamily="Arial" x="220" top="57"/>
	<s:RadioButton x="535" value="0" label="All chemistry" groupName="splitByChemistry" click="chemTypesActive_clickHandler(event)" enabled="true" selected="true" top="73"/>
	<s:RadioButton x="631" y="73" value="1" label="Use split by:" groupName="splitByChemistry" click="chemTypesActive_clickHandler(event)" enabled="true"/>
	<s:Label text="Chemistry" id="selDeviceLabel0" fontStyle="italic" fontSize="11" fontFamily="Arial" x="517" top="59"/>


</s:Group>
