<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="900" height="670" 
		 xmlns:utils="utils.*"
		 creationComplete="startApp(event)"		  
		 xmlns:depot1="services.depot1.*" 
		 xmlns:depot21="services.depot21.*"
		  xmlns:depot3="services.depot3.*">
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>

	<fx:Script>
		<![CDATA[
			protected function updateData_resultHandler(event:ResultEvent):void
			{
				Alert.show("data updated");
			}	
			
			protected function button_clickHandler(event:MouseEvent):void
			{
				this.refreshDeviceBase();			
			}			

			public function refreshDeviceBase():void {
				writeViewToTableResult.token = depot3.writeViewToTable();
			}
			
			protected function writeViewToTableResult_resultHandler(event:ResultEvent):void
			{
				if (event.message.body != "ok") //this.someLabel.text = "view written successfully";
				Alert.show("data was not written to DB!", "Error");
			}


			protected function button4_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new Event("scenarioResetRequested", true));
			}

			[bindable] private var selDevice:int = 1;
			protected function deviceListDrop_changeHandler(event:IndexChangeEvent):void
			{
				this.selDevice = this.deviceListDrop.selectedItem.id;

				this.currentDataChart.filterFunction = filterChart;
				this.currentDataChart.refresh();		
				this.currentDataGrid.filterFunction = filterGrid;
				this.currentDataGrid.refresh();
				
				this.testChart.setData(currentDataChart, isLevel); // transformation is performed inside chart component
				this.testGrid.setData(currentDataGrid, isLevel);

			}

			protected function getDeviceNames_resultHandler(event:ResultEvent):void
			{
				this.deviceListDrop.dataProvider = this.getDeviceNames.lastResult as ArrayCollection;
			}
			
			public function enableGrid(flag:Boolean) : void {
				this.testGrid.isEditable = flag;
				flag ? this.flagLabel.text = "Table is editable" : this.flagLabel.text = "Table is not editable";
			}

		]]>
	</fx:Script>

	
	<fx:Script>
		<![CDATA[
			import controls.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.Depot1;
			
			import spark.events.IndexChangeEvent;
			
			import utils.helper;
			
			public var dataServiceNames:Depot1;
			public var dataServiceData:Depot21;
			public var dataServiceUpdate:Depot3;
			
			[bindable] private var workingScenarioID:int;
			private var hlp:helper;
			[bindable] private var indicatorsList:ArrayCollection;
			
			public static const CNTRYCHANGED:String = "CNTRY_CHANGED";
			public static const CNTRYUNCHANGED:String = "CNTRY_UNCHANGED"			
			
			
			protected function startApp(event:FlexEvent):void {
				trace("app start panelTab C");			
				hlp = new helper();			
				this.addEventListener("updateCharts", updateCharts);
				this.refreshDeviceBase();
			}
			
			public function initNames():void {
				trace("init names inside panel C");				
				indicatorsNamesList.token = this.dataServiceNames.getIndicatorNames();
				this.getDeviceNames.token = this.dataServiceNames.getDeviceNames();
			}
			
			public function setWorkingScenario(nv:int, flag:Boolean):void {
				this.workingScenarioID = nv;
				this.testGrid.setWorkingScenario(this.workingScenarioID, flag);				
			}					
			
			protected function countryListNames_resultHandler(event:ResultEvent):void
			{
				this.countryListGrid.dataList = this.countryListNames.lastResult as ArrayCollection;
			}			
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				var selCntries:Object = this.countryListGrid.dataList;
				this.dispatchEvent(new Event(tabC4.CNTRYCHANGED, true));				
			}
			
			[bindable] public var alteredData:ArrayCollection = new ArrayCollection();
			public function digestChanges(evt:Event):void {
				alteredData = this.testGrid.getData();
				
				var temp:Object = new Object();
				temp = ({'id':1, data:this.alteredData});
				//hasSplit by batteryTypes = false
				this.updateData.token = this.dataServiceUpdate.updateData(temp, true, this.selDevice, 0);
			}
			
			
			// ----- COMMUNICATION PART ---------------/////			
			public function getDataList():ArrayCollection {
				return this.countryListGrid.dataList;			
			}
			
			public function setDataList(data:ArrayCollection):void {
				this.countryListGrid.dataList = data;
			}		
			
			public function setDataListActive(data:ArrayCollection):void {				
				this.countryListGrid.activateSelections(data);
			}
			
			public function setIndicatorsList(evt:ResultEvent):void {
				this.indicatorsList = this.indicatorsNamesList.lastResult;
				this.indicatorsList.filterFunction = filterB;
				this.indicatorsList.refresh();
				this.indicatorsBox.dataProvider = this.indicatorsList;			
			}
			
			private function filterB(item:Object):Boolean {			
				var fl:Boolean = true;				
				if ((item.hasSplitByDevices == 1)&&(item.hasSplitByTypes == 0)&&
					(item.isOutputIndicator == 1)) {					
						fl = true
				}  else fl = false;				
				return fl;
			}					
			
			protected function button3_clickHandler(event:MouseEvent):void
			{				
				trace("calling device base token");
				this.refreshData();					
			}
			
			public function refreshData():void {
				var countryIDs:Array = this.countryListGrid.getActiveDataList().source;		
				var tmp:Array = this.hlp.formStringFromIDs(countryIDs);
				if (tmp.length < 1) { 
					Alert.show("Select at least one country", "Error"); 
				} else {
					getDeviceBase.token = this.dataServiceData.getDeviceBase(tmp, workingScenarioID);
				};
			}
			
			[bindable] private var selectedIndi:int;
			[bindable] private var currentData:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataGrid:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataChart:ArrayCollection = new ArrayCollection();
			
			protected function indicatorsBox_changeHandler(event:IndexChangeEvent):void {
				this.selectedIndi = this.indicatorsBox.selectedItem.id;
			}						
			
			protected function getDeviceBase_resultHandler(event:ResultEvent):void
			{
				currentData = this.getDeviceBase.lastResult as ArrayCollection;
				
				this.currentDataChart.source = this.currentData.source;
				this.currentDataGrid.source = this.currentData.source;
				this.dispatchEvent(new Event("updateCharts", false));				
			}
			
			protected function updateCharts(evt:Event):void {
				this.currentDataGrid.filterFunction = this.filterGrid;
				this.currentDataGrid.refresh();
				this.currentDataChart.filterFunction = this.filterChart;
				this.currentDataChart.refresh();				
				
				this.testChart.setData(currentDataChart, isLevel); // transformation is performed inside chart component
				this.testGrid.setData(currentDataGrid, isLevel);
			}
			
			private function filterGrid(item:Object):Boolean {				
				var f:Boolean = true;				
				if ((item.scenarioID == this.workingScenarioID)
					&& (item.deviceID == this.selDevice)) {					
					f = true
				}  else f = false;				
				return f;
			}	
			
			private function filterChart(item:Object):Boolean {				
				var f:Boolean = true;				
				if (item.deviceID == this.selDevice) {					
					f = true
				}  else f = false;				
				return f;
			}			
			
			[bindable] private var isLevel:Boolean = true;
			protected function radiobutton2_changeHandler(event:Event):void
			{
				this.isLevel = !this.isLevel;
				this.dispatchEvent(new Event("updateCharts", false));
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<depot1:Depot1 id="depot1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
					   showBusyCursor="true"/>
		<depot21:Depot21 id="depot21" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
						 showBusyCursor="true"/>
		<depot3:Depot3 id="depot3" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
					   showBusyCursor="true"/>
		
		<s:CallResponder id="countryListNames"  result="countryListNames_resultHandler(event)"/>
		<s:CallResponder id="indicatorsNamesList" result="setIndicatorsList(event)"/>		
		<s:CallResponder id="getDeviceNames" result="getDeviceNames_resultHandler(event)" />
		
		<s:CallResponder id="getDeviceBase" result="getDeviceBase_resultHandler(event)" />		
		<s:CallResponder id="writeViewToTableResult" result="writeViewToTableResult_resultHandler(event)"/>
		<s:CallResponder id="updateData" result="updateData_resultHandler(event)" />		
		
		
	</fx:Declarations>
	
	<utils:CCheckBoxGrid id="countryListGrid" width="220" height="589" top="43" left="11">
	</utils:CCheckBoxGrid>
	
	<s:BorderContainer width="224" height="25" top="10" x="6">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>		
		<s:Label text="Tab C. Device Base" height="100%" width="50%" x="61" y="38"/>		
		<s:Button label="notify C" click="button2_clickHandler(event)" width="50%" height="100%"/>			
	</s:BorderContainer>
	
	<utils:CTwoAxisChart x="242" width="540" height="260" id="testChart" top="86">
	</utils:CTwoAxisChart>
	<utils:CInteractiveGrid x="241" width="540" height="221" id="testGrid" top="411">
	</utils:CInteractiveGrid>
	<s:DropDownList x="243" width="195" id="indicatorsBox"
					labelField="namen"	 top="24" selectedIndex="0"></s:DropDownList>
	<s:Button x="685" label="getSomeData" id="getSomeData" click="button3_clickHandler(event)" top="55"/>
	<s:Button x="243" y="55" label="writeViewToDB" width="148" id="button"
			  click="button_clickHandler(event)" enabled="false"/>
	<s:Button x="640" y="357" label="updateDB" width="136" id="button2"
			  click="digestChanges(event)"/>
	<s:Label x="513" y="10" text="Devices" width="84" id="someLabel0" textAlign="left"/>
	<s:Label x="243" y="10" text="Indicators" width="84" id="someLabel1" textAlign="left"/>
	<s:Button x="239" y="357" label="Reset" width="122" click="button4_clickHandler(event)"/>
	<s:DropDownList x="459" y="26" width="322" id="deviceListDrop" labelField="namen" 
					change="deviceListDrop_changeHandler(event)" selectedIndex="0"></s:DropDownList>
	<s:Label x="239" y="392" text="Table activiy state" width="196" fontStyle="italic" fontSize="11" id="flagLabel"/>
	<s:RadioButton x="427" y="58" label="Levels" groupName="growthType" enabled="true" 
				   selected="true" height="19" change="radiobutton2_changeHandler(event)"/>
	<s:RadioButton x="489" y="58" label="Growths" groupName="growthType" 
				   enabled="true" height="19" change="radiobutton2_changeHandler(event)"/>
</s:Group> 
