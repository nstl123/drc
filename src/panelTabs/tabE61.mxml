<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 
		 creationComplete="startApp(event)"
		 xmlns:depot1="services.depot1.*" 
		 xmlns:depot21="services.depot21.*"
		 xmlns:utils="utils.*"
		 >

	<fx:Declarations>
		<depot1:Depot1 id="depot1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
					   showBusyCursor="true"/>
		<depot21:Depot21 id="depot21" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
						 showBusyCursor="true"/>	
		
		<s:CallResponder id="deviceNamesList" result="deviceNamesList_resultHandler(event)" />		
		<s:CallResponder id="getDemandData" result="getDemandData_resultHandler(event)" 
						 fault="getDemandData_faultHandler(event)" />
		<s:CallResponder id="getDemandRegions" result="getDemandRegions_resultHandler(event)"
						 fault="getDemandRegions_faultHandler(event)" />
				
		<s:CallResponder id="getAllIndiNames" result="getAllIndiNames_resultHandler(event)" 
						 fault="getAllIndiNames_faultHandler(event)" />						 
		
		<s:RadioButtonGroup id="demandTypes"/>
		<s:RadioButtonGroup id="batTypes" enabled="true"/>
		<s:RadioButtonGroup id="pwrTypes" enabled="true"/>
		<s:RadioButtonGroup id="chemTypes" enabled="false"/>
		
	<!--	<s:CallResponder id="getMacroData" result="getMacroDataResult_resultHandler(event)" 
						 fault="getMacroData_faultHandler(event)"/>		
!-->
		<s:CallResponder id="getMacroDataCategory" result="getMacroDataCategory_resultHandler(event)" fault="getMacroDataCategory_faultHandler(event)" />
		
		<s:CallResponder id="getDemandByChemistry" result="getDemandByChemistryResult_resultHandler(event)" fault="getDemandByChemistry_faultHandler(event)"/>
		<s:CallResponder id="getDeviceBase" result="getDeviceBase_resultHandler(event)" 
						 fault="getDeviceBase_faultHandler(event)"/> 
		
		<s:RadioButtonGroup id="regionType"/>
		<s:RadioButtonGroup id="splitByDevices"/>
		<s:RadioButtonGroup id="splitByChemistry"/>
		<s:RadioButtonGroup id="granGroup"/>
		
	</fx:Declarations>

	<fx:Script>
		<![CDATA[	
			
			import controls.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.Depot1;
			import services.depot21.Depot21;
			
			import spark.events.IndexChangeEvent;
			
			import utils.helper;
			
			private var hlp:helper;
			public var dataServiceNames:Depot1;
			public var dataServiceData:Depot21;
			
			[bindable] private var workingScenarioID:int;
			[bindable] private var baselineScenarioID:int = 10001;
			
			[bindable] private var indicatorsList:ArrayCollection;
			[bindable] private var deviceList:ArrayCollection;
			[bindable] public var selDevice:int = 1; 
			
			[bindable] private var batTypesActiveFlag:Boolean = false;
			[bindable] private var pwrTypesActiveFlag:Boolean = false;
			[bindable] private var chemTypesActiveFlag:Boolean = false;
			[bindable] private var devicesActiveFlag:Boolean = false;			
			
			private var ccii:int = 0;
			
			protected function startApp(event:FlexEvent):void {
				trace("app start panelTab E");			
				hlp = new helper();			
				this.addEventListener("updateCharts", updateCharts);	
				this.addEventListener("demandAggChanged", updateChemistrySplit);				
				this.addEventListener("refreshData", refreshData);
			}
			
			public function initNames():void {
				trace("init names inside panel E");			
				
				this.deviceNamesList.token = this.dataServiceNames.getDeviceNames();				
				//this.regionListNames.token = this.dataServiceNames.getCountryList(1);								
				this.getAllIndiNames.token = this.dataServiceNames.getIndicatorNames();
			}
			
			public function setWorkingScenario(nv:int, flag:Boolean):void {
				this.workingScenarioID = nv;
				//this.testGrid.setWorkingScenario(this.workingScenarioID, flag);				
			}					
			
			// ----- COMMUNICATION PART ---------------/////
			[bindable]	private var dataList:ArrayCollection;
			[bindable]	private var dataListReg:ArrayCollection;
			public function getDataList():ArrayCollection {
				return this.dataList;			
			}
			
			public function setDataList(data:ArrayCollection):void {
				this.dataList = data;
			}		
			
			public function setDataListReg(data:ArrayCollection):void {
				this.dataListReg = data;
			}	
			
			public function setUseCluster(flag:Boolean):void {
				this.useCluster = flag;
			}
			
			private var tmpDevices:int  = 0;
			private var tmpPwrTypes:int = 0;
			private var tmpBatTypes:int = 0;
			
			protected function getSomeData_clickHandler(event:MouseEvent):void
			{	
				this.refreshData(null);
				this.exoIndi_clickHandler(null);			
			}			
			
			[bindable] public var useCluster:Boolean = false;
			public function refreshData(evt:Event):void {
				if ((!this.dataList)||(this.dataList.length < 1)) {					
					Alert.show("Please select at least one country", "Selection error");
				} else {						
					if (this.dataList.length > 10 ) {
						//Alert.show("Maximum number of selected counties should less of equal to 10", "Info");
						this.dataList.source.splice(10, this.dataList.source.length - 10);
					};				
					var countryIDs:Array = this.dataList.source;				
					var tmp:String = this.hlp.formStringFromIDs2(countryIDs);				
					
					var regionIDs:Array = this.dataListReg.source;
					var tmp2:String = this.hlp.formStringFromIDs2(regionIDs);					
					
					this.flowManager.devicesActiveFlag  ? this.tmpDevices  = this.flowManager.getSelectedDeviceID()  : this.tmpDevices = -1;
					this.flowManager.pwrTypesActiveFlag ? this.tmpPwrTypes = this.flowManager.selPwrType : this.tmpPwrTypes = -1;					
					this.flowManager.batTypesActiveFlag ? this.tmpBatTypes = this.flowManager.selBatType : this.tmpBatTypes = -1;				
									
					this.cursorManager.removeAllCursors();
					this.cursorManager.setBusyCursor();
					
					if ((this.flowManager.chemTypesActiveFlag)&&(tmp2.length > 0)) {					
						getDemandByChemistry.token = this.dataServiceData.getDemandByChemistry(tmp2, workingScenarioID, 1 +  int(useCluster), showPerHHFlag);
					} else if ((this.flowManager.chemTypesActiveFlag)&&(tmp.length > 0)) {					
						getDemandByChemistry.token = this.dataServiceData.getDemandByChemistry(tmp, workingScenarioID, 0, showPerHHFlag);					
					} else if (tmp2.length > 0) {					
						this.getDemandRegions.token = this.dataServiceData.getDemandData(tmp2, this.workingScenarioID, 
							this.tmpBatTypes, this.tmpPwrTypes, 1 + int(useCluster), this.flowManager.getSelDeviceAggLevel(), showPerHHFlag);					
					} else if (tmp.length > 0) {					
						this.getDemandData.token = this.dataServiceData.getDemandData(tmp, this.workingScenarioID, 
							this.tmpBatTypes, this.tmpPwrTypes, 0,  this.flowManager.getSelDeviceAggLevel(), showPerHHFlag);					
					};
				};
			}			
			
			[bindable] private var regList:ArrayCollection = new ArrayCollection();
			
			protected function getDemandRegions_resultHandler(event:ResultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				currentData = this.getDemandRegions.lastResult as ArrayCollection;				
				this.currentDataChart.source = this.currentData.source;
				//this.currentDataGrid.source = this.currentData.source;				
				this.dispatchEvent(new Event("updateCharts", false));
			}

			protected function pwrTypesActive_clickHandler(event:MouseEvent):void
			{
				this.pwrTypesActiveFlag = !this.pwrTypesActiveFlag;
				this.pwrTypes.enabled = this.pwrTypesActiveFlag;

				this.dispatchEvent(new Event("demandAggChanged", true));
			}

			protected function batTypesActive_clickHandler(event:MouseEvent):void
			{
				this.batTypesActiveFlag = !this.batTypesActiveFlag;
				this.batTypes.enabled = this.batTypesActiveFlag;
				
				this.dispatchEvent(new Event("demandAggChanged", true));		
			}

			protected function chemTypesActive_clickHandler(event:MouseEvent):void
			{
				this.chemTypesActiveFlag = (int(this.splitByChemistry.selectedValue) > 0);
				this.chemTypes.enabled = this.chemTypesActiveFlag;
				
				//if (this.chemTypesActiveFlag) {					
					this.pwrTypesActiveFlag = (!this.chemTypesActiveFlag) && (selBatType > 0);					
					this.pwrTypes.enabled = !this.chemTypesActiveFlag;
										
					this.batTypesActiveFlag = (!this.chemTypesActiveFlag) && (selPwrType > 0);
					this.batTypes.enabled = !this.chemTypesActiveFlag;
										
					this.devicesActiveFlag = (!this.chemTypesActiveFlag) && (this.selDeviceAggLevel > 0);
					//this.deviceListDrop.enabled = !this.chemTypesActiveFlag;					
					
					//this.radioDevCat.enabled = !this.chemTypesActiveFlag;
					//this.radioDevSingle.enabled = !this.chemTypesActiveFlag;
					//this.radioDevAll.enabled = !this.chemTypesActiveFlag;
				//};
				
				this.dispatchEvent(new Event("refreshData", false));
			}

			[bindable] private var selDeviceAggLevel:int = 0;
			protected function devicesActive_clickHandler(event:MouseEvent):void
			{				
				this.selDeviceAggLevel = int(this.splitByDevices.selectedValue);			
				this.devicesActiveFlag = (this.selDeviceAggLevel > 0);				
				//this.deviceListDrop.enabled = this.devicesActiveFlag;				
				this.deviceNamesFullList.refresh();				
				exoIndi_clickHandler(null); // refresh data for exogenous chart
				this.dispatchEvent(new Event("demandAggChanged", true));				
			}
			
			private var showAtDeviceLevel:int = 0;
			private function filterDeviceList(item:Object):Boolean {
				var f:Boolean = false;
				if  ( (flowManager.getSelDeviceAggLevel() == 1)&&(item.categoryID > 0) )
					f = true;
				else 
				if  ( (flowManager.getSelDeviceAggLevel() == 2)&&(!item.categoryID)  )
					f = true;
				return f;
			}		
			
			protected function filterChart(item:Object):Boolean {				
				var f:Boolean = false;
				var z:int;
				var flagForView:Boolean;				
				
				if (this.flowManager.isViewingMode()) { // since we dont have states in here
					flagForView = (item.scenarioID == this.baselineScenarioID);
				} else {
					flagForView = true;
				};												
				if (!this.flowManager.chemTypesActiveFlag) {					
					//z = ( (this.flowManager.selDeviceAggLevel == 1) ? item.deviceID : item.categoryID );
					z = item.deviceID;
				};
// ******				
				if (this.flowManager.chemTypesActiveFlag) {
					f = (item.chemistryID == this.flowManager.selChemType);					
				} else 
				if (this.flowManager.getSelDeviceAggLevel() > 0) {					
					f = (z == this.flowManager.getSelectedDeviceID());   															
				} else {
					f = (z == 0) ; 
				};			
				f = f && flagForView;
				
				return f;
			}					

			protected function getDemandByChemistryResult_resultHandler(event:ResultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				currentData = this.getDemandByChemistry.lastResult as ArrayCollection;				
				this.currentDataChart.source = this.currentData.source;
				//this.currentDataGrid.source = this.currentData.source;				
				this.dispatchEvent(new Event("updateCharts", false));		
			}

			protected function chemTypes_clickHandler(event:MouseEvent):void
			{
				this.selChemType = int(this.chemTypes.selectedValue);
				this.dispatchEvent(new Event("updateCharts", false));
				
				//need to get data for chemistry?
				
				this.chemTypesActiveFlag = (this.selChemType > 0);
				//need to disable pwrSplit and sizeSplit accordingly
				//this.chemTypes.enabled = this.chemTypesActiveFlag;
			}


			protected function getDemandData_faultHandler(event:FaultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				Alert.show("Could not get Demand data for cntry level", "Error E61");				
			}
			
			

			protected function getDemandRegions_faultHandler(event:FaultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				Alert.show("Could not get Demand data for regions", "Error E62");
			}

			protected function getDeviceBase_resultHandler(event:ResultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				currentDataExo = this.getDeviceBase.lastResult as ArrayCollection;				
				this.currentDataExoChart.source = this.currentDataExo.source;								
				
				this.dispatchEvent(new Event("updateCharts", false));				
			}

			protected function getDeviceBase_faultHandler(event:FaultEvent):void
			{
				this.cursorManager.removeBusyCursor();				
			}

			[bindable] protected var strtID:int = 0;
			protected function getAllIndiNames_resultHandler(event:ResultEvent):void
			{
				strtID = strtID + 1;
				if (strtID < 2) {
					this.indicatorsList = this.getAllIndiNames.lastResult;
					this.indicatorsList.filterFunction = filterB;
					this.indicatorsList.refresh();
					this.exoListDrop.dataProvider = this.indicatorsList;
				};
			}

			protected function getAllIndiNames_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
			}

			[bindable] public var showPerHHFlag:int = 0; // means false
			protected function radiobutton3_changeHandler(event:Event):void
			{
				this.showPerHHFlag = int(this.granGroup.selectedValue);
				this.flowManager.setPerHHFlag(this.showPerHHFlag);
				// call refresh data event here;
				this.dispatchEvent(new Event("refreshData", false));
				// for demand
				exoIndi_clickHandler(null);
				// for exo chart part
			}

			//public var address:String = "192.168.44.200";
			protected function exportToExcel(event:MouseEvent):void
			{
				/*var request:URLRequest = new URLRequest();
				request.url = "http://" 
					+  address      + "/Consulting/Duracell/version2/calcs2/exportDataToExcel_DC.php?"					 
					+ "scenarioID=" + this.workingScenarioID
					+ "&tmp="       + String(Math.round(Math.random()*1000));
				navigateToURL(request, "_blank");*/
			}


			protected function getDemandByChemistry_faultHandler(event:FaultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				Alert.show("Could not read data by Chemistry Split", "Error E63");
			}

		]]>
	</fx:Script>
	
	<fx:Script>
		<![CDATA[	
			[bindable] private var selectedIndi:int = 301;
			[bindable] private var currentData:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataChart:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataGrid:ArrayCollection = new ArrayCollection();
			
			[bindable] private var currentDataExo:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataExoChart:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataExoGrid:ArrayCollection = new ArrayCollection();
			
			[bindable] private var aggType:int = 0;				
			
			protected function getDemandData_resultHandler(event:ResultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				currentData = this.getDemandData.lastResult as ArrayCollection;				
				this.currentDataChart.source = this.currentData.source;								
				
				this.dispatchEvent(new Event("updateCharts", false));			
				//Alert.show("got demand data", "info" );
			}
			
			protected function radiobutton1_clickHandler(event:MouseEvent):void
			{							
				this.selectedIndi = int(this.demandTypes.selectedValue);
				if (this.selectedIndi== 301) { // has split
					aggType = 0;					
				} else { // has not, is aggregated
					aggType = 1;
				};			
				activateSplits(aggType == 0);
			}
			
			private function activateSplits(on:Boolean):void {
				this.batTypes.enabled = on && this.batTypesActiveFlag;
				this.pwrTypes.enabled = on && this.pwrTypesActiveFlag;
				//this.deviceListDrop.enabled = on && this.devicesActiveFlag;
				
				/*this.batTypesActive.enabled = on;
				this.pwrTypesActive.enabled = on;
				this.devicesActive.enabled = on;*/
			}
			
			public function dropdownlist1_changeHandler(event:IndexChangeEvent):void
			{
				//this.selDevice = deviceListDrop.selectedItem.id;
				this.selDevice = this.flowManager.getSelectedDeviceID();
				
				this.currentDataChart.filterFunction = this.filterChart;							
				this.currentDataChart.refresh();								
				this.demandChart.setData(currentDataChart, isLevel);						
				this.currentDataExoChart.filterFunction = this.filterChartExo;
				this.currentDataExoChart.refresh();					
				this.exoChart.setData(this.currentDataExoChart, isLevel);			
				
				updateChartTitles();			
			}
			
			private var deviceNamesFullList:ArrayCollection;
			protected function deviceNamesList_resultHandler(event:ResultEvent):void
			{
				deviceNamesFullList = this.deviceNamesList.lastResult as ArrayCollection;
				this.deviceNamesFullList.filterFunction = this.filterDeviceList;
				this.deviceNamesFullList.refresh();
				//this.deviceListDrop.dataProvider = this.deviceNamesFullList;
			}
			
			[bindable] private var selBatType:int = 0;
			[bindable] private var selPwrType:int = 0;
			[bindable] private var selChemType:int = 1;
			
			protected function batTypes_clickHandler(event:MouseEvent):void
			{
				this.selBatType = int(this.batTypes.selectedValue);				
				this.batTypesActiveFlag = (this.selBatType > 0);				
				if (this.selBatType == 0) {	this.dispatchEvent(new Event("demandAggChanged", true)); };				
				this.dispatchEvent(new Event("refreshData", false));
				
				exoIndi_clickHandler(null);
			}
			
			protected function pwrTypes_clickHandler(event:MouseEvent):void
			{
				this.selPwrType = int(this.pwrTypes.selectedValue);				
				this.pwrTypesActiveFlag = (this.selPwrType > 0);		
				if (this.selPwrType == 0) { 
					this.dispatchEvent(new Event("demandAggChanged", true)); 
				};				
				this.dispatchEvent(new Event("refreshData", false));			
				
				exoIndi_clickHandler(null);
			}			
			
			// protected function getIndicatorNames_resultHandler(event:ResultEvent):void		{
				/*strtID = strtID + 1;
				if (strtID < 2) {
					this.indicatorsList = this.getIndicatorNames.lastResult;
					this.indicatorsList.filterFunction = filterB;
					this.indicatorsList.refresh();
					this.exoListDrop.dataProvider = this.indicatorsList;
				};*/
			//}
			
			private function filterB(item:Object):Boolean {			
				// here should be all indis within ID range
				var fl:Boolean = true;				
				fl = ( (item.isOutputIndicator == 0) && (item.isVisible == 1) ); 				
				return fl;
			}					
			
			[bindable] public var selExoIndi:int = 101;
			protected function exoListDrop_changeHandler(event:IndexChangeEvent):void
			{
				if (this.exoListDrop.selectedIndex < 0) this.exoListDrop.selectedIndex = 0;
				this.selExoIndi = this.exoListDrop.selectedItem.id;
				
				
				exoIndi_clickHandler(null);
				
				/*this.exoChart.updateChartTitle(
					(this.exoListDrop.selectedItem ? this.exoListDrop.selectedItem.namen : "-"),
					(deviceListDrop.selectedIndex ? deviceListDrop.selectedIndex : 0), 
					(deviceListDrop.selectedIndex >= 0), 
					this.isLevel, 
					(deviceListDrop.selectedItem ? deviceListDrop.selectedItem.namen : ""),
					false);*/		
			}
			
			public function exoIndi_clickHandler(event:MouseEvent):void		{		
				if ((!this.dataList)||(this.dataList.length < 1)) {					
					//Alert.show("Please Select at least one country", "Selection Error");
				} else { 						
					if (this.dataList.length > 10 ) {
						//Alert.show("Maximum number of selected counties should less of equal to 10", "Info");
						this.dataList.source.splice(10, this.dataList.source.length - 10);
					};		
					var countryIDs:Array = this.dataList.source;		
					var tmp:String = this.hlp.formStringFromIDs2(countryIDs);				
					var typeID:int = 0;
					var tmpDev:int = 0;
					var tmpSplit:int = 0;				
				
					var regionIDs:Array = this.dataListReg.source;
					var tmp2:String = this.hlp.formStringFromIDs2(regionIDs);					
					
					if (this.exoListDrop.selectedIndex < 0) this.exoListDrop.selectedIndex = 0;
					
					if ( (this.selExoIndi == 204)||(this.selExoIndi == 206) ) 
						typeID = this.flowManager.selBatType;
					else 
					if ( (this.selExoIndi == 205)||(this.selExoIndi == 207) ) 
						typeID = this.flowManager.selPwrType;				
					if ( (this.selExoIndi >= 204) && (this.selExoIndi < 206) ) 
							tmpSplit = 1; 
					else tmpSplit = aggType; //this.flowManager.selDeviceAggLevel;// aggType;
					
					if (( this.selExoIndi > 100 ) && (this.selExoIndi < 200)) { 
						tmpDev = 0; 
						tmpSplit = 0; 
					} else 
						tmpDev = this.flowManager.getSelectedDeviceID();				
					
					if ((this.selExoIndi == 401)&&(tmp2.length > 0)) {				
							getDeviceBase.token = this.dataServiceData.getDeviceBase(tmp2, workingScenarioID,
								flowManager.selPwrType,  1 + int(useCluster), flowManager.getSelDeviceAggLevel(), showPerHHFlag);							
					} else if (this.selExoIndi == 401) {
						getDeviceBase.token = this.dataServiceData.getDeviceBase(tmp, workingScenarioID,
							flowManager.selPwrType,  0, flowManager.getSelDeviceAggLevel(), showPerHHFlag);					
					} else { //if (this.flowManager.selDeviceAggLevel > 1 ) { // category level
							getMacroDataCategory.token = dataServiceData.getMacroDataCategory(tmp, selExoIndi,
								workingScenarioID, tmpSplit, typeID, 1);
/*						} else {						
							getMacroData.token = this.dataServiceData.getMacroData(tmp, selExoIndi, workingScenarioID, 
								tmpSplit, typeID, 1);*/
						};					
				};
			}
			
			/*protected function getMacroDataResult_resultHandler(event:ResultEvent):void
			{
				/*this.cursorManager.removeBusyCursor();
				currentDataExo = this.getMacroData.lastResult as ArrayCollection;				
				this.currentDataExoChart.source = this.currentDataExo.source;								
				/*this.currentDataExoChart.filterFunction = this.filterGridExo;
				this.currentDataExoChart.refresh();*/
				
				//this.dispatchEvent(new Event("updateCharts", false));	
				//Alert.show("got exo macro data", "info");			
			//}			
			
			/*private function filterGridExo(item:Object):Boolean {				
				var f:Boolean = true;				
				if (((item.scenarioID == this.workingScenarioID)
					&& (item.deviceID == this.selDevice))||(this.selExoIndi < 200)) {					
					f = true
				}  else f = false;				
				return f;
			}	*/
			
			private function filterChartExo(item:Object):Boolean {				
				var f:Boolean = false;		
				var flagForView:Boolean;
				if (this.flowManager.isViewingMode()) { // since we dont have states in here
					flagForView = (item.scenarioID == this.baselineScenarioID);
				} else {
					flagForView = true;
				};	
				
				if (this.flowManager.getSelDeviceAggLevel() == 0) {
					var ff:Boolean = (item.deviceID == 200)||(item.deviceID == 0); 
					f = ff && ( (selExoIndi < 200) || (selExoIndi == 401) || (selExoIndi == 202) );
				} else 
				if (this.flowManager.getSelDeviceAggLevel() == 1) {									
					f = ( (item.deviceID == this.selDevice) || (this.selExoIndi < 200) );
				} else {					
					f = ( (item.deviceID == this.selDevice) || (this.selExoIndi < 200) );
				};	
				f = f && flagForView;
				
				return f;
			}
			
			protected function getMacroData_faultHandler(event:FaultEvent):void
			{	
				this.cursorManager.removeBusyCursor();
				Alert.show("Error in macroData SQL query", "Error E61");			
			}	
			
			public function enableGrid(flag:Boolean, isLocal:Boolean) : void {
				//this.testGrid.isEditable = flag;			
			}
			
			[bindable] private var isLevel:Boolean = true;
			protected function radiobutton2_changeHandler(event:Event):void
			{
				this.isLevel = !this.isLevel;
				this.dispatchEvent(new Event("updateCharts", false));
			}
			
			// this is used for drawing update only
			public function updateCharts(evt:Event):void {	
				this.selDevice = this.flowManager.getSelectedDeviceID();
				
				this.demandChart.setVwmode(this.flowManager.isViewingMode());
				this.exoChart.setVwmode(this.flowManager.isViewingMode());
				
				this.currentDataChart.filterFunction = this.filterChart;				
				this.currentDataChart.refresh();
				this.demandChart.setData(currentDataChart, isLevel); 
				// transformation is performed inside chart component								
				
				this.currentDataExoChart.filterFunction = this.filterChartExo;
				this.currentDataExoChart.refresh();				
				this.exoChart.setData(currentDataExoChart, isLevel);				
				
				updateChartTitles();			
			}
			
			[bindable] public var flagDev:Boolean = false;
			[bindable] public var batTypesNames:Array = ["C", "D", "AAA", "9V", "AA", "Coin And Button"];
			[bindable] public var pwrTypesNames:Array = ["Disposable (DPP)", "Round Cell Rechargeable (RCR)", "Built-in Rechargeable"];
			[bindable] public var chemTypesNames:Array = ["Alkaline", "Lithium", "RCR Major Cells","Zinc"];
			
			public function updateChartTitles():void {	
				var lbl : String = " ";
				var enFlag:Boolean = true;
				
				if (this.flowManager.batTypesActiveFlag)  lbl = ", " + batTypesNames[this.flowManager.selBatType - 1] + ",";			
				if (this.flowManager.pwrTypesActiveFlag)  lbl = ", " + pwrTypesNames[this.flowManager.selPwrType - 1] + ",";
				if (this.flowManager.chemTypesActiveFlag) lbl = ", " + chemTypesNames[this.flowManager.selChemType-201] + ",";				
				
				this.demandChart.updateChartTitle( ("Battery demand" + lbl + " from"), 
					this.flowManager.getSelDeviceAggLevel(), 
					this.flowManager.devicesActiveFlag,	
					this.isLevel, 
					this.flowManager.selDeviceNamen,
					(this.showPerHHFlag == 1),
					"Number of units (000’s)"
				);		
				
				var fl:Boolean = false;
				if (this.exoListDrop.selectedItem) {
					if (this.exoListDrop.selectedItem.id != 401) 
						fl = false;
					else 
						fl = (this.showPerHHFlag == 1); 
				};			
						
				if ( this.selExoIndi < 200 ) { 
						 flagDev = false; 
				} else { 
						flagDev = this.flowManager.devicesActiveFlag; 
				};				
				
				this.exoChart.updateChartTitle(
					(exoListDrop.selectedItem ? exoListDrop.selectedItem.namen :
						exoListDrop.dataProvider.getItemAt(0).namen),
					this.flowManager.getSelDeviceAggLevel(), 
					flagDev,
					isLevel, 
					this.flowManager.selDeviceNamen,
					fl, 
					(exoListDrop.selectedItem  ? exoListDrop.selectedItem.unit : ""));
			}
			
			protected function updateChemistrySplit(evt:Event):void {
				var z:Boolean = (!batTypesActiveFlag && !pwrTypesActiveFlag && !devicesActiveFlag);
				
				if (!z) {
					//this.chemistryActive.selected = z;
					this.chemTypesActiveFlag = z;
					this.chemTypes.enabled = this.chemTypesActiveFlag;
				};
				
				this.dispatchEvent(new Event("refreshData", false));
			}
			
			protected function setActiveIndis(k:int):void {
				//this.indicatorsBox.selectedIndex = k;
			}

			public function setIndicatorsList(arr:ArrayCollection):void {
				/*var rr:ArrayCollection = this.flMngr.getRecordedSelectedIndicators();
				if (rr) this.setActiveIndis(0, rr.getItemAt(0).id);*/
			}		
			
			[bindable] private var flowManager:FlowManager;
			public function setMasterTab(flowMngr:FlowManager):void {
				this.flowManager = flowMngr;
				this.demandChart.setVwmode(this.flowManager.isViewingMode());
				this.exoChart.setVwmode(this.flowManager.isViewingMode());
			}			
			
			protected function getMacroDataCategory_resultHandler(event:ResultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				currentDataExo = this.getMacroDataCategory.lastResult as ArrayCollection;				
				this.currentDataExoChart.source = this.currentDataExo.source;				
				
				this.dispatchEvent(new Event("updateCharts", false));
			}
			
			protected function getMacroDataCategory_faultHandler(event:FaultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				Alert.show("Could not read data", "error B3");
			}

		]]>
	</fx:Script>
	
	<utils:CTwoAxisChart width="747" height="250" id="demandChart" left="10" top="46">
	</utils:CTwoAxisChart>

	<s:Button label="Update Chart" id="getSomeData" click="getSomeData_clickHandler(event)" width="316" height="25" fontWeight="bold" enabled="true" left="439" top="13"/>

<s:BorderContainer id="pagrindinis" width="100%" left="0" top="0" borderVisible="false" height="10">	

	<!--
	<s:Label text="Devices Aggeragtion Level" id="selDeviceLabel" fontSize="11" fontStyle="italic" top="21" left="11" fontFamily="Arial"/>
	<s:BorderContainer backgroundAlpha="0.0" borderVisible="false" 
					   top="34"  height="20" left="20" width="419">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
	
		<s:RadioButton x="201" y="92"  value="0" label="All devices (aggregate)" groupName="splitByDevices" 
					   selected="true" click="devicesActive_clickHandler(event)" fontFamily="Arial" fontSize="11" id="radioDevAll"/>
		<s:RadioButton x="201" y="118" value="2" label="Device category" groupName="splitByDevices" 
					   selected="false" click="devicesActive_clickHandler(event)" fontFamily="Arial" fontSize="11" id="radioDevCat"/>
		<s:RadioButton value="1" label="Single device" groupName="splitByDevices" 
					   selected="false" click="devicesActive_clickHandler(event)" fontFamily="Arial" fontSize="11" id="radioDevSingle"/>
	</s:BorderContainer>

	!-->
	
</s:BorderContainer>	
	
	<s:Label text="Show Data in:" id="selDeviceLabel2" fontStyle="italic" fontSize="11" left="10" fontFamily="Arial" top="6"/>
	<s:Label text="Show Data in:" id="granulation" fontStyle="italic" fontSize="11" left="209" fontFamily="Arial" top="6"/>
<!--	<s:Label text="Battery Types" id="selDeviceLabel3" fontStyle="italic" fontSize="11" left="13" fontFamily="Arial" top="57"/>
!-->
	<!--	<s:BorderContainer fontSize="11" fontFamily="Verdana" top="70" borderVisible="false" backgroundAlpha="0.0" id="pwrTypesBorder" left="20">
		<s:layout>
			<s:VerticalLayout gap="1"/>
		</s:layout>
		<s:RadioButton x="44" y="50" label="All battery types" value="0" groupName="pwrTypes" selected="true"
					   click="pwrTypes_clickHandler(event)" fontSize="11" fontFamily="Arial" enabled="true"/>	
		<s:RadioButton x="44" y="75" label="Disposable (DPP)" value="1" groupName="pwrTypes" selected="false"
					   click="pwrTypes_clickHandler(event)" fontSize="11" fontFamily="Arial" enabled="true"/>
		<s:RadioButton x="44" y="93" label="Round Cell Rechargeable (RCR)" value="2" groupName="pwrTypes"
					   click="pwrTypes_clickHandler(event)" fontSize="11" fontFamily="Arial" selected="false" enabled="true"/>
		
		<s:RadioButton x="44" y="105" label="Built-in Rechargeable" value="3" groupName="pwrTypes"
					   click="pwrTypes_clickHandler(event)" fontSize="11" fontFamily="Arial" selected="false" enabled="false"/>
	</s:BorderContainer> !-->

	
	
	<!-- <s:DropDownList width="289" id="deviceListDrop"
					change="dropdownlist1_changeHandler(event)"
					labelField="namen" selectedIndex="1" height="20" top="29" left="472" 
					enabled="false" fontFamily="Arial" fontSize="12" 
					contentBackgroundAlpha="0.9" borderVisible="false"/>
	!-->
<!--	<s:BorderContainer x="253" height="70" fontSize="11" fontFamily="Verdana" top="70" borderVisible="false" backgroundAlpha="0.0" id="sizeBorder" width="210">
		<s:layout>
			<s:TileLayout horizontalGap="5" verticalGap="1"/>
		</s:layout>
		
		<s:RadioButton x="269" y="75" label="All battery sizes"  value="0" groupName="batTypes" click="batTypes_clickHandler(event)" selected="true" fontFamily="Arial" fontSize="11" enabled="true"/>
		<s:RadioButton x="269" y="75" label="AAA"  value="3" groupName="batTypes" click="batTypes_clickHandler(event)" selected="false" fontFamily="Arial" fontSize="11" enabled="true"/>
		<s:RadioButton x="318" y="75" label="AA" value="5" groupName="batTypes" click="batTypes_clickHandler(event)" fontFamily="Arial" fontSize="11" enabled="true" selected="false"/>
		<s:RadioButton x="359" y="75" label="C"  value="1" groupName="batTypes" selected="false" click="batTypes_clickHandler(event)" fontFamily="Arial" fontSize="11" enabled="true"/>
		<s:RadioButton x="391" y="75" label="D"  value="2" groupName="batTypes" click="batTypes_clickHandler(event)" fontFamily="Arial" fontSize="11" enabled="true" selected="false"/>
		<s:RadioButton x="423" y="75" label="9V"  value="4" groupName="batTypes" click="batTypes_clickHandler(event)" fontFamily="Arial" fontSize="11" enabled="true" selected="false"/>
		<s:RadioButton x="430" y="75" label="Hearing Aid"  value="5" groupName="batTypes" click="batTypes_clickHandler(event)" fontFamily="Arial" fontSize="11" enabled="false" selected="false"/>
		<s:RadioButton x="440" y="75" label="Coin And Button"  value="6" groupName="batTypes" click="batTypes_clickHandler(event)" fontFamily="Arial" fontSize="11" enabled="false" selected="false"/>		
		
	</s:BorderContainer>
	!-->
<!--	<s:BorderContainer width="192" x="32" fontSize="11" fontFamily="Verdana" top="70" borderVisible="false" backgroundAlpha="0.0" id="pwrTypesBorder" height="67">
		<s:layout>
			<s:VerticalLayout gap="1"/>
		</s:layout>
		<s:RadioButton x="44" y="50" label="All battery types" value="0" groupName="pwrTypes" selected="true"
					   click="pwrTypes_clickHandler(event)" fontSize="11" fontFamily="Arial" enabled="true"/>	
		<s:RadioButton x="44" y="75" label="Disposable (DPP)" value="1" groupName="pwrTypes" selected="false"
					   click="pwrTypes_clickHandler(event)" fontSize="11" fontFamily="Arial" enabled="true"/>
		<s:RadioButton x="44" y="93" label="Round Cell Rechargeable (RCR)" value="2" groupName="pwrTypes"
					   click="pwrTypes_clickHandler(event)" fontSize="11" fontFamily="Arial" selected="false" enabled="true"/>

		<s:RadioButton x="44" y="105" label="Built-in Rechargeable" value="3" groupName="pwrTypes"
					   click="pwrTypes_clickHandler(event)" fontSize="11" fontFamily="Arial" selected="false" enabled="false"/>
	</s:BorderContainer>
	!-->
	<s:Label text="model inputs variable" fontStyle="italic" fontSize="11" top="303" fontFamily="Arial" left="10"/>
	
	<s:DropDownList width="336" id="exoListDrop" labelField="namen" 
					change="exoListDrop_changeHandler(event)" 
					selectedIndex="0" height="20" top="314" enabled="true" 
					fontFamily="Arial" fontSize="11" contentBackgroundAlpha="0.9"
					borderVisible="false" left="50"/>
	
	<s:Button x="472" y="432" label="Update Chart" width="285" 
			  click="exoIndi_clickHandler(event)" id="button" enabled="true" visible="false"/>
	

	<s:RadioButton label="Absolutes" groupName="growthType" enabled="true" 
				   selected="true" height="19" change="radiobutton2_changeHandler(event)" fontFamily="Arial" fontSize="11" top="17" left="33"/>
	<s:RadioButton label="Growth Rates" groupName="growthType" 
				   enabled="true" height="19" change="radiobutton2_changeHandler(event)" fontFamily="Arial" fontSize="11" top="17" left="112"/>

	<!--
	<s:BorderContainer width="236" x="603" fontFamily="Verdana" fontSize="11" top="91" borderVisible="false" backgroundAlpha="0.0" height="69">
		<s:layout>
			<s:TileLayout horizontalGap="0" verticalGap="4"/>
		</s:layout>
			<s:RadioButton label="Alkaline" groupName="chemTypes" value="1" selected="true" 
					   click="chemTypes_clickHandler(event)" fontFamily="Arial" fontSize="11"/>
			<s:RadioButton label="Lithium" groupName="chemTypes" value="3" click="chemTypes_clickHandler(event)" fontFamily="Arial" fontSize="11"/>
			<s:RadioButton x="629" y="106" label="Zinc" groupName="chemTypes" value="2" click="chemTypes_clickHandler(event)" fontFamily="Arial" fontSize="11"/>
			<s:RadioButton x="629" y="106" label="Hearing Aid " groupName="chemTypes" value="2" click="chemTypes_clickHandler(event)" fontFamily="Arial" fontSize="11" enabled="false"/>
			<s:RadioButton x="629" y="106" label="Coin and Button" groupName="chemTypes" value="2" click="chemTypes_clickHandler(event)" fontFamily="Arial" fontSize="11" enabled="false"/>		
		
	</s:BorderContainer>

	!-->
	
	<!--
	<s:Label text="Step 6: Select battery parameters." verticalAlign="middle" fontStyle="italic" fontSize="13" top="2" left="10" fontFamily="Arial" color="#50B848"/>
	
	
	<s:Label text="Battery type/size" id="selDeviceLabel1" fontStyle="italic" fontSize="11" 
			 verticalAlign="middle" fontFamily="Arial" x="220" top="57"/>
	!-->
 <!--
	<s:BorderContainer fontSize="11" fontFamily="Verdana" top="70" borderVisible="false" backgroundAlpha="0.0" id="sizeBorder" width="210" height="80" left="230">
		<s:layout>
			<s:TileLayout horizontalGap="5" verticalGap="1"/>
		</s:layout>
		
		<s:RadioButton x="269" y="75" label="All battery sizes"  value="0" groupName="batTypes" 
					   click="batTypes_clickHandler(event)" selected="true" fontFamily="Arial" fontSize="11" enabled="true"/>
		<s:RadioButton x="269" y="75" label="AAA"  value="3" groupName="batTypes" click="batTypes_clickHandler(event)" selected="false" fontFamily="Arial" fontSize="11" enabled="true"/>
		<s:RadioButton x="318" y="75" label="AA" value="5" groupName="batTypes" click="batTypes_clickHandler(event)" fontFamily="Arial" fontSize="11" enabled="true" selected="false"/>
		<s:RadioButton x="359" y="75" label="C"  value="1" groupName="batTypes" selected="false" click="batTypes_clickHandler(event)" fontFamily="Arial" fontSize="11" enabled="true"/>
		<s:RadioButton x="391" y="75" label="D"  value="2" groupName="batTypes" click="batTypes_clickHandler(event)" fontFamily="Arial" fontSize="11" enabled="true" selected="false"/>
		<s:RadioButton x="423" y="75" label="9V"  value="4" groupName="batTypes" click="batTypes_clickHandler(event)" fontFamily="Arial" fontSize="11" enabled="true" selected="false"/>
		<s:RadioButton x="430" y="75" label="Hearing Aid"  value="5" groupName="batTypes" click="batTypes_clickHandler(event)" fontFamily="Arial" fontSize="11" enabled="false" selected="false"/>
		<s:RadioButton x="440" y="75" label="Coin And Button"  value="6" groupName="batTypes" click="batTypes_clickHandler(event)" fontFamily="Arial" fontSize="11" enabled="false" selected="false"/>	
		
	</s:BorderContainer>

	!-->
	
<!--	<s:RadioButton x="470" value="0" label="All chemistry" groupName="splitByChemistry" click="chemTypesActive_clickHandler(event)" enabled="true" selected="true" top="70"/>
	<s:RadioButton x="575" value="1" label="Use split by:" groupName="splitByChemistry" click="chemTypesActive_clickHandler(event)" enabled="true" top="70"/>
	<s:Label text="Chemistry" id="selDeviceLabel0" fontStyle="italic" fontSize="11" fontFamily="Arial" x="452" top="57"/>
	!-->
	<utils:CTwoAxisChart id="exoChart" top="341" left="10" width="747" height="250">
	</utils:CTwoAxisChart>
	<s:RadioButton x="239" label="Total" groupName="granGroup" value="0" top="17" 
				   selected="true" click="radiobutton3_changeHandler(event)" fontFamily="Arial" fontSize="11"/>
	<s:RadioButton x="308" label="per HH" groupName="granGroup" value="1" top="17" 
				   click="radiobutton3_changeHandler(event)" fontFamily="Arial" fontSize="11"/>
	<s:Button x="612" y="14" label="Export Scenario to Excel" 
			  width="144" height="23" enabled="true" fontWeight="normal" fontSize="10"
			  click="exportToExcel(event)" visible="false" />


</s:Group>
