<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" 
		 xmlns:utils="utils.*"
		 creationComplete="startApp(event)" 
		 xmlns:depot1="services.depot1.*" 
		 xmlns:depot21="services.depot21.*">
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>

	<s:states>
		<s:State name="default" />
		<s:State name="viewingOnly" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			private var deviceNamesFullList:ArrayCollection;
			protected function getDeviceList_resultHandler(event:ResultEvent):void
			{
				deviceNamesFullList = this.getDeviceList.lastResult as ArrayCollection;			
				this.deviceNamesFullList.filterFunction = this.flMngr.filterDeviceList;
					//this.filterDeviceList;
				this.deviceNamesFullList.refresh();
				this.deviceListDrop.dataProvider = this.deviceNamesFullList;				 
			}
			
			protected function updateData_faultHandler(event:FaultEvent):void
			{
				var z:Object = event.message.body.toString();
			}		
			
			[bindable] public var tabEditable:Boolean;
			public function enableGrid(flag:Boolean, isLocal:Boolean) : void {				
				if (!isLocal) this.tabEditable = flag;
				this.testGrid.isEditable = flag  && isLevel;
				(flag && isLevel) ? this.flagLabel.text = "Table is editable" : this.flagLabel.text = "Table is not editable";
				//this.saveBtn.enabled = (flag && isLevel);

				this.shockBtn1.enabled = (flag && isLevel); 
				this.shockBtn2.enabled = (flag && isLevel);
				
				this.shockControls.enabled = (flag && isLevel && !isSingleGeo);
				this.shLbl.enabled = (flag && isLevel && !isSingleGeo);
			}


			protected function getMacroDataResult_faultHandler(event:FaultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				Alert.show("Could not read data", "error B3");
			}
			
			[bindable] private var selDeviceAggLevel:int = 0;
			[bindable] private var devicesActiveFlag:Boolean;
			protected function devicesActive_clickHandler(event:MouseEvent):void
			{				
				selDeviceAggLevel = int(this.splitByDevices_C.selectedValue);
				this.flMngr.setSelDeviceAggLevel(selDeviceAggLevel);
				
				devicesActiveFlag = (this.selDeviceAggLevel > 0);				
				this.flMngr.setDevicesActiveFlag(this.devicesActiveFlag);				
				this.deviceNamesFullList.refresh();
				
				if (this.selDeviceAggLevel > 1) {
					deviceListDrop.selectedIndex = 0;
				} else {
					deviceListDrop.selectedIndex = 1;
				};				
				//deviceListDrop_changeHandler(null);				
				this.dispatchEvent(new Event("refreshData", false));				
			}


			protected function getMacroDataCategory_resultHandler(event:ResultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				
				currentData = this.getMacroDataCategory.lastResult as ArrayCollection;		
				if (this.currentData) {
					this.currentDataChart.source = this.currentData.source;
					this.currentDataGrid.source  = this.currentData.source;
				
					//deviceListDrop_changeHandler(null);
					this.dispatchEvent(new Event("updateCharts", false));
				};
			}

			protected function getDeviceBase_resultHandler(event:ResultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				
				currentData = this.getDeviceBase.lastResult as ArrayCollection;			
				this.currentDataChart.source = this.currentData.source;
				this.currentDataGrid.source  = this.currentData.source;
				
				//deviceListDrop_changeHandler(null);
				this.dispatchEvent(new Event("updateCharts", false));
			}
			
			protected function getMacroDataCategory_faultHandler(event:FaultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				Alert.show("Could not read data", "error B3");
			}
			
			protected function getDeviceBase_faultHandler(event:FaultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				Alert.show("Could not read data for Device Base", "error B4");
			}
			
			private var hhpenIsSplit:Boolean = false;
			private var hhpenSizeID:int = 1;
			protected function sizesSplit_clickHandler(event:MouseEvent):void
			{
				this.hhpenIsSplit = (splitByTypesM.selectedValue > 0);
				if (this.hhpenIsSplit) {
					this.splitByTypes.enabled = true;
					this.hhpenSizeID = int(this.splitByTypes.selectedValue);					
				} else { 
					this.splitByTypes.enabled = false;
				};			
				this.dispatchEvent(new Event("refreshData", false));
			}

			protected function getHHPenSplit_resultHandler(event:ResultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				currentData = this.getHHPenSplit.lastResult as ArrayCollection;				
				this.currentDataChart.source = this.currentData.source;
				this.currentDataGrid.source  = this.currentData.source;				
				
				this.dispatchEvent(new Event("updateCharts", false));
			}

			protected function getHHPenSplit_faultHandler(event:FaultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				Alert.show("Could not read HH pen split by sizes", "Data read error");
			}


			protected function sizeID_clickHandler(event:MouseEvent):void
			{
				this.hhpenSizeID = int(this.splitByTypes.selectedValue); 
				this.dispatchEvent(new Event("updateCharts", false));
			}

		]]>
	</fx:Script>


	<fx:Script>
		<![CDATA[
			import controls.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.Depot1;
			import services.depot31.Depot31;
			
			import spark.events.IndexChangeEvent;
			
			import utils.helper;
			
			public var dataServiceNames:Depot1;
			public var dataServiceData:Depot21;
			public var dataServiceUpdate:Depot31;		
			
			[bindable] 
			private var workingScenarioID:int;
			[bindable] private var baselineScenarioID:int = 10001;
			private var hlp:helper;
			[bindable] 
			private var indicatorsList:ArrayCollection;
			[bindable] private var dataList:ArrayCollection;
			
			public static const CNTRYCHANGED:String = "CNTRY_CHANGED";
			public static const CNTRYUNCHANGED:String = "CNTRY_UNCHANGED";			
				
			[bindable] private var flMngr:FlowManager;
			public function setFlowManagerRef(z:FlowManager):void {
				flMngr = z;
				this.testChart.setVwmode(this.flMngr.isViewingMode());
			}
				
			protected function updateData_resultHandler(event:ResultEvent):void
			{
				var rez:Object = this.updateData.lastResult;
				this.dispatchEvent(new Event("refreshData", false));				
				this.dispatchEvent(new Event("NewScenarioUpdated", true));				
			}				
				
			protected function startApp(event:FlexEvent):void {
				trace("app start panelTab B");			
				hlp = new helper();		
				this.addEventListener("updateCharts", updateCharts);
				this.addEventListener("refreshData", refreshData);
				
				initShockControls();		
			}
			
			public function setDataList(data:ArrayCollection):void {
				this.dataList = data;				
			}	
			
			public function initNames():void {
				trace("init names inside panel B");				
				//indicatorsNamesList.token = this.dataServiceNames.getIndicatorNames();			
				this.getDeviceList.token = this.dataServiceNames.getDeviceNames();
			}
			
			[bindable] private var yrsList:ArrayCollection = new ArrayCollection();
			protected function initShockControls():void {
				for (var i:int = 2012; i <= 2021; i++) {
					yrsList.addItem({"yrs":i});
				};
				this.shockYears.dataProvider = yrsList;
				this.shockYears.labelField = "yrs";
				
				this.shockValue.value = 10;
			}	
			
			public function setWorkingScenario(nv:int, flag:Boolean):void {
				this.workingScenarioID = nv;
				this.testGrid.setWorkingScenario(this.workingScenarioID, flag);				
			}			
			
		 // ----- COMMUNICATION PART ---------------/////		
			
			public function setIndicatorsList(arr:ArrayCollection):void {
				this.indicatorsList = arr;
				this.indicatorsList.filterFunction = filterB;
				this.indicatorsList.refresh();
				this.indicatorsBox.dataProvider = this.indicatorsList;		
				
				this.setSelectedIndicators();
			}

			public function setSelectedIndicators():void {
				var rr:ArrayCollection = this.flMngr.getRecordedSelectedIndicators();
				if (rr) this.setActiveIndis(0, rr.getItemAt(0).id)
				else this.setActiveIndis(0);
			}
			
			public function updateSelectedDeviceID():void {
				this.selDevice = this.flMngr.getSelectedDeviceID();				
				this.deviceListDrop.selectedIndex = hlp.getIndexFromID(deviceNamesFullList.source, selDevice, 1);					
			}			
			
			private function filterB(item:Object):Boolean {
				var fl:Boolean = true;				
				fl = ( (item.id == 201)||(item.id == 202)||(item.id == 213)||
					   (item.id == 215)||(item.id == 216)||(item.id == 401) );
				// added device base				
				return fl;
			}					
			
			protected function button3_clickHandler(event:MouseEvent):void
			{
				trace("calling macro data token");
				this.refreshData(null);
			}

			public function refreshData(evt:Event):void {
				if ((!this.dataList)||(this.dataList.length < 1)) {					
					Alert.show("Please select at least one country", "Selection error");
				} else {					
					/*if (this.dataList.length >= 10 ) {
						Alert.show("Maximum number of selected counties should less of equal to 10", "Info");
						this.dataList.source.splice(10, this.dataList.source.length - 10);
					};*/	
					this.flMngr.setSelGenBatType(0); // pwr = 10 + id; size = id
					var countryIDs:Array = this.dataList.source;			
					var tmp:String = this.hlp.formStringFromIDs2(countryIDs);			 			
					
					this.cursorManager.removeAllCursors();
					this.cursorManager.setBusyCursor();					
						
					if (selectedIndi == 401) {
						getDeviceBase.token = this.dataServiceData.getDeviceBase(tmp, workingScenarioID, 0, 0, 1, 0);					
					}/* else if ((this.selectedIndi == 201)&&(this.hhpenIsSplit)) {
						getHHPenSplit.token = this.dataServiceData.getHHpenSplit(tmp, workingScenarioID);
					}*/ else {						
						getMacroDataCategory.token = dataServiceData.getMacroDataCategory(tmp, selectedIndi,
							workingScenarioID, 0, 0, 1);
					};										 
				};
			}
			
			[bindable] public var selectedIndi:int = 201;
			[bindable] private var currentData:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataGrid:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataChart:ArrayCollection = new ArrayCollection();
			
			protected function indicatorsBox_changeHandler(event:IndexChangeEvent):void {
				if (event != null) {					
					this.selectedIndi = this.indicatorsBox.selectedItem.id;
				};				
				if (this.selectedIndi == 201) { // if  HHpen is selected					
					sizeSplitDetailed.enabled = true;
				} else {					
					sizeSplitAllTypes.selected = true;
					splitByTypesM.selectedValue = 0;
					sizeSplitDetailed.enabled = false;
					splitByTypes.enabled = false;
				};
				sizesSplit_clickHandler(null);
				//this.refreshData(null);
			}			
			
			protected function getMacroDataResult_resultHandler(event:ResultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				currentData = this.getMacroDataResult.lastResult as ArrayCollection;			
				this.currentDataChart.source = this.currentData.source;
				this.currentDataGrid.source  = this.currentData.source;
				
				this.dispatchEvent(new Event("updateCharts", false));
			}

			private function filterGrid(item:Object):Boolean {				
				var f:Boolean = false;		
				if (this.flMngr.isViewingMode()) {
					f = ((item.scenarioID == 10001) && (item.deviceID == this.selDevice));
				} else {
					f = ((item.scenarioID == workingScenarioID) && (item.deviceID == this.selDevice));
				};			
				return f;
			}	

			private function filterChart(item:Object):Boolean {				
				var f:Boolean = false;				
				var cmprBarSizes:Boolean = true;
				if (this.hhpenIsSplit) {
					cmprBarSizes = (this.hhpenSizeID == item.batClass);
				} 
				
				if (this.flMngr.isViewingMode()) {
					f = ((item.scenarioID == baselineScenarioID) && (item.deviceID == this.selDevice) && cmprBarSizes);
				} else {
					f = ((item.deviceID == this.selDevice) && cmprBarSizes); 				
				};
				
				return f;
			}	

			[bindable] public var alteredData:ArrayCollection = new ArrayCollection();
			public function digestChanges(evt:Event):void {
				var yrs:int = 2012;									
				var val:Number = 0;		
				if (this.tabEditable) {			
					var temp:Object = new Object();				
					if (this.isSingleGeo) { 				
						alteredData = this.testGrid.getData();									
					} else {						
						yrs = (this.shockYears.selectedItem ? this.shockYears.selectedItem.yrs : 2012);					
						val = this.shockValue.value;					
						var rawData:ArrayCollection = this.testChart.getBaseData(this.flMngr.baselineScenarioID);
						alteredData = hlp.formShockArray(selectedIndi, this.workingScenarioID, yrs, val, rawData);		
					};					
					temp = ({'id':1, data:this.alteredData});
					if (this.alteredData.length  > 0) {
						this.updateData.token = this.dataServiceUpdate.updateData2(temp, 0, this.selDevice, 0, yrs, val);
						this.dispatchEvent(new Event("changesMadeInScenario", true));
					} else {
						this.dispatchEvent(new Event("refreshData", false));
					};
				} else {
					this.dispatchEvent(new Event("refreshData", false));
				};
			}

			[bindable] private var isSingleGeo:Boolean = true;
			protected function changeShockType_handler(event:MouseEvent):void
			{
				this.isSingleGeo = this.shockType.selectedValue;
				this.shockControls.enabled = !this.isSingleGeo;
			}
			
			protected function button4_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new Event("scenarioResetRequested", true));
			}

			[bindable] private var selDevice:int = 1;
			[bindable] private var selDeviceNamen:String = "";
			protected function deviceListDrop_changeHandler(event:IndexChangeEvent):void {			
				
				if (this.deviceListDrop.selectedIndex < 0) this.deviceListDrop.selectedIndex = 0;				
				this.selDevice = this.deviceListDrop.selectedItem.id;			
				
				this.flMngr.setSelectedDeviceID(this.selDevice);				
				this.flMngr.setSelDeviceNamen(this.deviceListDrop.selectedItem.namen);
				
				this.flMngr.setSelBatType(0);
				this.flMngr.setSelPwrType(0);
				
				this.dispatchEvent(new Event("updateCharts", false));
			}
			
			[bindable] private var isLevel:Boolean = true;
			protected function radiobutton2_changeHandler(event:Event):void
			{
				this.isLevel = !this.isLevel;
				this.dispatchEvent(new Event("updateCharts", false));
				
				var tmp:int = 1 - int(this.growthType.selection.value);
				this.enableGrid(tmp == 0 && this.tabEditable, true);
				
				if (this.currentState == "viewingOnly") tmp = 0;				 
				this.saveBtn.enabled = (tmp == 0);// && this.tabEditable);
			}
			
			protected function updateCharts(evt:Event):void {
				this.selDevice = this.flMngr.getSelectedDeviceID();
				this.selDeviceNamen = this.flMngr.selDeviceNamen;
				
				this.testChart.setVwmode(this.flMngr.isViewingMode());
				
				this.currentDataGrid.filterFunction = this.filterGrid;
				this.currentDataGrid.refresh();
				
				this.currentDataChart.filterFunction = this.filterChart;
				this.currentDataChart.refresh();
				
				this.testChart.setData(currentDataChart, isLevel); // transformation is performed inside chart component
				this.testGrid.setData(currentDataGrid, isLevel);
				
				this.testChart.updateChartTitle(
					(indicatorsBox.selectedItem ? indicatorsBox.selectedItem.namen : "HHpen"),
					(deviceListDrop.selectedIndex ? deviceListDrop.selectedIndex : 0), 
					(deviceListDrop.selectedIndex >= 0), 
					this.isLevel, 
					(this.flMngr.selDeviceNamen),
					false,
					(indicatorsBox.selectedItem  ? indicatorsBox.selectedItem.unit : ""));
			}		
			
			public function setActiveIndis(k:int, idd:int = -1):void {
				var kk:int = 0;
				var i:int = 0;				
				if (idd > 0) {				
					while (i < this.indicatorsBox.dataProvider.length) {				    						
						if (this.indicatorsBox.dataProvider.getItemAt(i).id == idd)	break;						
						i++;
					};					
				} else {
					this.indicatorsBox.selectedIndex = k;
					kk = k;
				};
				if (this.indicatorsBox.dataProvider.length > i) {				
					this.indicatorsBox.selectedIndex = i;
					kk = i;
				};
				
				this.indicatorsBox.selectedItem = this.indicatorsBox.dataProvider.getItemAt(kk);
				this.selectedIndi = this.indicatorsBox.selectedItem.id;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<depot1:Depot1 id="depot1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
					   showBusyCursor="true"/>
		<depot21:Depot21 id="depot21" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
						 showBusyCursor="true"/>		

<!-- 		<s:CallResponder id="indicatorsNamesList" result="setIndicatorsList(event)"/> !-->
		<s:CallResponder id="getMacroDataResult" result="getMacroDataResult_resultHandler(event)" fault="getMacroDataResult_faultHandler(event)"/>
		<s:CallResponder id="getMacroDataCategory" result="getMacroDataCategory_resultHandler(event)" fault="getMacroDataCategory_faultHandler(event)" />
		
		<s:CallResponder id="updateData" result="updateData_resultHandler(event)" fault="updateData_faultHandler(event)" />
		<s:CallResponder id="getDeviceList" result="getDeviceList_resultHandler(event)" />
		
		<s:CallResponder id="getDeviceBase" result="getDeviceBase_resultHandler(event)" 
						 fault="getDeviceBase_faultHandler(event)"/> 
		<s:CallResponder id="getHHPenSplit" result="getHHPenSplit_resultHandler(event)" 
						 fault="getHHPenSplit_faultHandler(event)" />
		
		<s:RadioButtonGroup id="growthType" />
		<s:RadioButtonGroup id="shockType" />
		<s:RadioButtonGroup id="splitByDevices_C" />
		<s:RadioButtonGroup id="splitByTypesM"/>
		<s:RadioButtonGroup id="splitByTypes" enabled="false"/>
	</fx:Declarations>
	
	<utils:CTwoAxisChart width="747" height="250" id="testChart" top="93" left="10" top.viewingOnly="78" left.viewingOnly="9" top.default="90" left.default="10">
	</utils:CTwoAxisChart>
	
	<utils:CInteractiveGrid width="747" height="195" id="testGrid" top="469" left="10" top.viewingOnly="405" left.viewingOnly="10" top.default="470" left.default="10">
	</utils:CInteractiveGrid>
	
	<s:DropDownList height="20" id="indicatorsBox" 
					change="indicatorsBox_changeHandler(event)" labelField="namen" top="32" 
					selectedIndex="0" width="283" top.viewingOnly="17" 
					top.default="32" left.default="50" left.viewingOnly="50"/>
	
	<s:Button label="Update Chart" click="button3_clickHandler(event)" id="button" top="61" 
			  width="241" height="25" fontWeight="bold" left="222" visible="false" top.viewingOnly="46" left.viewingOnly="221"/>
	
	<s:CheckBox x="298" label="hasSplit" visible="false" enabled="false" id="hasSplitFlag" top="33" height="20" x.viewingOnly="297" top.viewingOnly="18"/>
	<s:Button label="Update Chart" width="222" click="digestChanges(event)" id="saveBtn" fontWeight="bold" height="27" top="394" left="535" top.viewingOnly="335" left.viewingOnly="535" top.default="392" left.default="535"/>
	<s:Button width="222" click="button4_clickHandler(event)" height="23" top="424" 
			  left="535" top.viewingOnly="369" left.viewingOnly="535" top.default="425" 
			  left.default="535" label="Reset Scenario" enabled.default="true" enabled.viewingOnly="false"/>
	<s:DropDownList width="272" id="deviceListDrop" labelField="namen" 
					change="deviceListDrop_changeHandler(event)" selectedIndex="0" top="32" height="20" top.viewingOnly="17" top.default="32" left.default="482" left.viewingOnly="482"></s:DropDownList>	
	<s:Label text="Table activiy state" width="196" fontStyle="italic" fontSize="11" id="flagLabel" left="10" top="456" top.viewingOnly="391" left.viewingOnly="10" top.default="456" left.default="10"/>
	<s:BorderContainer width="517" height="59" left="10" top="389" borderVisible="false" top.viewingOnly="335" left.viewingOnly="10" backgroundAlpha.viewingOnly="0.0" top.default="389" left.default="10">
		<s:Label fontStyle="italic" fontSize="11" y="8" fontFamily="Arial"
				 id="shLbl" left.default="0" left.viewingOnly="0" 
				 text="Scenario Mechanism"/>
		<s:BorderContainer x="265" y="5" width="244" height="48" id="shockControls" 
						   enabled="false" borderVisible="false">
			<s:Label x="3" y="1" text="Year" width="106" height="20" verticalAlign="middle" fontSize="10"/>
			<s:Label x="110" y="1" text="Percentage change" width="133" height="20" verticalAlign="middle" fontSize="10"/>
			<s:DropDownList id="shockYears" width="100" left="13" top="19" height="20">					
			</s:DropDownList>
			<s:NumericStepper id="shockValue" minimum="-20" maximum="20" stepSize="1" width="97" left="137" top="19" height="20"/>
		</s:BorderContainer>
		<s:RadioButton x="66" label="Single Country (table below)" groupName="shockType" enabled="true" value="1"
					   selected="true" top="19" fontSize="11" click="changeShockType_handler(event)" id="shockBtn1"/>
		<s:RadioButton x="66" label="All countries  (right)" groupName="shockType" enabled="true" value="0"
					   top="35" fontSize="11" click="changeShockType_handler(event)" id="shockBtn2"/>
	</s:BorderContainer>
	<s:RadioButton label="Absolutes" groupName="growthType" enabled="true" value="0" 
				   selected="true" height="19" change="radiobutton2_changeHandler(event)" left="77" top="62" fontSize="11" fontFamily="Arial" top.viewingOnly="52" left.viewingOnly="77" top.default="63" left.default="77"/>
	<s:RadioButton label="Growth Rates" groupName="growthType" value="1" 
				   enabled="true" height="19" change="radiobutton2_changeHandler(event)" left="140" top="62" fontSize="11" fontFamily="Arial" top.viewingOnly="52" left.viewingOnly="157" top.default="63" left.default="157"/>
	<s:Label text="Select Indicator" fontStyle="italic" fontSize="11" top="21" height="10" left="10" fontFamily="Arial" top.viewingOnly="6" left.viewingOnly="10"/>
	<s:Label text="Data In:" fontStyle="italic" fontSize="11" left="10" top="57" fontFamily="Arial" top.viewingOnly="42" left.viewingOnly="10"/>
	<s:Label visible="false" text="Split By Sizes:" fontStyle="italic" fontSize="11" left="348" top="57" 
			 fontFamily="Arial" top.viewingOnly="42" left.viewingOnly="348"/>
	<s:Label text="Select Device" fontStyle="italic" fontSize="11" top="21" height="10" fontFamily="Arial" top.viewingOnly="6" top.default="21" left.default="469" left.viewingOnly="469"/>
	<s:Label text="Step 4: Click the dropdown below to adjust chosen indicator" verticalAlign="middle" fontStyle="normal" fontSize="13" top="2" left="10" fontFamily="Arial" color="#007E9D" includeIn="default" id="labelTop"/>
	<s:Label text="Step 5: Make changes to the data by editing right within the table below. You may also input shocks into the data by using the drop down menus. Once data has been adjusted, click “Update Chart” to view changes. To remove changes, click “Reset Scenario&quot;" verticalAlign="middle" fontStyle="normal" fontSize="13" top="347" left="10" fontFamily="Arial" color="#007E9D" width="747" includeIn="default" id="labelBot"/>
	<s:RadioButton visible="false" value="2" label="Device category" groupName="splitByDevices_C" 
				   selected="false" fontFamily="Arial" fontSize="11" left="340" top="56" 
				   top.viewingOnly="41" left.viewingOnly="340" click="devicesActive_clickHandler(event)"/>
	<s:RadioButton visible="false" value="1" label="Single device" groupName="splitByDevices_C" 
				   selected="true" fontFamily="Arial" fontSize="11" left="340" top="35" top.viewingOnly="20" left.viewingOnly="340"
				   click="devicesActive_clickHandler(event)" />
	<s:Label visible="false" text="Devices Aggeragtion Level" fontSize="11" fontStyle="italic" top="21" left="313" fontFamily="Arial" backgroundColor="#FFFFFF" 
			 backgroundAlpha="1.0" chromeColor="#FFFFFF"  top.viewingOnly="6" left.viewingOnly="313"
			 		/>
	<s:BorderContainer visible="false"
		height="20" borderVisible="false" backgroundAlpha="0.0" contentBackgroundAlpha="0.0" 
					   left="383" top="66" top.viewingOnly="52" left.viewingOnly="383" width.default="250">
		<s:layout>
			<s:HorizontalLayout gap="10"/>
		</s:layout>
		<s:RadioButton x="13" y="14" label="All types" groupName="splitByTypesM" fontSize="12" 
					   selected="true" value="0" click="sizesSplit_clickHandler(event)" id="sizeSplitAllTypes"/>
		<s:RadioButton label="Use Split By" groupName="splitByTypesM" fontSize="12"
					   selected="false" value="1"  click="sizesSplit_clickHandler(event)" id="sizeSplitDetailed"/>
		<s:RadioButton label="GP" groupName="splitByTypes" fontSize="11"  
					   x.default="13" y.default="40" value="1" selected="true" 
					   click="sizeID_clickHandler(event)"/>
		<s:RadioButton label="CB" groupName="splitByTypes" fontSize="11"  
					   x.default="13" y.default="66" value="2" click="sizeID_clickHandler(event)"/>
		<s:RadioButton label="HA" groupName="splitByTypes" fontSize="11"  
					   x.default="13" y.default="92" value="3" click="sizeID_clickHandler(event)"/>
	</s:BorderContainer>
</s:Group>
