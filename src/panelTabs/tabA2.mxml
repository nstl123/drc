<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="900" height="670" 
		 xmlns:utils="utils.*"
		 creationComplete="startApp(event)" 
		 xmlns:depot1="services.depot1.*" 
		 xmlns:depot21="services.depot21.*" 
		 xmlns:depot3="services.depot3.*">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import controls.*;
			
			import flashx.textLayout.formats.Float;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.graphics.SolidColorStroke;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.Depot1;
			import services.depot3.Depot3;
			
			import spark.events.IndexChangeEvent;
			
			import utils.helper;
			
			public var dataServiceNames:Depot1;
			public var dataServiceData:Depot21;
			public var dataServiceUpdate:Depot3;
			
			[bindable] private var workingScenarioID:int;
			private var hlp:helper;
			[bindable] private var indicatorsList:ArrayCollection;
			
			public static const CNTRYCHANGED:String = "CNTRY_CHANGED";
			public static const CNTRYUNCHANGED:String = "CNTRY_UNCHANGED"			
			
			
			protected function startApp(event:FlexEvent):void {
				trace("app start panelTab A1");			
				hlp = new helper();	
				
				this.addEventListener(CCheckBoxGrid.CHECKED, updateCountries);
				this.addEventListener(CCheckBoxGrid.UNCHECKED, updateCountriesRM);
				this.addEventListener("updateCharts", updateCharts);
				
				initShockControls();				
			}
			
			[bindable] private var yrsList:ArrayCollection = new ArrayCollection();
			protected function initShockControls():void {
				for (var i:int = 2004; i < 2021; i++) {
					yrsList.addItem({"yrs":i});
				};
				this.shockYears.dataProvider = yrsList;
				this.shockYears.labelField = "yrs";
				
				this.shockValue.value = 10;
			}
			
			protected function updateCountries(evt:Event):void	{
				trace("cought cntry selection positive");
			}
			
			protected function updateCountriesRM(evt:Event):void	{
				trace("cought cntry selection negative");
			}
			
			public function initNames():void {
				trace("init names inside panel A1");				
				indicatorsNamesList.token = this.dataServiceNames.getIndicatorNames();
				countryListNames.token = this.dataServiceNames.getCountryList(0);
			}
			
			public function setWorkingScenario(nv:int, flag:Boolean):void {
				this.workingScenarioID = nv;
				this.grid.setWorkingScenario(this.workingScenarioID, flag);				
			}					
			
			protected function countryListNames_resultHandler(event:ResultEvent):void
			{
				this.countryListGrid.dataList = this.countryListNames.lastResult as ArrayCollection;
				this.dispatchEvent(new Event("countryListLoaded", true));
			}				
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				var selCntries:Object = this.countryListGrid.dataList;
				this.dispatchEvent(new Event(tabA2.CNTRYCHANGED, true));
			}
			// ----- COMMUNICATION PART ---------------/////			
			public function getDataList():ArrayCollection {
				return this.countryListGrid.dataList;			
			}
			
			public function setDataList(data:ArrayCollection):void {
				this.countryListGrid.dataList = data;
			}		
			
			public function setDataListActive(data:ArrayCollection):void {				
				this.countryListGrid.activateSelections(data);
			}
			
			public function setIndicatorsList(evt:ResultEvent):void {
				this.indicatorsList = this.indicatorsNamesList.lastResult;
				this.indicatorsList.filterFunction = filterB;
				this.indicatorsList.refresh();
				this.indicatorsBox.dataProvider = this.indicatorsList;				
			}
			
			private function filterB(item:Object):Boolean {			
				var fl:Boolean = true;				
				(item.id == 101) ? fl = true : fl = false;				
				return fl;
			}					
			
			protected function button3_clickHandler(event:MouseEvent):void
			{								
				trace("calling macro data token");
				this.refreshData();			
			}
			
			public function refreshData():void {
				var countryIDs:Array = this.countryListGrid.getActiveDataList().source;				
				var tmp:Array = this.hlp.formStringFromIDs(countryIDs);
				if (tmp.length < 1) { 
					Alert.show("Select at least one country", "ErrorA2"); 
				} else {
					getMacroDataResult.token = dataServiceData.getMacroData(tmp, selectedIndi, workingScenarioID, false, 0, 1);
				};
			}
			
			[bindable] private var selectedIndi:int = 101;
			[bindable] private var currentData:ArrayCollection = new ArrayCollection();			
			[bindable] private var currentDataGrowth:ArrayCollection = new ArrayCollection();
			
			protected function indicatorsBox_changeHandler(event:IndexChangeEvent):void {
				this.selectedIndi = this.indicatorsBox.selectedItem.id;				
			}			
			
			protected function getMacroDataResult_resultHandler(event:ResultEvent):void
			{					
				this.currentData = this.getMacroDataResult.lastResult as ArrayCollection;
				//this.currentDataGrowth.source = temp.source;
				this.dispatchEvent(new Event("updateCharts", false));
			}
			
			private function filterGrid(item:Object):Boolean {				
				var f:Boolean = true;				
				if (item.scenarioID == this.workingScenarioID) {					
					f = true
				}  else f = false;				
				return f;
			}		
			
			[bindable] public var alteredData:ArrayCollection = new ArrayCollection();
			public function digestChanges(evt:Event):void {
				var temp:Object = new Object();
				
				if (this.isSingleGeo) { 				
					alteredData = this.grid.getData();					
				} else {
					var yrs:int = 2010;
					if (this.shockYears.selectedItem.yrs) yrs = this.shockYears.selectedItem.yrs;
					var val:Number = this.shockValue.value;					
					//get selected Data
					var rawData:ArrayCollection = this.grid.getAllData();
					alteredData = hlp.formShockArray(selectedIndi, this.workingScenarioID, yrs, val, rawData);					
				};
				
				temp = ({'id':1, data:this.alteredData});
				//hasSplit by batteryTypes = false
				this.updateData.token = this.dataServiceUpdate.updateData(temp, false, 0, 0);
			}			

			protected function updateData_resultHandler(event:ResultEvent):void
			{
				Alert.show("data updated successfully");
				this.dispatchEvent(new Event("NewScenarioUpdated", true));
			}

			protected function updateData_faultHandler(event:FaultEvent):void
			{
				Alert.show("data update error");
			}

			[bindable] private var isSingleGeo:Boolean = true;
			protected function radiobutton1_clickHandler(event:MouseEvent):void
			{
				this.isSingleGeo = this.shockType.selectedValue;
				this.shockControls.enabled = !this.isSingleGeo;
			}
			
			protected function button_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new Event("scenarioResetRequested", true));
			}			
			
			public function enableGrid(flag:Boolean) : void {
				this.grid.isEditable = flag;
				flag ? this.flagLabel.text = "Table is editable" : this.flagLabel.text = "Table is not editable";
			}

			protected function getMacroDataResult_faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.faultString, "Error");				
			}

			[bindable] private var isLevel:Boolean = true;
			protected function radiobutton2_changeHandler(event:Event):void
			{
				this.isLevel = !this.isLevel;
				this.dispatchEvent(new Event("updateCharts", false));
			}
			
			protected function updateCharts(evt:Event):void {
				/*this.currentData = this.hlp.transformGridData(this.currentData, false);
				this.currentDataGrowth = this.hlp.transformGridData(this.currentData, true);*/					
				
				this.currentData.filterFunction =  null;
				this.currentData.refresh();
				this.chart.setData(currentData, isLevel);// transformation is performed inside chart component
				
				this.currentData.filterFunction = filterGrid;
				this.currentData.refresh();
				
				this.grid.setData(currentData, isLevel);				
			}

			protected var k:int = 0;
			protected function button4_clickHandler(event:MouseEvent):void
			{
				var s1:SolidColorStroke = new SolidColorStroke(0x0099FF, 3,.9); //First 3 arguments are color, weight, and alpha.
				var s2:SolidColorStroke = new SolidColorStroke(0x0099FF, 6,.6); //First 3 arguments are color, weight, and alpha.
				k = k + 1;
				((k%2)== 0)? this.chart.changeStyle(s1) : this.chart.changeStyle(s2);
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<depot1:Depot1 id="depot1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
					   showBusyCursor="true"/>
		<depot21:Depot21 id="depot21" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
						 showBusyCursor="true"/>		
		<depot3:Depot3 id="depot3" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
					   showBusyCursor="true"/>
		
		<s:CallResponder id="countryListNames"  result="countryListNames_resultHandler(event)"/>
		<s:CallResponder id="indicatorsNamesList" result="setIndicatorsList(event)"/>
		<s:CallResponder id="getMacroDataResult" result="getMacroDataResult_resultHandler(event)" fault="getMacroDataResult_faultHandler(event)"/>
		<s:CallResponder id="updateData" result="updateData_resultHandler(event)" fault="updateData_faultHandler(event)" />
		
		<s:RadioButtonGroup id="growthType"/>
		<s:RadioButtonGroup id="shockType"/>		
	</fx:Declarations>
	
	<utils:CInteractiveGrid x="239" width="652" height="211" id="grid" top="413"
						  >
	</utils:CInteractiveGrid>
	<utils:CTwoAxisChart x="239" width="521" height="295" id="chart" top="67"
						  isLineSeries="true">
	</utils:CTwoAxisChart>
	<utils:CCheckBoxGrid x="11" width="220" height="587" id="countryListGrid" top="37"
						  >
	</utils:CCheckBoxGrid>
	
	<s:BorderContainer width="224" height="25" top="7" x="10">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>		
		<s:Label text="Tab - A. Macro" height="100%" width="40%"/>		
		<s:Button label="notify A" click="button2_clickHandler(event)" width="60%" height="100%"/>			
	</s:BorderContainer>
	
	<s:DropDownList x="374" width="301" id="indicatorsBox" labelField="namen"
					 change="indicatorsBox_changeHandler(event)" top="9" selectedIndex="1"></s:DropDownList>
	<s:Button x="239" label="send changes to PHP" width="154" click="digestChanges(event)" top="367" height="22"/>
	<s:Button x="772" label="refresh data" click="button3_clickHandler(event)" top="10" width="125"/>
	<s:Label x="238" y="6" text="Select Indicator" width="128" height="17"/>
	<s:Label x="238" y="41" text="Data in:" width="65" height="19" verticalAlign="middle"/>
	<s:RadioButton x="308" y="40" label="Levels" groupName="growthType" enabled="true" 
				   selected="true" height="19" change="radiobutton2_changeHandler(event)"/>
	<s:RadioButton x="370" y="40" label="Growths" groupName="growthType" 
				   enabled="true" height="19" change="radiobutton2_changeHandler(event)"/>
	<s:BorderContainer x="770" y="218" width="122" height="170" id="shockControls" enabled="false">
		<s:Label x="-1" y="0" text="Shock Mechanism" fontStyle="italic"/>
		<s:Label x="10" y="28" text="When (Year)" width="103" height="18" verticalAlign="middle"/>
		<s:Label x="10" y="84" text="Value (in % points)" width="87" height="27" verticalAlign="middle"/>
		<s:DropDownList id="shockYears" x="10" y="51" width="100">					
		</s:DropDownList>
		<s:NumericStepper x="10" y="116" id="shockValue" minimum="-20" maximum="20" stepSize="1" width="97"/>
	</s:BorderContainer>
	<s:RadioButton x="448" y="370" label="SingleGeo" groupName="shockType" enabled="true" value="1"
				   selected="true" click="radiobutton1_clickHandler(event)"/>
	<s:RadioButton x="563" y="370" label="MultiGeo" groupName="shockType" enabled="true" value="0"
				   click="radiobutton1_clickHandler(event)"/>
	<s:Button x="670" y="368" label="Reset" width="90" id="button" click="button_clickHandler(event)"/>
	<s:Label x="239" y="397" text="Table activiy state" width="196" fontStyle="italic" fontSize="11" id="flagLabel"/>
	<s:Button x="505" y="39" label="changeStyle" click="button4_clickHandler(event)"/>
	

</s:Group>

