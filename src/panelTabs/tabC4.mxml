<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" 
		 xmlns:utils="utils.*"
		 creationComplete="startApp(event)"		  
		 xmlns:depot1="services.depot1.*" 
		 xmlns:depot21="services.depot21.*"
		  xmlns:depot3="services.depot3.*">
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>

	<fx:Script>
		<![CDATA[
			import mx.charts.AreaChart;
			protected function getDeviceBase_faultHandler(event:FaultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				Alert.show("could not read DeviceBase Table in DB", "Error C4");
			}

			protected function updateData_faultHandler(event:FaultEvent):void
			{
				Alert.show("could not update DeviceBase Table", "Error C4");	
			}
	
			protected function updateData_resultHandler(event:ResultEvent):void
			{
				Alert.show("data updated", "Info");
			}	
			
			protected function button_clickHandler(event:MouseEvent):void
			{
				//this.rewriteDeviceBase();			
			}			

			public var startInd:int = 0; 
			public function rewriteDeviceBase():void {
				startInd = startInd + 1;
				// in writeView: 0 goes for view deviceBase, 1 for deviceBaseMarket
				if (this.startInd > 1) writeViewToTableResult.token = this.dataServiceUpdate.writeViewToTable(workingScenarioID, 0);
			}
			
			protected function writeViewToTableResult_resultHandler(event:ResultEvent):void
			{
				if (event.message.body != "ok") //this.someLabel.text = "view written successfully";
				Alert.show("data could not be written to DB", "Error C4");
				this.dispatchEvent(new Event("deviceBaseWritten", true));
			}

			protected function button4_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new Event("scenarioResetRequested", true));
			}

			[bindable] private var selDevice:int = 1;
			protected function deviceListDrop_changeHandler(event:IndexChangeEvent):void
			{
				this.selDevice = this.deviceListDrop.selectedItem.id;
				this.dispatchEvent(new Event("updateCharts", false));
				
				/*this.currentDataChart.filterFunction = filterChart;
				this.currentDataChart.refresh();		
				this.currentDataGrid.filterFunction = filterGrid;
				this.currentDataGrid.refresh();
				
				this.testChart.setData(currentDataChart, isLevel); // transformation is performed inside chart component
				this.testGrid.setData(currentDataGrid, isLevel);
				
				this.testChart.updateChartTitle(
					(indicatorsBox.selectedItem ? indicatorsBox.selectedItem.namen : "-"),
					(deviceListDrop.selectedIndex ? deviceListDrop.selectedIndex : 0), 
					(deviceListDrop.selectedIndex >= 0), 
					this.isLevel, 
					(deviceListDrop.selectedItem ? deviceListDrop.selectedItem.namen : ""));*/
			}

			protected function getDeviceNames_resultHandler(event:ResultEvent):void
			{
				this.deviceListDrop.dataProvider = this.getDeviceNames.lastResult as ArrayCollection;
			}
			
			[bindable] public var tabEditable:Boolean;			
			public function enableGrid(flag:Boolean, isLocal:Boolean) : void {				
				if (!isLocal) this.tabEditable = flag; 
				this.testGrid.isEditable = flag && isLevel;
				(flag && isLevel) ? this.flagLabel.text = "Table is editable" : this.flagLabel.text = "Table is not editable";
				this.saveBtn.enabled = (flag && isLevel);
			}


			protected function writeViewToTableResult_faultHandler(event:FaultEvent):void
			{
				Alert.show("view was not written to table", "Error C4");
			}
		
			import controls.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.Depot1;
			
			import spark.events.IndexChangeEvent;
			
			import utils.helper;
			
			public var dataServiceNames:Depot1;
			public var dataServiceData:Depot21;
			public var dataServiceUpdate:Depot3;
			
			[bindable] private var workingScenarioID:int;
			private var hlp:helper;
			[bindable] private var indicatorsList:ArrayCollection;
			[bindable] private var dataList:ArrayCollection;
			
			
			public static const CNTRYCHANGED:String = "CNTRY_CHANGED";
			public static const CNTRYUNCHANGED:String = "CNTRY_UNCHANGED"			
			
			
			protected function startApp(event:FlexEvent):void {
				trace("app start panelTab C");			
				hlp = new helper();			
				this.addEventListener("updateCharts", updateCharts);
				this.addEventListener("deviceBaseWritten", refreshData);
				this.rewriteDeviceBase();
			}
			
			public function initNames():void {
				trace("init names inside panel C");				
				indicatorsNamesList.token = this.dataServiceNames.getIndicatorNames();
				this.getDeviceNames.token = this.dataServiceNames.getDeviceNames();
			}
			
			public function setWorkingScenario(nv:int, flag:Boolean):void {
				this.workingScenarioID = nv;
				this.testGrid.setWorkingScenario(this.workingScenarioID, flag);				
			}			
			
			public function getWorkingScenario():int {
				return this.workingScenarioID;								
			}			
			
			
			[bindable] public var alteredData:ArrayCollection = new ArrayCollection();
			
			public function digestChanges(evt:Event):void {
				this.dispatchEvent(new Event("changesMadeInScenario", true));				
				alteredData = this.testGrid.getData();				
				var temp:Object = new Object();
				temp = ({'id':1, data:this.alteredData});
				//hasSplit by batteryTypes = false
				this.updateData.token = this.dataServiceUpdate.updateData(temp, true, this.selDevice, 0);
			}
			
			
			// ----- COMMUNICATION PART ---------------/////			
			public function getDataList():Object {				
				//getActiveDataList
				
				return this.dataList;			
			}
			
			public function setDataList(data:ArrayCollection):void {
				trace("tab C. set cntryNames");
				this.dataList = data;
			}	
			
			
			public function setIndicatorsList(evt:ResultEvent):void {
				this.indicatorsList = this.indicatorsNamesList.lastResult;
				this.indicatorsList.filterFunction = filterB;
				this.indicatorsList.refresh();
				this.indicatorsBox.dataProvider = this.indicatorsList;			
			}
			
			private function filterB(item:Object):Boolean {			
				var fl:Boolean = true;				
				if ((item.hasSplitByDevices == 1)&&(item.hasSplitByTypes == 0)&&
					(item.isOutputIndicator == 1)) {					
						fl = true
				}  else fl = false;				
				return fl;
			}					
			
			protected function button3_clickHandler(event:MouseEvent):void
			{				
				trace("calling device base token");
				this.refreshData(null);					
			}
			
			public function refreshData(evt:Event):void {											
				if (this.dataList) {
					var countryIDs:Array = this.dataList.source;
					var tmp:Array = this.hlp.formStringFromIDs(countryIDs);
					this.cursorManager.setBusyCursor();
					getDeviceBase.token = this.dataServiceData.getDeviceBase(tmp, workingScenarioID);
				} else if (this.startInd > 1) {
					//Alert.show("Select at least one country", "ErrorC4");
				};					
			}
			
			[bindable] private var selectedIndi:int;
			[bindable] private var currentData:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataGrid:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataChart:ArrayCollection = new ArrayCollection();
			
			protected function indicatorsBox_changeHandler(event:IndexChangeEvent):void {
				this.selectedIndi = this.indicatorsBox.selectedItem.id;
			}						
			
			protected function getDeviceBase_resultHandler(event:ResultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				currentData = this.getDeviceBase.lastResult as ArrayCollection;
				
				this.currentDataChart.source = this.currentData.source;
				this.currentDataGrid.source = this.currentData.source;
				this.dispatchEvent(new Event("updateCharts", false));				
			}
			
			protected function updateCharts(evt:Event):void {
				this.currentDataGrid.filterFunction = this.filterGrid;
				this.currentDataGrid.refresh();
				this.currentDataChart.filterFunction = this.filterChart;
				this.currentDataChart.refresh();				
				
				this.testChart.setData(currentDataChart, isLevel); // transformation is performed inside chart component
				this.testGrid.setData(currentDataGrid, isLevel);

				this.testChart.updateChartTitle(
					(indicatorsBox.selectedItem ? indicatorsBox.selectedItem.namen : "-"),
					(deviceListDrop.selectedIndex ? deviceListDrop.selectedIndex : 0), 
					(deviceListDrop.selectedIndex >= 0), 
					this.isLevel, 
					(deviceListDrop.selectedItem ? deviceListDrop.selectedItem.namen : ""));
			}
			
			private function filterGrid(item:Object):Boolean {				
				var f:Boolean = true;				
				if ((item.scenarioID == this.workingScenarioID)
					&& (item.deviceID == this.selDevice)) {					
					f = true
				}  else f = false;				
				return f;
			}	
			
			private function filterChart(item:Object):Boolean {				
				var f:Boolean = true;				
				if (item.deviceID == this.selDevice) {					
					f = true
				}  else f = false;				
				return f;
			}			
			
			[bindable] private var isLevel:Boolean = true;
			protected function radiobutton2_changeHandler(event:Event):void
			{
				this.isLevel = !this.isLevel;
				this.dispatchEvent(new Event("updateCharts", false));
				
				var tmp:int = 1 - int(this.growthType.selection.value);
				this.enableGrid(tmp == 0 && this.tabEditable, true);	
				this.saveBtn.enabled = (tmp == 0 && this.tabEditable);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="growthType" />
		
		<depot1:Depot1 id="depot1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
					   showBusyCursor="true"/>
		<depot21:Depot21 id="depot21" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
						 showBusyCursor="true"/>
		<depot3:Depot3 id="depot3" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
					   showBusyCursor="true"/>
		

		<s:CallResponder id="indicatorsNamesList" result="setIndicatorsList(event)"/>		
		<s:CallResponder id="getDeviceNames" result="getDeviceNames_resultHandler(event)" />
		
		<s:CallResponder id="getDeviceBase" result="getDeviceBase_resultHandler(event)" fault="getDeviceBase_faultHandler(event)" />		
		<s:CallResponder id="writeViewToTableResult" result="writeViewToTableResult_resultHandler(event)" fault="writeViewToTableResult_faultHandler(event)"/>
		<s:CallResponder id="updateData" result="updateData_resultHandler(event)"  fault="updateData_faultHandler(event)"/>		
		
	</fx:Declarations>
	
	
	
	<utils:CTwoAxisChart width="747" height="277" id="testChart" top="84" left="10">
	</utils:CTwoAxisChart>
	<utils:CInteractiveGrid width="747" height="195" id="testGrid" top="440" left="10">
	</utils:CInteractiveGrid>
	<s:DropDownList width="243" id="indicatorsBox"
					labelField="namen"	 top="22" selectedIndex="0" height="20" left="49"></s:DropDownList>
	<s:Label text="Data In:" fontStyle="italic" fontSize="11" left="10" top="52" fontFamily="Arial"/>
	<s:Button label="refresh data" id="getSomeData" click="button3_clickHandler(event)" top="52" height="25" width="241" left="199" fontWeight="bold"/>
	<s:Button x="494" y="55" label="writeViewToDB_1" width="148" id="button"
			  click="button_clickHandler(event)" enabled="false" height="20"/>
	<s:Button label="save changes" width="222" id="saveBtn"
			  click="digestChanges(event)" height="27" fontWeight="bold" left="535" top="366"/>
	<s:Button label="Reset" click="button4_clickHandler(event)" height="23" top="399" width="222" left="535"/>
	<s:DropDownList id="deviceListDrop" labelField="namen" 
					change="deviceListDrop_changeHandler(event)" selectedIndex="0" top="22" height="20" left="370" width="272"></s:DropDownList>
	<s:Label text="Table activiy state" width="196" fontStyle="italic" fontSize="11" id="flagLabel" top="427" left="11"/>
	<s:RadioButton label="Levels" groupName="growthType" enabled="true" value="0" 
				   selected="true" height="19" change="radiobutton2_changeHandler(event)" top="59" left="61" fontFamily="Arial" fontSize="11"/>
	<s:RadioButton label="Growths" groupName="growthType" value="1"
				   enabled="true" height="19" change="radiobutton2_changeHandler(event)" top="59" left="124" fontFamily="Arial" fontSize="11"/>
	<s:Label text="Select Indicator" fontStyle="italic" fontSize="11" top="10" height="10" left="10" fontFamily="Arial"/>
	<s:Label x="341" text="Select Device" fontStyle="italic" fontSize="11" top="10" height="10" fontFamily="Arial"/>
	<s:BorderContainer width="517" height="59" left="10" top="364" borderVisible="false">
		<s:Label text="Shock Mechanism" fontStyle="italic" fontSize="11" x="7" y="8" fontFamily="Arial"/>
		<s:BorderContainer x="265" y="5" width="244" height="48" id="shockControls" enabled="false">
			<s:Label x="3" y="1" text="When (Year)" width="106" height="20" verticalAlign="middle" fontSize="10"/>
			<s:Label x="110" y="1" text="Value (in % points)" width="133" height="20" verticalAlign="middle" fontSize="10"/>
			<s:DropDownList id="shockYears" width="100" left="13" top="19">					
			</s:DropDownList>
			<s:NumericStepper id="shockValue" minimum="-20" maximum="20" stepSize="1" width="97" left="137" top="19"/>
		</s:BorderContainer>
		<s:RadioButton x="66" label="Single Country (table below)" groupName="shockType" enabled="false" value="1"
					   selected="true" top="19" fontSize="11"/>
		<s:RadioButton x="66" label="All countries  (left)" groupName="shockType" enabled="false" value="0"
					   top="35" fontSize="11"/>
	</s:BorderContainer>
</s:Group> 
