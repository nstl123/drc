<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="900" 
		 xmlns:utils="utils.*"
		 xmlns:depot1="services.depot1.*" 
		 xmlns:depot21="services.depot21.*"
		 creationComplete="startApp(event)"
		  height="100%">

	
	<fx:Declarations>
		<depot1:Depot1 id="depot1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
					   showBusyCursor="true"/>
		<depot21:Depot21 id="depot21" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
						 showBusyCursor="true"/>
		
		<s:CallResponder id="getDeviceList" result="getDeviceList_resultHandler(event)" />
<!--		<s:CallResponder id="indicatorsNamesList" result="setIndicatorsList(event)"/> !-->		
		
		<s:CallResponder id="getMacroDataResult" result="getMacroDataResult_resultHandler(event)" fault="getMacroDataResult_faultHandler(event)"/>
		<s:CallResponder id="getMacroDataCategory" result="getMacroDataCategory_resultHandler(event)" fault="getMacroDataCategory_faultHandler(event)" />
		
		<s:CallResponder id="updateData" result="updateData_resultHandler(event)" fault="updateData_faultHandler(event)" />
		
		<s:RadioButtonGroup id="batTypes" />		
		<s:RadioButtonGroup id="pwrTypes" />
		<s:RadioButtonGroup id="growthType" />
		<s:RadioButtonGroup id="shockType" />
		<s:RadioButtonGroup id="splitByDevices_C" />
		
	</fx:Declarations>
	
	<s:states>
		<s:State name="default" />
		<s:State name="viewingOnly" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import services.depot31.Depot31;
			protected function updateData_resultHandler(event:ResultEvent):void
			{
				var r:Object = event.message;
				Alert.show("Data Updated Successfully", "Info");
				this.dispatchEvent(new Event("refreshData", false));
				
				this.dispatchEvent(new Event("NewScenarioUpdated", true));
			}
			
			import controls.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.Depot1;
			
			import spark.events.IndexChangeEvent;
			
			import utils.helper;
			
			public var dataServiceNames:Depot1;
			public var dataServiceData:Depot21;
			public var dataServiceUpdate:Depot31;
			
			[bindable] private var workingScenarioID:int;
			[bindable] private var baselineScenarioID:int = 10001;
			private var hlp:helper;
			[bindable] private var indicatorsList:ArrayCollection;			
			
			protected function startApp(event:FlexEvent):void {
				trace("app start panelTab F");			
				hlp = new helper();	
				this.addEventListener("updateCharts", updateCharts);	
				this.addEventListener("refreshData", refreshData);
				
				initShockControls();		
			}
			
			public function initNames():void {
				trace("init names inside panel F");				
//				indicatorsNamesList.token = this.dataServiceNames.getIndicatorNames();				
				this.getDeviceList.token = this.dataServiceNames.getDeviceNames();
			}
			
			[bindable] private var yrsList:ArrayCollection = new ArrayCollection();
			protected function initShockControls():void {
				for (var i:int = 2012; i <= 2021; i++) {
					yrsList.addItem({"yrs":i});
				};
				this.shockYears.dataProvider = yrsList;
				this.shockYears.labelField = "yrs";
				
				this.shockValue.value = 10;
			}	
			
			public function setWorkingScenario(nv:int, flag:Boolean):void {
				this.workingScenarioID = nv;
				this.testGrid.setWorkingScenario(workingScenarioID, flag);				
			}			
			
			[bindable] private var flMngr:FlowManager;
			public function setFlowManagerRef(z:FlowManager):void {
				flMngr = z;
				this.testChart.setVwmode(this.flMngr.isViewingMode());
			}
			
			protected function getDeviceList_resultHandler(event:ResultEvent):void
			{			
				deviceNamesFullList = this.getDeviceList.lastResult as ArrayCollection;			
				this.deviceNamesFullList.filterFunction = this.flMngr.filterDeviceList;
				//this.filterDeviceList;
				this.deviceNamesFullList.refresh();
				this.deviceListDrop.dataProvider = this.deviceNamesFullList;		
			}
			
			// ----- COMMUNICATION PART ---------------/////
			[bindable]
			private var dataList:ArrayCollection;
			public function getDataList():ArrayCollection {
				return this.dataList;
			}
			
			public function setDataList(data:ArrayCollection):void {
				this.dataList = data;
			}			
			
			public function setIndicatorsList(arr:ArrayCollection):void {
				this.indicatorsList = arr;
				this.indicatorsList.filterFunction = filterB;
				this.indicatorsList.refresh();
				this.indicatorsBox.dataProvider = this.indicatorsList;
				
				this.setSelectedIndicators();
			}
			
			public function setSelectedIndicators():void {
				var rr:ArrayCollection = this.flMngr.getRecordedSelectedIndicators();
				if (rr) this.setActiveIndis(0, rr.getItemAt(0).id);
				else this.setActiveIndis(0);
			}
			
			private function filterB(item:Object):Boolean {				
				var fl:Boolean = true;				
				( ((item.id >= 204)&&(item.id <= 207)) ) ?  fl = true : fl = false;				
				return fl;
			}					
			
			protected function button3_clickHandler(event:MouseEvent):void
			{				
				trace("calling macro data token");
				this.dispatchEvent(new Event("refreshData", false));
				//this.refreshData();
			}
			
			public function updateSelectedDeviceID():void {
				this.selDevice = this.flMngr.getSelectedDeviceID();								
				this.deviceListDrop.selectedIndex = hlp.getIndexFromID(deviceNamesFullList.source, selDevice, 1);
				this.handleHA();
			}	
			
			public function refreshData(evt:Event):void {
				if ((!this.dataList)||(this.dataList.length < 1)) {					
					Alert.show("Please select at least one country", "Selection error");
				} else {						
					/*if (this.dataList.length >= 10 ) {
						Alert.show("Maximum number of selected counties should less of equal to 10", "Info");
						this.dataList.source.splice(10, this.dataList.source.length - 10);
					};*/	
					var countryIDs:Array = this.dataList.source;				
					var tmp:String = this.hlp.formStringFromIDs2(countryIDs);				
					trace("calling macro data token");
				
					var tmpType:int = 1;
					var fl:Boolean = true; //hasSplitFlag.selected;
					switch (this.selectedIndi) {
						case 204: 
							tmpType = this.selBatType; break;							
						case 205: 
							tmpType = this.selPwrType; break;					
						case 206: 
							tmpType = this.selBatType; break;
						case 207: 
							tmpType = 0; fl = false; break;
						case 277: 
							tmpType = 0;
							fl = false;
							break;
					};			
					
					if (tmp.length > 0) {
						this.cursorManager.removeAllCursors();
						this.cursorManager.setBusyCursor();
						//if (selDeviceAggLevel > 1 ) { // category level
						getMacroDataCategory.token = dataServiceData.getMacroDataCategory(tmp, selectedIndi, workingScenarioID, int(fl), tmpType, 1);
						/*} else {						
							getMacroDataResult.token = dataServiceData.getMacroData(tmp, selectedIndi, workingScenarioID, 
								fl, tmpType, 1);*/
						//};
					} else {					
						Alert.show("Select at least one country", "Error F51");					
					};
				
				};
			}
			
			[bindable] public var selectedIndi:int = 204;
			[bindable] private var currentData:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataChart:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataGrid:ArrayCollection = new ArrayCollection();
			
			protected function indicatorsBox_changeHandler(event:IndexChangeEvent):void {
				this.selectedIndi = this.indicatorsBox.selectedItem.id;				
				this.hasSplitFlag.selected = this.indicatorsBox.selectedItem.hasSplitByTypes;				
				
				this.flMngr.setBatTypesActiveFlag(true);
				
				this.dispatchEvent(new Event("refreshData", false));
			}			
			
			protected function getMacroDataResult_resultHandler(event:ResultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				currentData = this.getMacroDataResult.lastResult as ArrayCollection;				

				this.currentDataChart.source = this.currentData.source;
				this.currentDataGrid.source = this.currentData.source;
				this.dispatchEvent(new Event("updateCharts", false));				
	
			}
			
			private function filterGrid(item:Object):Boolean {				
				var f:Boolean = true;				
				if (this.flMngr.isViewingMode()) {
					f = ((item.scenarioID == 10001) && (item.deviceID == this.selDevice));
				} else {
					f = ((item.scenarioID == workingScenarioID) && (item.deviceID == this.selDevice));
				};						
				return f;
			}	
			
			private function filterChart(item:Object):Boolean {				
				var f:Boolean = true;		
				if (this.flMngr.isViewingMode()) {
					f = ((item.scenarioID == baselineScenarioID)&&(item.deviceID == this.selDevice));
				} else { 
					f = (item.deviceID == this.selDevice);
				};
				return f;
			}			
			
			[bindable] private var isSingleGeo:Boolean = true;
			protected function changeShockType_handler(event:MouseEvent):void
			{
				this.isSingleGeo = this.shockType.selectedValue;
				this.shockControls.enabled = !this.isSingleGeo;
			}
			
			[bindable] public var alteredData:ArrayCollection = new ArrayCollection();
			public function digestChanges(evt:Event):void {
				if (this.tabEditable) {			
					var val:Number = 0;
					var yrs:int = 2012;
					var temp:Object = new Object();					
					if (this.isSingleGeo) { 				
						alteredData = this.testGrid.getData();									
					} else {						
						yrs = (this.shockYears.selectedItem ? this.shockYears.selectedItem.yrs : 2010);					
						val = this.shockValue.value;						
						var rawData:ArrayCollection = this.testChart.getBaseData(this.flMngr.baselineScenarioID);
						alteredData = hlp.formShockArray(selectedIndi, this.workingScenarioID, yrs, val, rawData);					
					};					
					temp = ({'id':1, data:this.alteredData});
					
					var tmpType:int = 0;
					switch (this.selectedIndi) {
						case 204: 
							tmpType = this.selBatType; break;
						case 205: 
							tmpType = this.selPwrType; break;					
						case 206: 
							tmpType = this.selBatType; break;						
						case 277: 
							tmpType = this.selPwrType; break;
					};
					
					if (this.alteredData.length > 0) {					
						if (this.selectedIndi == 277) {
							this.updateData.token = this.dataServiceUpdate.updateData2(temp, 0, this.selDevice, tmpType, yrs, val);
						} else {				
							//this.updateData.token = this.dataServiceUpdate.updateDataProxy(temp, this.selDevice, tmpType);
							this.updateData.token = this.dataServiceUpdate.updateData2(temp, 0, this.selDevice, tmpType, yrs, val);
						};
						this.dispatchEvent(new Event("changesMadeInScenario", true));
					} else {
						this.dispatchEvent(new Event("refreshData", false));
					};
				} else {
					this.dispatchEvent(new Event("refreshData", false));
				};
			}			

			protected function button4_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new Event("scenarioResetRequested", true));
			}

			[bindable] private var selDevice:int = 1;
			[bindable] private var selDeviceNamen:String = "";
			protected function deviceListDrop_changeHandler(event:IndexChangeEvent):void
			{
				/*if (this.deviceListDrop.selectedIndex < 0) this.deviceListDrop.selectedIndex = 0;
				this.selDevice = this.deviceListDrop.selectedItem.id;*/				
				this.selDevice = (this.deviceListDrop.selectedIndex < 0) ? 0 : this.deviceListDrop.selectedItem.id;
				
				this.flMngr.setSelectedDeviceID(this.selDevice);
				this.flMngr.setSelDeviceNamen(this.deviceListDrop.selectedItem.namen);
				
				this.flMngr.startDevLabelFlag = false;
				this.startDevLabel.visible = this.flMngr.startDevLabelFlag;
				
				this.handleHA();
			}		
			
			private var isCurrentHA :Boolean = false;
			private var isPreviousHA:Boolean = false;
			protected function handleHA():void {				
				this.isCurrentHA = (this.deviceListDrop.selectedItem.categoryID == 213);				
				
				if ( Math.abs( int(isCurrentHA) - int(isPreviousHA) ) > 0 ) { // means change in HA vs not HA
					this.radioHA.enabled  = this.isCurrentHA;
					//this.radioHA.selected = this.isCurrentHA;
					//this.radio3A.selected = !this.isCurrentHA;
					if (this.isCurrentHA) {						
						this.batTypes.selectedValue = 7;
					} else {
						this.batTypes.selectedValue = 3;	
					};					
					batTypes_clickHandler(null); // has updateChart embedded
				} else {
					this.dispatchEvent(new Event("updateCharts", false));			
				};						
				this.isPreviousHA = this.isCurrentHA;
			}
			
			protected function getMacroDataResult_faultHandler(event:FaultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				Alert.show("Error retrieving data from DB", "Error F51");
			}

			[bindable] public var selBatType:int = 3;
			[bindable] public var selPwrType:int = 103;
			protected function batTypes_clickHandler(event:MouseEvent):void
			{
				this.selBatType = int(this.batTypes.selectedValue);
				this.flMngr.setSelBatType(this.selBatType);
				this.flMngr.setBatTypesActiveFlag(true);				
				this.dispatchEvent(new Event("refreshData", false));
			}
			
			protected function pwrTypes_clickHandler(event:MouseEvent):void
			{
				this.selPwrType = int(this.pwrTypes.selectedValue);
				this.flMngr.setSelPwrType(this.selPwrType);	
				this.flMngr.setPwrTypesActiveFlag(true); //103
				
				this.dispatchEvent(new Event("refreshData", false));
			}
			
			[bindable] public var tabEditable:Boolean;			
			public function enableGrid(flag:Boolean, isLocal:Boolean) : void {				
				if (!isLocal) this.tabEditable = flag; 
				this.testGrid.isEditable = flag && isLevel;
				(flag && isLevel) ? this.flagLabel.text = "Table is Editable for 2012-2021" : this.flagLabel.text = "Table is not editable";				
				
				this.shockBtn1.enabled = (flag && isLevel); 
				this.shockBtn2.enabled = (flag && isLevel);
				this.shockControls.enabled = (flag && isLevel && !isSingleGeo);
				this.shLbl.enabled = (flag && isLevel && !isSingleGeo);
			}
			
			[bindable] private var isLevel:Boolean = true;
			protected function radiobutton2_changeHandler(event:Event):void
			{
				this.isLevel = !this.isLevel;
				this.dispatchEvent(new Event("updateCharts", false));				
				
				var tmp:int = 1 - int(this.growthType.selection.value);
				this.enableGrid(tmp == 0 && this.tabEditable, true);	
				if (this.currentState == "viewingOnly") tmp = 0;
				this.saveBtn.enabled = (tmp == 0);// && this.tabEditable);
			}
			
			protected function updateCharts(evt:Event):void {
				this.selDevice = this.flMngr.getSelectedDeviceID();
				this.selDeviceNamen = this.flMngr.selDeviceNamen;
				
				this.testChart.setVwmode(this.flMngr.isViewingMode());
				
				this.currentDataGrid.filterFunction = this.filterGrid;
				this.currentDataGrid.refresh();
				this.currentDataChart.filterFunction = this.filterChart;
				this.currentDataChart.refresh();				
				
				this.testChart.setData(currentDataChart, isLevel); // transformation is performed inside chart component
				this.testGrid.setData(currentDataGrid, isLevel);				
				//204 - split by size
				//205, 206, 207 - split by PWR				
				//var lblp:String = this.pwrTypes.selection.label;								
				var lbls:String = this.batTypes.selection.label;			
				var lbl : String = "";
				var enFlag:Boolean = true;
				var addValue:Boolean = true;
				
				if (this.indicatorsBox.selectedItem){
					if ((indicatorsBox.selectedItem.id == 204)||(indicatorsBox.selectedItem.id == 206)) {
						lbl = lbls;	enFlag = true;
						addValue = true;
					} else 	if (indicatorsBox.selectedItem.id == 205) {						
						enFlag = false;
						addValue = true;
					} else if ((indicatorsBox.selectedItem.id == 207)||(indicatorsBox.selectedItem.id == 277)) {
						addValue = false;
					};				
				};		
				
				this.pwrTypes.enabled =!enFlag && addValue;				
				this.batTypes.enabled = enFlag && addValue;				
				this.flMngr.setSelBatType(this.selBatType * int(enFlag) );
				this.flMngr.setSelPwrType(this.selPwrType * int(!enFlag));
				
				if (indicatorsBox.selectedItem.id == 277) {
					this.pwrTypes.enabled = false; this.batTypes.enabled = false;
					this.flMngr.setSelBatType(0);  this.flMngr.setSelPwrType(0);
				}
				
				this.testChart.updateChartTitle(
					(indicatorsBox.selectedItem ? (indicatorsBox.selectedItem.namen + ", " + lbl) : "-"),
					(deviceListDrop.selectedIndex ? deviceListDrop.selectedIndex : 0), 
					(deviceListDrop.selectedIndex >= 0), 
					this.isLevel, 
					(this.flMngr.selDeviceNamen),
					false, 
					(indicatorsBox.selectedItem  ? indicatorsBox.selectedItem.unit : ""));
			}
		
			public function setActiveIndis(k:int, idd:int = -1):void {
				var kk:int = 0;
				var i:int = 0;				
				if ( (idd > 0) && (this.indicatorsBox.dataProvider) ) {				
					while (i < this.indicatorsBox.dataProvider.length) {				    						
						if (this.indicatorsBox.dataProvider.getItemAt(i).id == idd)	break;						
						i++;
					};					
				} else {
					this.indicatorsBox.selectedIndex = k;
					kk = k;
				};
				if ( this.indicatorsBox.dataProvider ) {
					if (this.indicatorsBox.dataProvider.length > i) {				
						this.indicatorsBox.selectedIndex = i;
						kk = i;
					};
					this.indicatorsBox.selectedItem = this.indicatorsBox.dataProvider.getItemAt(kk);
					this.selectedIndi = this.indicatorsBox.selectedItem.id;				
				};				
			}			
			
			
			[bindable] private var selDeviceAggLevel:int = 0;
			[bindable] private var devicesActiveFlag:Boolean;
			private var deviceNamesFullList:ArrayCollection;
			protected function devicesActive_clickHandler(event:MouseEvent):void
			{				
				selDeviceAggLevel = int(this.splitByDevices_C.selectedValue);
				this.flMngr.setSelDeviceAggLevel(selDeviceAggLevel);
				devicesActiveFlag = (this.selDeviceAggLevel > 0);				
				this.flMngr.setDevicesActiveFlag(this.devicesActiveFlag);									
				this.deviceNamesFullList.refresh();		
				if (this.selDeviceAggLevel > 1) {
					deviceListDrop.selectedIndex = 0;
				} else {
					deviceListDrop.selectedIndex = 1;
				};				
				//deviceListDrop_changeHandler(null);
				this.dispatchEvent(new Event("refreshData", false));				
			}
			
			protected function getMacroDataCategory_resultHandler(event:ResultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				currentData = this.getMacroDataCategory.lastResult as ArrayCollection;			
				this.currentDataChart.source = this.currentData.source;
				this.currentDataGrid.source  = this.currentData.source;
				
				//this.deviceListDrop_changeHandler(null);
				this.dispatchEvent(new Event("updateCharts", false));
			}
			
			protected function getMacroDataCategory_faultHandler(event:FaultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				Alert.show("Could not read data", "error F51");
			}


			protected function updateData_faultHandler(event:FaultEvent):void
			{
				var z:Object = event.message.body;
				Alert.show(z.toString(), "Error Updating Data");
			}

		]]>
	</fx:Script>

	<utils:CTwoAxisChart width="747" height="250" id="testChart" top="107" left="10" top.viewingOnly="114" left.viewingOnly="10" top.default="129" left.default="10">
	</utils:CTwoAxisChart>
	
	<utils:CInteractiveGrid width="747" height="195" id="testGrid" top="492" left="10" top.viewingOnly="437" left.viewingOnly="10" top.default="504" left.default="10">
	</utils:CInteractiveGrid>
	<s:Label text="Step 4: Click the dropdown below to adjust chosen indicator" verticalAlign="middle" fontStyle="normal" fontSize="13" top="2" left="10" fontFamily="Arial" color="#007E9D" includeIn="default" id="labelTop"/>
	<s:Label text="Step 5: Make changes to the data by editing right within the table below. You may also input shocks into the data by using the drop down menus. Once data has been adjusted, click “Update Chart” to view changes. To remove changes, click “Reset Scenario&quot;" 
			 verticalAlign="middle" fontStyle="normal" fontSize="13" top="381" left="10" fontFamily="Arial" color="#007E9D" width="747" includeIn="default" id="labelBot"/>
	
	<s:DropDownList width="262" height="18" id="indicatorsBox" 
					change="indicatorsBox_changeHandler(event)" labelField="namen" top="32" 
					left="50" top.viewingOnly="17" left.viewingOnly="50"/>
	
	<s:CheckBox x="300" y="34" label="hasSplit" enabled="false" id="hasSplitFlag" visible="false" x.viewingOnly="300" y.viewingOnly="19"/>
	<s:Button label="Update Chart" width="222" click="digestChanges(event)" id="saveBtn" left="535" top="412" fontWeight="bold" height="27" top.viewingOnly="367" left.viewingOnly="535" top.default="430" left.default="535"/>
	<s:Button click="button4_clickHandler(event)" width="222" left="535" top="445" 
			  height="23" top.viewingOnly="399" left.viewingOnly="535" top.default="463" 
			  left.default="535" label="Reset Scenario" enabled.viewingOnly="false" enabled.default="true"/>
	<s:DropDownList width="272" id="deviceListDrop"
					 labelField="namen" change="deviceListDrop_changeHandler(event)" top="32" left="371" top.viewingOnly="17" left.viewingOnly="411" top.default="32" left.default="395"></s:DropDownList>
	
	<s:Button label="Update Chart" click="button3_clickHandler(event)" id="button" width="122" height="25" 
			  fontWeight="bold" left="607" top="0" visible="false" top.viewingOnly="-15" left.viewingOnly="607"/>
	
	<s:Label text="Battery type/size" id="selDeviceLabel0" fontSize="11" fontStyle="italic" top="57" fontFamily="Arial" top.viewingOnly="46" top.default="64" left.viewingOnly="390" left.default="382"/>
	<s:Label text="Battery Power Type" id="selDeviceLabel1" fontSize="11" fontStyle="italic" top="57" fontFamily="Arial" top.viewingOnly="46" top.default="64" left.viewingOnly="144" left.default="144"/>
	<s:RadioButton label="Absolutes" groupName="growthType" enabled="true" value="0" 
				   selected="true" height="19" change="radiobutton2_changeHandler(event)" left="77" top="69" fontSize="11" fontFamily="Arial" top.viewingOnly="58" left.viewingOnly="30" top.default="74" left.default="31"/>
	<s:RadioButton label="Growth Rates" groupName="growthType" value="1" 
				   enabled="true" height="19" change="radiobutton2_changeHandler(event)" left="140" top="69" fontSize="11" fontFamily="Arial" top.viewingOnly="76" left.viewingOnly="30" top.default="91" left.default="31"/>
	<s:Label text="Table activiy state" width="296" fontStyle="italic" fontSize="11" id="flagLabel" left="10" fontFamily="Arial" left.viewingOnly="10" top.viewingOnly="425" left.default="10" top.default="490"/>
	<s:BorderContainer width="517" left="10" top="410" borderVisible="false" top.viewingOnly="367" left.viewingOnly="10" backgroundAlpha.viewingOnly="0.0" height.default="59" height.viewingOnly="55" top.default="428" left.default="10">
		<s:Label text="Scenario Mechanism" fontStyle="italic" fontSize="11" y="8" 
				 fontFamily="Arial" id="shLbl" left.default="0" left.viewingOnly="0"/>
		<s:BorderContainer width="244" height="48" id="shockControls" enabled="false" borderVisible="false" y.default="5" x.default="265" x.viewingOnly="265" y.viewingOnly="5">
			<s:Label x="3" y="1" text="Year" width="106" height="20" verticalAlign="middle" fontSize="10"/>
			<s:Label x="110" y="1" text="Percentage change" width="133" height="20" verticalAlign="middle" fontSize="10"/>
			<s:DropDownList id="shockYears" width="100" left="13" top="19" height="20">					
			</s:DropDownList>
			<s:NumericStepper id="shockValue" minimum="-99" maximum="99" stepSize="1" 
							  width="97" left="137" top="19" height="20"/>
		</s:BorderContainer>
		<s:RadioButton x="66" label="Single Country (table below)" groupName="shockType" enabled="true" value="1"
					   selected="true" top="19" fontSize="11" click="changeShockType_handler(event)" id="shockBtn1"/>
		<s:RadioButton x="66" label="All countries  (right)" groupName="shockType" enabled="true" value="0"
					   top="35" fontSize="11" click="changeShockType_handler(event)" id="shockBtn2"/>
	</s:BorderContainer>
	<s:Label text="Data In:" fontStyle="italic" fontSize="11" left="10" top="57" fontFamily="Arial" top.viewingOnly="46" left.viewingOnly="10" top.default="64" left.default="10"/>
	<s:Label text="Select Indicator" fontStyle="italic" fontSize="11" top="21" height="10" left="10" fontFamily="Arial" top.viewingOnly="6" left.viewingOnly="10"/>
	<s:Label text="Select Device" fontStyle="italic" fontSize="11" top="21" height="10" left="342" fontFamily="Arial" top.viewingOnly="6" left.viewingOnly="390" top.default="21" left.default="382"/>
	
	
	<s:RadioButton visible="false" value="2" label="Device category" selected="false" fontFamily="Arial" fontSize="11" 
				   left="340" top="56" top.viewingOnly="41" left.viewingOnly="340"
				   groupName="splitByDevices_C" click="devicesActive_clickHandler(event)"/>
	<s:RadioButton visible="false" value="1" label="Single device" selected="true" fontFamily="Arial" fontSize="11" 
				   left="340" top="35" top.viewingOnly="20" left.viewingOnly="340"
				   groupName="splitByDevices_C"  click="devicesActive_clickHandler(event)"/>
	<s:Label visible="false" text="Devices Aggeragtion Level" fontSize="11" fontStyle="italic" top="21" left="313" fontFamily="Arial" backgroundColor="#FFFFFF" 
			 backgroundAlpha="1.0" chromeColor="#FFFFFF" top.viewingOnly="6" left.viewingOnly="313"/>
	<s:BorderContainer height="60" left="480" top="74" 
					   borderVisible="false" contentBackgroundAlpha="0.0" backgroundAlpha="0.0" id="batTypesFrame" top.viewingOnly="58" left.viewingOnly="417" height.default="45" top.default="75" left.default="399" width.viewingOnly="353" width.default="357" height.viewingOnly="52">
		<s:layout>
			<s:TileLayout horizontalGap="3" verticalGap="1" horizontalGap.viewingOnly="0" horizontalGap.default="2" verticalGap.default="1"/>
		</s:layout>
		<s:RadioButton x="44" label="AAA"  value="3" groupName="batTypes" click="batTypes_clickHandler(event)" 
					   selected="true" fontSize="11" fontFamily="Arial" x.viewingOnly="564" top.viewingOnly="59" x.default="564" y="15" id="radio3A"/>
		<s:RadioButton x="124" label="AA" value="5" groupName="batTypes" click="batTypes_clickHandler(event)" 
					   fontSize="11" fontFamily="Arial" x.viewingOnly="612" top.viewingOnly="59" x.default="612" y="10"/>
		<s:RadioButton x="182" label="C"  value="1" groupName="batTypes" selected="true" click="batTypes_clickHandler(event)"
					   fontSize="11" fontFamily="Arial" x.viewingOnly="653" top.viewingOnly="59" x.default="653" y="44"/>
		<s:RadioButton x="182" label="D"  value="2" groupName="batTypes" click="batTypes_clickHandler(event)" fontSize="11" 
					   fontFamily="Arial" x.viewingOnly="688" top.viewingOnly="59" x.default="688" y="10"/>
		<!-- <s:RadioButton x="198" label="AC Wall Outlet"  value="9" groupName="batTypes" click="batTypes_clickHandler(event)" 
					   fontSize="11" fontFamily="Arial" x.viewingOnly="724" top.viewingOnly="59" x.default="724" y="11"/>
		<s:RadioButton x="217" label="Built In RCR"  value="8" groupName="batTypes" click="batTypes_clickHandler(event)" 
					   fontSize="11" fontFamily="Arial" x.viewingOnly="724" top.viewingOnly="59" x.default="724" y="10"/>
		!-->
		<s:RadioButton x="245" label="9V"  value="4" groupName="batTypes" click="batTypes_clickHandler(event)" fontSize="11" 
					   fontFamily="Arial" x.viewingOnly="724" top.viewingOnly="59" x.default="724" y="10"/>
		<s:RadioButton value="6" groupName="batTypes" click="batTypes_clickHandler(event)" 
					   fontSize="11" fontFamily="Arial" x.viewingOnly="724" top.viewingOnly="59" label="C&amp;B/Spec." y.viewingOnly="10"/>
		<s:RadioButton x="227" label="Hearing Aid"  value="7" groupName="batTypes" click="batTypes_clickHandler(event)" 
					   fontSize="11" fontFamily="Arial" x.viewingOnly="724" top.viewingOnly="59" x.default="724" y="10" id="radioHA" enabled="false"/>		
		
	</s:BorderContainer>
	<s:BorderContainer left="164" top="74" contentBackgroundAlpha="0.0" backgroundAlpha="0.0" borderVisible="false" id="pwrTypesFrame" top.viewingOnly="58" left.viewingOnly="161" height.viewingOnly="55" width.default="236" top.default="75" left.default="161" height.default="55" width.viewingOnly="230">
		<s:layout>
			<s:VerticalLayout gap="2"/>
		</s:layout>
		<s:layout.default>
			<s:TileLayout horizontalGap="5" verticalGap="1"/>
		</s:layout.default>
		<s:layout.viewingOnly>
			<s:TileLayout horizontalGap="5" verticalGap="1"/>
		</s:layout.viewingOnly>		
		<s:RadioButton label="Built-in RCR" value="103" groupName="pwrTypes"
					   click="pwrTypes_clickHandler(event)" fontSize="11" fontFamily="Arial" selected="true" 
					   left.viewingOnly="197" top.viewingOnly="77" x="11" y="27" enabled="true"/>
		<s:RadioButton enabled="true" label="AC Wall Outlet" value="104" groupName="pwrTypes"
					   click="pwrTypes_clickHandler(event)" fontSize="11" fontFamily="Arial" 
					   top.viewingOnly="59" left.viewingOnly="197" x="10" y="15"/>		
		<s:RadioButton enabled="true" label="General Purpose" value="105" groupName="pwrTypes"
					   click="pwrTypes_clickHandler(event)" fontSize="11" fontFamily="Arial" 
					   top.viewingOnly="59" left.viewingOnly="319" x="-1" y="47"/>
	</s:BorderContainer>
	<s:Label x="320" text="START -&gt;" width="68" height="16" 
			 verticalAlign="middle" textAlign="center" backgroundColor="#24C743" 
			 chromeColor="#CCCCCC" fontFamily="Arial" color="#FFFFFF" fontWeight="bold" 
			 fontSize="11" top="35" id="startDevLabel"  top.viewingOnly="20" x.viewingOnly="333"/>


</s:Group>
