<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 creationComplete="startApp(event)" xmlns:utils="utils.*" >
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>

<s:states>
	<s:State name="default"/>	
	<s:State name="slicing" />
</s:states>
	
	<fx:Script>
		<![CDATA[
			import controls.FlowManager;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IHierarchicalCollectionView;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.Depot1;
			
			import spark.events.IndexChangeEvent;
			import spark.layouts.ColumnAlign;
			
			import utils.*;
			
			public static const UNCHECKED:String = 'cntryUnChecked';
			public static const CHECKED:String   = 'cntryChecked';			
			
			[bindable] 
			private var openItems:Object;
			private var cntryListLoaded : Boolean = false;	
			[Bindable] 
			private var selectionList:ArrayCollection;			
			private var checkedCount:uint;
			[bindable] 
			private var regList:ArrayCollection;
			
			
			[bindable] private var selDeviceAggLevel:int = 0;
			[bindable] private var batTypesActiveFlag:Boolean = false;
			[bindable] private var pwrTypesActiveFlag:Boolean = false;
			[bindable] private var chemTypesActiveFlag:Boolean = false;
			[bindable] private var devicesActiveFlag:Boolean = false;	
			
			private var deviceNamesFullList:ArrayCollection;
			
			public function setLabelDemand(tx:String):void {
				if (this.labelDemand) this.labelDemand.text = tx;
			}
			
			protected function cntryNames_resultHandler(event:ResultEvent):void
			{
				trace("cTree. cntryList loaded.");				
				var someCntries:ArrayCollection = this.cntryNames.lastResult as ArrayCollection;
				this.setDataList(someCntries);				
				
				sortData();
				//this.cntryListLoaded = true;
				//this.dispatchEvent(new Event("countryListLoaded", true));	
			}

			protected function cntryNames_faultHandler(event:FaultEvent):void
			{
				Alert.show("Could not read countryNames from DB", "Error cTree");
			}
				
			public function get count():uint
			{
				return checkedCount;
			}	
			
			public var labelText:String;		
			
			public function getDataList():ArrayCollection {
				var res:ArrayCollection = new ArrayCollection();
				
				var i:uint;				
				for (i = 0; i < selectionList.length; i++) {		
					if ((selectionList[i].active)&&(res.length <= 10)) {
						res.addItem({
							"namen"   : selectionList[i].namen, 
							"id"	  : selectionList[i].id, 
							"isRegion": selectionList[i].isRegion,
							"active"  : selectionList[i].active,
							"region"  : selectionList[i].region						 
						});
					};
				};		
				return res;	
			}		
			
			public function getRegionsDataList():ArrayCollection {
				if (this.regionsListGrid) {
					return this.regionsListGrid.getActiveDataList();
				} else 
					return new ArrayCollection();
			}
			
			//getActiveDataList
			
			
			//assign new data
			public function setDataList(data:ArrayCollection):void
			{					
				selectionList = new ArrayCollection();
				var res:ArrayCollection = data as ArrayCollection;				
				
				if (res.length > 0) {
					var i:uint;						
					for (i=0; i < res.length; i++) {							
						selectionList.addItem({
							"namen"     : res[i].namen, 
							"id"        : res[i].id, 
							"isRegion"  : res[i].isRegion, 
							"active"    :(res[i].active ? res[i].active : false),
							"region"    : res[i].region,
							"subRegion" : res[i].subRegion,
							"modified"  :(res[i].modified ? res[i].modified : false)
						});
					}	
				}						
				this.preserveRefresh();
			}			
			
			public function preserveRefresh():void {				
				if (this.cntryListGridADG.dataProvider is IHierarchicalCollectionView) {
					var openNodes:Object = IHierarchicalCollectionView(cntryListGridADG.dataProvider).openNodes;
					iCount = 0; // reset the counter					
					this.gc.refresh();					
					cntryListGridADG.dataProvider = gc;
					cntryListGridADG.validateNow();
					IHierarchicalCollectionView(cntryListGridADG.dataProvider).openNodes = openNodes;				
				};			
			}			
			
			public function reset():void
			{
				var i:uint;
				for (i=0; i<selectionList.length; i++)
					selectionList[i].active = false;				
				//this.preserveRefresh();
				//sortData();
			}
			
			import mx.controls.Alert;
			//events
			//when the component is created, set label name
			protected function startApp(event:FlexEvent):void
			{
				trace("creation complete in checkBox component");
				checkedCount = 0;				
				addEventListener(CCheckBoxRendererADG.INCR_COUNT, onIncrValue);
				addEventListener(CCheckBoxRendererADG.DECR_COUNT, onDecrValue);
				
				this.addEventListener(CCheckBoxGrid.CHECKED, onIncrValue);
				this.addEventListener(CCheckBoxGrid.UNCHECKED, onDecrValue);			
				
				this.addEventListener("demandAggChanged", updateChemistrySplit);				
				this.addEventListener("overSelection", cutOverSelections);
			}
			
			public var dataServiceNames:Depot1;
			public function initNames():void {
				trace("init names inside cTree");				
				cntryNames.token = this.dataServiceNames.getCountryListADG();		
			}
			
			public function initRegionNames():void {
				regionNames.token = this.dataServiceNames.getCountryList(1);
			}
			
			public function getDeviceNames():void {
				this.deviceNamesList.token = this.dataServiceNames.getDeviceNames();
			}
			
			protected function updateChemistrySplit(evt:Event):void {
				var z:Boolean = (!batTypesActiveFlag && !pwrTypesActiveFlag && !devicesActiveFlag);
				
				if (!z) {
					//this.chemistryActive.selected = z;
					this.chemTypesActiveFlag = z;
					this.chemTypes_C.enabled = this.chemTypesActiveFlag;
				};				
				this.dispatchEvent(new Event("refreshData_C", true));					
			}			
			
			//increment number of checked elements
			public var lastSelection:Object = {id:-1, namen:"null"};
			private function onIncrValue(e:Event):void
			{
				checkedCount++;
				if (checkedCount <= 10) {							
					if (cntryListGridADG.selectedItem) {
						this.lastSelection = {id:cntryListGridADG.selectedItem.id, 
											namen:cntryListGridADG.selectedItem.namen};
					};								
					dispatchEvent(new Event(CTree.CHECKED, true));					
				}  // (this.checkedCount > 10) 
				else {					
					this.dispatchEvent(new Event("overSelection", false));
				}
			}
			
			//decrement number of checked elements
			private function onDecrValue(e:Event):void
			{
				checkedCount--;				
				//if (checkedCount == 0)
					dispatchEvent(new Event(CTree.UNCHECKED, true));
			}
			
			//modified
			public function setScenarioCountries(scenarioData:ArrayCollection):void {				
				if (this.selectionList != null) {
					for (var k:uint = 0; k < scenarioData.length; k++)	{
						var cr:int = scenarioData.getItemAt(k).id; 
						for (var j:uint = 0; j < selectionList.length; j++)	{	
							if (cr == selectionList[j].id) { 
								selectionList[j].modified = true;
							};
						};
					};
				this.preserveRefresh();				
				};					
			}			
			
			public function resetScenarioCountries():void {
				if (this.selectionList != null) {
					for (var j:uint = 0; j < selectionList.length; j++)	selectionList[j].modified = false;				
					this.preserveRefresh();					
				};					
			}		
			
			protected function cutOverSelections(event:Event):void {
				var msg1:String = "You are not allowed to select more than 10 countries at once. \r\n" +
					"Please contact your manager if you have 2nd thoughts about this limitation";
				var msg2:String = "This tool can only display up to 10 countries at one time. \r\n" +
					"You have selected: " + checkedCount.toString() + "\r\n" +   					
					"Of your selected countries, 10 are displayed. To change the countries, modify your selection & click the UPDATE CHART button";				
				
				Alert.show(msg2, "Limit");
			}
			
			//when the link button is clicked, select all checkboxes
			protected function lnkAll_clickHandler(event:MouseEvent):void  {
				var i:uint;
				if (this.selectionList != null) {
					for (i = 0; i < selectionList.length; i++) selectionList[i].active = true;
					checkedCount = selectionList.length;				
					
					this.preserveRefresh();	
					dispatchEvent(new Event(CTree.CHECKED, true));
				};	
				this.cntryListGridADG.expandAll();
				
				this.sortData();
			}		
			
			//when the link button is clicked, de-select all checkboxes
			protected function delnkAll_clickHandler(event:MouseEvent):void {
				var i:uint;
				if (this.selectionList != null) {
					for (i = 0; i < selectionList.length; i++) selectionList[i].active = false;
					checkedCount = 0;				
														
					dispatchEvent(new Event(CTree.UNCHECKED, true));
				};
				this.sortData();
				this.preserveRefresh();			
			}		
			
			//used to override active selections
			public function activateSelections(data:ArrayCollection):void
			{
				var i:uint;
				if (this.selectionList != null) {
					for (i = 0; i < selectionList.length; i++)
						selectionList[i].active = data.getItemAt(i).active;					
									
					dispatchEvent(new Event(CTree.CHECKED, true));
				};
			}	
			
			
			public function formDataList_adg(data:Array):void {
				this.selectionList = new ArrayCollection(data);
				//this.preserveRefresh();	
			}		
			

			protected function regionListNames_faultHandler(event:FaultEvent):void
			{
				Alert.show("Could not read regionNames from DB", "Error cTree");
			}
			
			protected function regionListNames_resultHandler(event:ResultEvent):void
			{				
				regList = this.regionNames.lastResult as ArrayCollection;
				regList.filterFunction = filterRegions;
				regList.refresh();
				if (this.regionsListGrid) this.regionsListGrid.setDataList(this.regList);		
			}		
			
			
			
			[bindable] private var useCluster:Boolean = false;
			public function getUseCluster():Boolean {
				return this.useCluster;
			}
			
			private function filterRegions(item:Object):Boolean {		
				if (!useCluster)
					return ( (item.id < 108) || (item.id == 11111) );
				else
					return ( (item.id > 999) || (item.id == 11111) );
			}
			
			protected function radiobutton3_clickHandler(event:MouseEvent):void
			{
				this.useCluster = !this.useCluster;
				this.dispatchEvent(new Event("updateClusterType", true));				
				regList.refresh();
				this.regionsListGrid.setDataList(regList);					
			}	
			
			public function setRegionsGridEnabled(flag:Boolean):void {				
				this.regionsListGrid.enabled = flag;
			}
			
			[bindable] public var selectedIndi:int;		
			protected function devicesActive_clickHandler(event:MouseEvent):void
			{				
				selDeviceAggLevel = int(this.splitByDevices_C.selectedValue);
				this.flowManager.setSelDeviceAggLevel(selDeviceAggLevel);
				
				if (this.selDeviceAggLevel == 0) this.flowManager.selDemandIndi = 300; // cntryLevel 
				if (this.selDeviceAggLevel == 1) this.flowManager.selDemandIndi = 301; // deviceLevel
				if (this.selDeviceAggLevel == 2) this.flowManager.selDemandIndi = 302; // categoryLevel				
				
				devicesActiveFlag = (this.selDeviceAggLevel > 0);
				this.flowManager.setDevicesActiveFlag(this.devicesActiveFlag);		
				
				this.deviceListDrop_C.enabled = this.devicesActiveFlag;					
				this.deviceNamesFullList.refresh();		
				
				if (this.selDeviceAggLevel > 0) { 
					this.deviceListDrop_C.selectedIndex = 2 - this.selDeviceAggLevel; // should be cate 0; dev - 1;
					this.deviceListDrop_C_changeHandler(null);		
				} else {
					this.flowManager.setSelDevice(0);
				};
					
				this.dispatchEvent(new Event("demandAggChanged", false));				
			}
			
			[bindable] private var flowManager:FlowManager;
			public function setMasterTab(flowMngr:FlowManager):void {
				this.flowManager = flowMngr;
			}		
		
			protected function deviceNamesList_resultHandler(event:ResultEvent):void
			{
				deviceNamesFullList = this.deviceNamesList.lastResult as ArrayCollection;
				this.deviceNamesFullList.filterFunction = this.filterDeviceList;
				this.deviceNamesFullList.refresh();
				this.deviceListDrop_C.dataProvider = this.deviceNamesFullList;
			}
			
			private var showAtDeviceLevel:int = 0;
			private function filterDeviceList(item:Object):Boolean {
				var f:Boolean = false;
				if  ( (selDeviceAggLevel == 1) ) // &&(item.id < 100 ) )
					f = true;
				else 
				if  ( (selDeviceAggLevel == 2)&&(item.id > 100)  )
						f = true;
				return f;
			}	
			
			protected function deviceListDrop_C_creationCompleteHandler(event:FlexEvent):void
			{
				getDeviceNames();
			}
			
			[bindable] private var selBatType:int = 0;
			[bindable] private var selPwrType:int = 0;
			[bindable] private var selChemType:int = 1;
			
			protected function pwrTypes_clickHandler(event:MouseEvent):void
			{
				this.selPwrType = int(this.pwrTypes_C.selectedValue);
				this.flowManager.setSelPwrType(this.selPwrType);
				this.flowManager.setSelBatType(0);
				
				this.pwrTypesActiveFlag = (this.selPwrType > 0);	
				this.flowManager.setPwrTypesActiveFlag(this.pwrTypesActiveFlag);				
				/*if (this.selPwrType == 0) { */ 
					this.dispatchEvent(new Event("demandAggChanged", false)); 
				// } else {				
					this.dispatchEvent(new Event("refreshData_C", true));
				//};
				//exoIndi_clickHandler(null);
			}		
			
			protected function batTypes_clickHandler(event:MouseEvent):void
			{
				this.selBatType = int(this.batTypes_C.selectedValue);				
				this.flowManager.setSelBatType(this.selBatType);
				this.flowManager.setSelPwrType(0);
				this.batTypesActiveFlag = (this.selBatType > 0);	
				this.flowManager.setBatTypesActiveFlag(this.batTypesActiveFlag);
				
				/*if (this.selBatType == 0) {	
					this.dispatchEvent(new Event("demandAggChanged", false)); 
				} else {*/				
					this.dispatchEvent(new Event("refreshData_C", true));
				//};				
			}
			
			protected function chemTypesActive_clickHandler(event:MouseEvent):void
			{
				this.chemTypesActiveFlag = (int(this.splitByChemistry_C.selectedValue) > 0);
				this.flowManager.setChemTypesActiveFlag(this.chemTypesActiveFlag);
				
				this.chemTypes_C.enabled = this.chemTypesActiveFlag;				
				//if (this.chemTypesActiveFlag) {					
				this.pwrTypesActiveFlag = (!this.chemTypesActiveFlag) && (selBatType > 0);					
				this.pwrTypes_C.enabled = !this.chemTypesActiveFlag;
				
				this.batTypesActiveFlag = (!this.chemTypesActiveFlag) && (selPwrType > 0);
				this.batTypes_C.enabled = !this.chemTypesActiveFlag;
				
				this.devicesActiveFlag = (!this.chemTypesActiveFlag) && (this.selDeviceAggLevel > 0);
				this.flowManager.setDevicesActiveFlag(this.devicesActiveFlag);				
				this.deviceListDrop_C.enabled = !this.chemTypesActiveFlag;					
				
				this.radioDevCat_C.enabled = !this.chemTypesActiveFlag;
				this.radioDevSingle_C.enabled = !this.chemTypesActiveFlag;
				this.radioDevAll_C.enabled = !this.chemTypesActiveFlag;
				//};
				
				this.dispatchEvent(new Event("refreshData_C", true));
			}
			
			protected function chemTypes_clickHandler(event:MouseEvent):void
			{
				this.selChemType = int(this.chemTypes_C.selectedValue);
				this.flowManager.setSelChemType(this.selChemType);
				
				this.dispatchEvent(new Event("updateCharts_C", true));				
				//need to get data for chemistry?				
				this.chemTypesActiveFlag = (this.selChemType > 0);
				this.flowManager.setChemTypesActiveFlag(this.chemTypesActiveFlag);
				//need to disable pwrSplit and sizeSplit accordingly
				//this.chemTypes.enabled = this.chemTypesActiveFlag;
			}			

			[bindable] public var selDevice:int = 1; 
			protected function deviceListDrop_C_changeHandler(event:IndexChangeEvent):void
			{
				this.selDevice = deviceListDrop_C.selectedItem.id;
				this.flowManager.setSelDevice(this.selDevice);
				this.flowManager.setSelDeviceNamen(this.deviceListDrop_C.selectedItem.namen);
				
				this.dispatchEvent(new Event("refreshDeviceID_C", true));
				// dispatch refresh on tabE
			}

			// counter to maintain the uid
			private var iCount:int = 0;
			private function grpObjFunc(value:String):Object {
				// we need to assign the same uid for same grouped Objects
				// use count or value + count
				return {uid: value + iCount++};
			}			
			
			/*private function positionCompareFunction(a:Object, b:Object, z:Object):int
			{
				return  int((a.region + "_" +  a.id) == (b.region + "_" + b.id));
			}*/
			

			/*protected function cntryListGridADG_creationCompleteHandler(event:FlexEvent):void
			{
				sortData();
			}*/

			private function sortData():void {
				var sort:Sort = new Sort();
				var sortField1:SortField = new SortField("region");
				var sortField2:SortField = new SortField("subRegion");
				var sortField3:SortField = new SortField("id");
				
				sort.fields = [sortField1, sortField2, sortField3];        
				// Set 'Product' as the field to be sorted on
				cntryListGridADG.dataProvider.sort = sort;   
				// Add the sort to the dataProvider of the dataGrid
				gc.source.refresh();              // Refresh the GroupCollection
			}
			
		]]>
	</fx:Script>

	
	<fx:Declarations>
		<s:RadioButtonGroup id="splitByDevices_C" />
		<s:RadioButtonGroup id="splitByChemistry_C" />
		<s:RadioButtonGroup id="granGroup_C" />
		<s:RadioButtonGroup id="pwrTypes_C" />		
		<s:RadioButtonGroup id="batTypes_C" />
		<s:RadioButtonGroup id="chemTypes_C" enabled="false" />
		
		
		<s:CallResponder id="cntryNames" result="cntryNames_resultHandler(event)" 
						 fault="cntryNames_faultHandler(event)" />
		<s:CallResponder id="regionNames" result="regionListNames_resultHandler(event)"
						 fault="regionListNames_faultHandler(event)" />		
		<s:CallResponder id="deviceNamesList" result="deviceNamesList_resultHandler(event)" />	
		
	</fx:Declarations>
	
	
	<s:HGroup height="20" top="0" left="0" right="0" verticalAlign="middle" width="100%" includeIn="default">
		<s:Label text="Countries" width="70%" fontWeight="normal" fontSize="11" id="lblName" height="100%" 
				 verticalAlign="middle" fontStyle="normal"/>
		<mx:LinkButton label="Select all" width="15%" textAlign="right" id="lnkAll" 
					   click="lnkAll_clickHandler(event)" color="#0072BC" fontWeight="normal" 
					   height="100%" fontSize="11"/>
		<mx:LinkButton label="DeselectAll" width="15%" textAlign="right" id="rmAll" 
					   click="delnkAll_clickHandler(event)" color="#0072BC" fontWeight="normal"
					   height="100%" fontSize="11"/>
	</s:HGroup>

	<!--
	
	<s:BorderContainer width="100%" height="20" borderVisible="false">
		<s:layout>
			<s:HorizontalLayout gap="0" verticalAlign="justify"/>
		</s:layout>
		<s:Label x="95" verticalCenter="0" width="190" height="100%" fontFamily="Arial" fontSize="10" verticalAlign="middle" textAlign="center"/>
		<s:Label x="302" y="5" text="Altered?" width="40" height="100%" fontFamily="Arial" fontSize="10" verticalAlign="middle" textAlign="center"/>
	</s:BorderContainer>
	
	!-->
	
	<s:BorderContainer width="100%" height="450" borderVisible="false" includeIn="slicing">
		<s:layout>
			<s:VerticalLayout paddingLeft="10"/>
		</s:layout>
		<s:Label  id="labelDemand" text="Step 3: select battery parameters" 
				  verticalAlign="middle" fontStyle="normal" fontSize="13" top="10" left="10" fontFamily="Arial" 
				  color="#007E9D" width="100%"/>		
		<s:Label text="Devices Aggeragtion Level" id="selDeviceLabel" fontSize="11" fontStyle="italic" top="40" left="11" fontFamily="Arial" width="100%" backgroundColor="#FFFFFF" 
				 backgroundAlpha="1.0" chromeColor="#FFFFFF"/>
		<s:BorderContainer x="33" backgroundAlpha="0.0" borderVisible="false" top="34" width="100%" height="80">
			<s:layout>
				<s:VerticalLayout gap="1"/>
			</s:layout>
			
			<s:RadioButton x="201" y="92"  value="0" label="All devices (aggregate)" groupName="splitByDevices_C" 
						   selected="true" click="devicesActive_clickHandler(event)" fontFamily="Arial" fontSize="11" id="radioDevAll_C"/>
			<s:RadioButton x="201" y="118" value="2" label="Device category" groupName="splitByDevices_C" 
						   selected="false" click="devicesActive_clickHandler(event)" fontFamily="Arial" fontSize="11" id="radioDevCat_C"/>
			<s:RadioButton value="1" label="Single device" groupName="splitByDevices_C" 
						   selected="false" click="devicesActive_clickHandler(event)" fontFamily="Arial" fontSize="11" id="radioDevSingle_C"/>			
			
			<s:DropDownList width="100%" id="deviceListDrop_C"	 creationComplete="deviceListDrop_C_creationCompleteHandler(event)"						
							labelField="namen" selectedIndex="1" height="20" top="29" left="472" 
							enabled="false" fontFamily="Arial" fontSize="11" contentBackgroundAlpha="0.9" 
							borderVisible="false" change="deviceListDrop_C_changeHandler(event)"/>
		
		</s:BorderContainer>
		<s:Label text="Battery type/size" id="selDeviceLabel1" fontStyle="italic" fontSize="11"
				 verticalAlign="middle" fontFamily="Arial" top="169" width="100%" backgroundColor="#FFFFFF" backgroundAlpha="1.0" chromeColor="#FFFFFF"/>
		<s:BorderContainer fontSize="11" fontFamily="Verdana" top="70" borderVisible="false" backgroundAlpha="0.0" id="sizeBorder" width="210" height.default="70" height="80">
			<s:layout>
				<s:TileLayout horizontalGap="5" verticalGap="1"/>
			</s:layout>
			
			<s:RadioButton x="269" y="75" label="All battery sizes"  value="0" groupName="batTypes_C"						   
						   selected="true" fontFamily="Arial" fontSize="11" enabled="true"
						   click="batTypes_clickHandler(event)"/>
			<s:RadioButton x="269" y="75" label="AAA"  value="3" groupName="batTypes_C" selected="false" fontFamily="Arial" fontSize="11" enabled="true"
						   click="batTypes_clickHandler(event)"/>
			<s:RadioButton x="318" y="75" label="AA" value="5" groupName="batTypes_C" fontFamily="Arial" fontSize="11" enabled="true" selected="false"
						   click="batTypes_clickHandler(event)"/>
			<s:RadioButton x="359" y="75" label="C"  value="1" groupName="batTypes_C" selected="false"  fontFamily="Arial" fontSize="11" enabled="true"
						   click="batTypes_clickHandler(event)"/>
			<s:RadioButton x="391" y="75" label="D"  value="2" groupName="batTypes_C"  fontFamily="Arial" fontSize="11" enabled="true" selected="false"
						   click="batTypes_clickHandler(event)"/>
			<s:RadioButton x="423" y="75" label="9V"  value="4" groupName="batTypes_C" fontFamily="Arial" fontSize="11" enabled="true" selected="false"
						   click="batTypes_clickHandler(event)"/>
			<s:RadioButton x="430" y="75" label="Hearing Aid"  value="6" groupName="batTypes_C"  fontFamily="Arial" fontSize="11" enabled="false" selected="false"
						   click="batTypes_clickHandler(event)"/>
			<s:RadioButton x="440" y="75" label="Coin And Button"  value="7" groupName="batTypes_C" fontFamily="Arial" fontSize="11" enabled="false" selected="false"
						   click="batTypes_clickHandler(event)"/>	
			
		</s:BorderContainer>
		
		<s:Label text="Battery Types" id="selDeviceLabel0" fontStyle="italic" fontSize="11" left="13" fontFamily="Arial" top="104" width="100%" backgroundColor="#FFFFFF" backgroundAlpha="1.0" chromeColor="#FFFFFF"/>
		<s:BorderContainer width="100%" x="32" fontSize="11" fontFamily="Verdana" top="70" borderVisible="false" backgroundAlpha="0.0" id="pwrTypesBorder" height.default="67" height="80">
			<s:layout>
				<s:VerticalLayout gap="1"/>
			</s:layout>
			<s:RadioButton x="44" y="50" label="All battery types" value="0" groupName="pwrTypes_C" selected="true"
						  fontSize="11" fontFamily="Arial" enabled="true" click="pwrTypes_clickHandler(event)"/>	
			<s:RadioButton x="44" y="75" label="  Disposable (DPP)" value="101" groupName="pwrTypes_C" selected="false"
						   fontSize="11" fontFamily="Arial" enabled="true" click="pwrTypes_clickHandler(event)"/>
			<s:RadioButton x="44" y="93" label="  Round Cell Rechargeable (RCR)" value="102" groupName="pwrTypes_C"
						 fontSize="11" fontFamily="Arial" selected="false" enabled="true" click="pwrTypes_clickHandler(event)"/>			
			<s:RadioButton x="44" y="105" label="  Built-in Rechargeable" value="103" groupName="pwrTypes_C"
						 fontSize="11" fontFamily="Arial" selected="false" enabled="false"/>
		</s:BorderContainer>

		
		<s:Label text="Chemistry" id="selDeviceLabel2" fontStyle="italic" fontSize="11" fontFamily="Arial" x="10" top="244" width="100%" backgroundColor="#FFFFFF" backgroundAlpha="1.0" chromeColor="#FFFFFF"/>

		<s:BorderContainer width="100%" height="20" borderVisible="false">	
			<s:layout>
				<s:TileLayout/>
			</s:layout>
			<s:RadioButton value="0" label="All chemistry" groupName="splitByChemistry_C" enabled="true" 
						   selected="true" y="10" top="70" click="chemTypesActive_clickHandler(event)"/>
			<s:RadioButton x="575" value="1" label="Use split by:" groupName="splitByChemistry_C" enabled="true" 
						   top="70" click="chemTypesActive_clickHandler(event)"/>

		</s:BorderContainer>
			
		<s:BorderContainer x="603" fontFamily="Verdana" fontSize="11" top="91" borderVisible="false" backgroundAlpha="0.0" height.default="69" height="60" width="100%">			
			<s:layout>
				<s:TileLayout/>
			</s:layout>
			<s:RadioButton label="Alkaline" groupName="chemTypes_C" value="1" selected="true" 
						   fontFamily="Arial" fontSize="11" click="chemTypes_clickHandler(event)"/>
			<s:RadioButton label="Lithium" groupName="chemTypes_C" value="3"  fontFamily="Arial" fontSize="11" click="chemTypes_clickHandler(event)"/>
			<s:RadioButton x="629" y="106" label="Zinc" groupName="chemTypes_C" value="2" fontFamily="Arial" fontSize="11" click="chemTypes_clickHandler(event)"/>
			<s:RadioButton x="629" y="106" label="Hearing Aid " groupName="chemTypes_C" value="4" fontFamily="Arial" fontSize="11" enabled="false" click="chemTypes_clickHandler(event)"/>
			<s:RadioButton x="629" y="106" label="Coin and Button" groupName="chemTypes_C" value="5" fontFamily="Arial" fontSize="11" enabled="false" click="chemTypes_clickHandler(event)"/>	
			
		</s:BorderContainer>
		
	</s:BorderContainer>
	
	<mx:AdvancedDataGrid id="cntryListGridADG" designViewDataType="tree" height="100%" 
						 horizontalCenter="0"  width="100%" 
						 folderOpenIcon="{null}" folderClosedIcon="{null}"  
						 defaultLeafIcon="{null}" 
						 showHeaders="false" 
						 top="20" fontFamily="Arial" fontSize="11" 
						 borderVisible="true" dropShadowVisible="false" 
						 verticalAlign="middle" textAlign="left" borderColor="#C8C8C8" 
						 verticalGridLineColor="#C8C8C8" verticalGridLines="false" includeIn="default"	 color="#000000">
		<mx:dataProvider>
			<mx:GroupingCollection2 id="gc" source="{this.selectionList}">				
				<mx:Grouping groupingObjectFunction="grpObjFunc" >
					<mx:GroupingField name="region"/>									
					<mx:GroupingField name="subRegion"/>
				</mx:Grouping>				
			</mx:GroupingCollection2>
		</mx:dataProvider>  
		<mx:columns>			
			<mx:AdvancedDataGridColumn headerText="" dataField="namen" sortable="false"
									    width="150" sortDescending="false"/>			
			<mx:AdvancedDataGridColumn headerText="Use?" dataField="active" width="40" 
									   id="inputas" sortable="false" textAlign="center"/>
			<mx:AdvancedDataGridColumn headerText="Is changed" dataField="modified" width="40"
									   id="modFlag" sortable="false" textAlign="center"	/> 
		</mx:columns>
		<mx:rendererProviders>
			<mx:AdvancedDataGridRendererProvider column="{inputas}" columnSpan="1" depth="3"
												 renderer="utils.CCheckBoxRendererADG"/>
			<mx:AdvancedDataGridRendererProvider column="{modFlag}" columnSpan="1" depth="3"
												 renderer="utils.CCheckBoxRendererADG2"/>
		</mx:rendererProviders>
	</mx:AdvancedDataGrid>	
		
	<s:BorderContainer width="100%" height="30" borderVisible="false" includeIn="slicing">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
		<s:Label x="11" y="344" text="Grouping by" id="selDeviceLabel3"
				 fontStyle="normal" fontSize="11" height="100%" width="30%" fontFamily.default="Arial"/>
		<s:RadioButton x="64" y="342" label="Regions" groupName="regionType" selected="true" 
					   enabled="true" value="0" click="radiobutton3_clickHandler(event)" height="100%" width="35%" fontFamily="Arial" fontSize="12"/>
		<s:RadioButton x="136" y="342" label="Clusters" groupName="regionType" enabled="true"
					   value="1" click="radiobutton3_clickHandler(event)" height="100%" width="35%" fontFamily="Arial" fontSize="12"/>
	</s:BorderContainer>
	<s:BorderContainer x="21" y="563" width="100%" height="40%" borderVisible="false" includeIn="slicing">				
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>		
		<utils:CCheckBoxGrid id="regionsListGrid" enabled="true"
							 labelText="Regions"  top="373" left="10" width="100%" height="100%" 
							 fontSize="11" fontFamily="Arial" creationComplete="initRegionNames()">
		</utils:CCheckBoxGrid>			
	</s:BorderContainer>
	
</s:Group>

