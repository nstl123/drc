<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" 
		 xmlns:utils="utils.*"
		 creationComplete="startApp(event)"
		 xmlns:depot1="services.depot1.*" 
		 xmlns:depot21="services.depot21.*"
		 >
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>

	<fx:Script>
		<![CDATA[
		]]>
	</fx:Script>

	
	<fx:Script>
		<![CDATA[
			import controls.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.Depot1;
			
			import spark.events.IndexChangeEvent;
			
			import utils.helper;
			
			public var dataServiceNames:Depot1;
			public var dataServiceData:Depot21;
			
			[bindable] private var workingScenarioID:int;
			private var hlp:helper;
			[bindable] private var indicatorsList:ArrayCollection;
			
			public static const CNTRYCHANGED:String = "CNTRY_CHANGED";
			public static const CNTRYUNCHANGED:String = "CNTRY_UNCHANGED"			
			
			
			protected function startApp(event:FlexEvent):void {
				trace("app start panelTab B");			
				hlp = new helper();				
			}
			
			public function initNames():void {
				trace("init names inside panel B");				
				indicatorsNamesList.token = this.dataServiceNames.getIndicatorNames();
				countryListNames.token = this.dataServiceNames.getCountryList();
			}
			
			public function setWorkingScenario(nv:int):void {
				this.workingScenarioID = nv;
				this.testGrid.setWorkingScenario(this.workingScenarioID);				
			}					
			
			protected function countryListNames_resultHandler(event:ResultEvent):void
			{
				this.countryListGrid.dataList = this.countryListNames.lastResult as ArrayCollection;
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				//this.countryListNames.token = this.dataService.getCountryList();
			}
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				var selCntries:Object = this.countryListGrid.dataList;
				this.dispatchEvent(new Event(tabE6.CNTRYCHANGED, true));
			}
			// ----- COMMUNICATION PART ---------------/////			
			public function getDataList():ArrayCollection {
				return this.countryListGrid.dataList;			
			}
			
			public function setDataList(data:ArrayCollection):void {
				this.countryListGrid.dataList = data;
			}		
			
			public function setDataListActive(data:ArrayCollection):void {				
				this.countryListGrid.activateSelections(data);
			}
			
			public function setIndicatorsList(evt:ResultEvent):void {
				this.indicatorsList = this.indicatorsNamesList.lastResult;
				this.indicatorsList.filterFunction = filterB;
				this.indicatorsList.refresh();
				this.indicatorsBox.dataProvider = this.indicatorsList;			
			}
			
			private function filterB(item:Object):Boolean {			
				// here should be all indis within ID range
				var fl:Boolean = true;				
				if ((item.id == 301) || (item.id == 302)) {					
					fl = true
				}  else fl = false;				
				return fl;
			}					
			
			protected function getSomeData_clickHandler(event:MouseEvent):void
			{
				//send query to DB mit countryIDs and IndiID
				var countryIDs:Array = this.countryListGrid.getActiveDataList().source;				
				var tmp:Array = this.hlp.formStringFromIDs(countryIDs);				
				trace("calling demand token");
				this.getDemandData.token = this.dataServiceData.getDemandData(tmp, this.workingScenarioID, aggType);
				this.cursorManager.setBusyCursor();
			}
			
			[bindable] private var selectedIndi:int;
			[bindable] private var currentData:ArrayCollection = new ArrayCollection();
			[bindable] private var aggType:int = 0;
			
			protected function indicatorsBox_changeHandler(event:IndexChangeEvent):void {
				this.selectedIndi = this.indicatorsBox.selectedItem.id;
				if (this.indicatorsBox.selectedItem.hasSplitByDevices == 1) {
					aggType = 0;
				} else {
					aggType = 1;
				};				
			}			
			
			protected function getDemandData_resultHandler(event:ResultEvent):void
			{
				currentData = this.getDemandData.lastResult as ArrayCollection;				
				this.testChart.setData(currentData); // transformation is performed inside chart component
				this.testGrid.setData(currentData);
				this.cursorManager.removeBusyCursor();
			}

			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<depot1:Depot1 id="depot1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
					   showBusyCursor="true"/>
		<depot21:Depot21 id="depot21" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
						 showBusyCursor="true"/>
		
		<s:CallResponder id="countryListNames"  result="countryListNames_resultHandler(event)"/>
		<s:CallResponder id="indicatorsNamesList" result="setIndicatorsList(event)"/>
		<s:CallResponder id="getDemandData" result="getDemandData_resultHandler(event)" />
		
	</fx:Declarations>
	<utils:CCheckBoxGrid id="countryListGrid" width="290" height="95%" top="50" left="0">
	</utils:CCheckBoxGrid>
	
	<s:BorderContainer width="300" height="25" top="0" x="0">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>		
		<s:Label text="Tab E. Demand" height="100%" width="50%" x="61" y="38"/>		
		<s:Button label="notify E" click="button2_clickHandler(event)" width="50%" height="100%"/>			
	</s:BorderContainer>	
	
	<utils:CTwoAxisChart x="298" y="87" width="556" height="260" id="testChart">
	</utils:CTwoAxisChart>
	<utils:CInteractiveGrid x="297" y="355" width="557" height="250" id="testGrid">
	</utils:CInteractiveGrid>
	<s:DropDownList x="304" y="50" width="300" id="indicatorsBox"
					labelField="namen" change="indicatorsBox_changeHandler(event)"></s:DropDownList>
	<s:Button x="660" y="36" label="getSomeData" id="getSomeData" click="getSomeData_clickHandler(event)"/>
</s:Group>
