<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 creationComplete="startApp(event)" xmlns:utils="utils.*" >
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>

	<fx:Script>
		<![CDATA[
			
			import mx.collections.ArrayCollection;
			import mx.collections.IHierarchicalCollectionView;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.Depot1;
			
			import spark.layouts.ColumnAlign;
			
			import utils.*;
			
			public static const UNCHECKED:String = 'cntryUnChecked';
			public static const CHECKED:String   = 'cntryChecked';			
			
			[bindable] 
			private var openItems:Object;
			private var cntryListLoaded : Boolean = false;	
			[Bindable] 
			private var selectionList:ArrayCollection;			
			private var checkedCount:uint;
			[bindable] 
			private var regList:ArrayCollection;
			
			protected function cntryNames_resultHandler(event:ResultEvent):void
			{
				trace("cTree. cntryList loaded.");				
				var someCntries:ArrayCollection = this.cntryNames.lastResult as ArrayCollection;
				this.setDataList(someCntries);				
				
				//this.cntryListLoaded = true;
				//this.dispatchEvent(new Event("countryListLoaded", true));	
			}

			protected function cntryNames_faultHandler(event:FaultEvent):void
			{
				Alert.show("Could not read countryNames from DB", "Error cTree");
			}
				
			public function get count():uint
			{
				return checkedCount;
			}	
			
			public var labelText:String;		
			
			public function getDataList():ArrayCollection {
				var res:ArrayCollection = new ArrayCollection();
				
				var i:uint;				
				for (i = 0; i < selectionList.length; i++) {		
					if (selectionList[i].active) {
						res.addItem({
							"namen"   : selectionList[i].namen, 
							"id"	  : selectionList[i].id, 
							"isRegion": selectionList[i].isRegion,
							"active"  : selectionList[i].active,
							"region"  : selectionList[i].region						 
						});
					};
				};		
				return res;	
			}		
			
			public function getRegionsDataList():ArrayCollection {
				return this.regionsListGrid.getActiveDataList();
			}
			
			//getActiveDataList
			
			
			//assign new data
			public function setDataList(data:ArrayCollection):void
			{					
				selectionList = new ArrayCollection();
				var res:ArrayCollection = data as ArrayCollection;				
				
				if (res.length > 0) {
					var i:uint;						
					for (i=0; i < res.length; i++) {							
						selectionList.addItem({
							"namen"   : res[i].namen, 
							"id"      : res[i].id, 
							"isRegion": res[i].isRegion, 
							"active"  :(res[i].active ? res[i].active : false),
							"region"  : res[i].region });
					}	
				}		
				this.preserveRefresh();
			}			
			
			public function preserveRefresh():void {
				//adg.dataProvider is IHierarchicalCollectionView)
				//if (this.cntryListGridADG.dataProvider is IHierarchicalCollectionView) {
					//var openNodes:Object = IHierarchicalCollectionView(cntryListGridADG.dataProvider).openNodes;
				this.gc.refresh();
					//adg2.dataProvider = gc;
					//adg2.validateNow();
				//IHierarchicalCollectionView(cntryListGridADG.dataProvider).openNodes = openNodes;				
			}			
			
			public function reset():void
			{
				var i:uint;
				for (i=0; i<selectionList.length; i++)
					selectionList[i].active = false;				
				//this.preserveRefresh();				
			}
			
			import mx.controls.Alert;
			//events
			//when the component is created, set label name
			protected function startApp(event:FlexEvent):void
			{
				trace("creation complete in checkBox component");
				checkedCount = 0;				
				addEventListener(CCheckBoxRendererADG.INCR_COUNT, onIncrValue);
				addEventListener(CCheckBoxRendererADG.DECR_COUNT, onDecrValue);
				
				this.addEventListener(CCheckBoxGrid.CHECKED, onIncrValue);
				this.addEventListener(CCheckBoxGrid.UNCHECKED, onDecrValue);
			}
			
			public var dataServiceNames:Depot1;
			public function initNames():void {
				trace("init names inside cTree");				
				cntryNames.token = this.dataServiceNames.getCountryListADG();				
				regionNames.token = this.dataServiceNames.getCountryList(1);
			}
			
			//increment number of checked elements
			private function onIncrValue(e:Event):void
			{
				checkedCount++;				
				//if (checkedCount == 1)
					dispatchEvent(new Event(CTree.CHECKED, true));
			}
			
			//decrement number of checked elements
			private function onDecrValue(e:Event):void
			{
				checkedCount--;				
				//if (checkedCount == 0)
					dispatchEvent(new Event(CTree.UNCHECKED, true));
			}
			
			//when the link button is clicked, select all checkboxes
			protected function lnkAll_clickHandler(event:MouseEvent):void
			{
				var i:uint;
				if (this.selectionList != null) {
					for (i = 0; i < selectionList.length; i++)
						selectionList[i].active = true;
					checkedCount = selectionList.length;				
					
					this.preserveRefresh();	
					dispatchEvent(new Event(CTree.CHECKED, true));
				};				
			}		
			
			//when the link button is clicked, de-select all checkboxes
			protected function delnkAll_clickHandler(event:MouseEvent):void
			{
				var i:uint;
				if (this.selectionList != null) {
					for (i = 0; i < selectionList.length; i++)
						selectionList[i].active = false;
					checkedCount = 0;
					
					this.preserveRefresh();									
					dispatchEvent(new Event(CTree.UNCHECKED, true));
				};
			}		
			
			//used to override active selections
			public function activateSelections(data:ArrayCollection):void
			{
				var i:uint;
				if (this.selectionList != null) {
					for (i = 0; i < selectionList.length; i++)
						selectionList[i].active = data.getItemAt(i).active;					
					//this.preserveRefresh(data[0]["openItems"]);	
					dispatchEvent(new Event(CTree.CHECKED, true));
				};
			}
		
			public function formDataList_adg(data:Array):void {
				this.selectionList = new ArrayCollection(data);
				//this.preserveRefresh();	
			}			
			
			// counter to maintain the uid
			private var iCount:int = 0;
			private function grpObjFunc(value:String):Object {
				// we need to assign the same uid for same grouped Objects
				// use count or value + count
				return {uid: value + iCount++};
			}
			

			protected function regionListNames_faultHandler(event:FaultEvent):void
			{
				Alert.show("Could not read regionNames from DB", "Error cTree");
			}
			
			protected function regionListNames_resultHandler(event:ResultEvent):void
			{				
				regList = this.regionNames.lastResult as ArrayCollection;
				regList.filterFunction = filterRegions;
				regList.refresh();
				this.regionsListGrid.setDataList(this.regList);		
			}		
			
			[bindable] private var useCluster:Boolean = false;
			public function getUseCluster():Boolean {
				return this.useCluster;
			}
			
			private function filterRegions(item:Object):Boolean {		
				if (!useCluster)
					return (item.id < 108);
				else
					return (item.id > 999);
			}
			
			protected function radiobutton3_clickHandler(event:MouseEvent):void
			{
				this.useCluster = !this.useCluster;
				this.dispatchEvent(new Event("updateClusterType", true));				
				regList.refresh();
				this.regionsListGrid.setDataList(regList);	
			}	
		]]>
	</fx:Script>

	
	<fx:Declarations>
		<s:CallResponder id="cntryNames" result="cntryNames_resultHandler(event)" 
						 fault="cntryNames_faultHandler(event)" />
		<s:CallResponder id="regionNames" result="regionListNames_resultHandler(event)"
						 fault="regionListNames_faultHandler(event)" />
	</fx:Declarations>
	
	
	<s:HGroup height="20" top="0" left="0" right="0" verticalAlign="middle" width="100%">
		<s:Label text="Label" width="70%" fontWeight="normal" fontSize="11" id="lblName" height="100%" 
				 verticalAlign="middle" fontStyle="italic"/>
		<mx:LinkButton label="Select all" width="15%" textAlign="right" id="lnkAll" 
					   click="lnkAll_clickHandler(event)" color="#1A69D5" fontWeight="normal" 
					   height="100%" fontSize="11"/>
		<mx:LinkButton label="deSelectAll" width="15%" textAlign="right" id="rmAll" 
					   click="delnkAll_clickHandler(event)" color="#1A69D5" fontWeight="normal"
					   height="100%" fontSize="11"/>
	</s:HGroup>
	
	<mx:AdvancedDataGrid id="cntryListGridADG" designViewDataType="tree" height="100%" 
						 horizontalCenter="0"  width="100%" 
						 folderOpenIcon="{null}" folderClosedIcon="{null}"  
						 defaultLeafIcon="{null}" showHeaders="false" top="20">
		<mx:dataProvider>
			<mx:GroupingCollection2 id="gc" source="{this.selectionList}">				
				<mx:Grouping>
					<mx:GroupingField name="region"/>									
				</mx:Grouping>				
			</mx:GroupingCollection2>
		</mx:dataProvider>  
		<mx:columns>
			<mx:AdvancedDataGridColumn headerText="Geography" dataField="namen" sortable="false"
									    width="80"/>			
			<mx:AdvancedDataGridColumn headerText="use" dataField="active" width="20" id="inputas"
									  sortable="false"/>
		</mx:columns>
		<mx:rendererProviders>
			<mx:AdvancedDataGridRendererProvider column="{inputas}" columnSpan="1" depth="2"
												 renderer="utils.CCheckBoxRendererADG"/>
		</mx:rendererProviders>
	</mx:AdvancedDataGrid>	
		
	<s:BorderContainer width="100%" height="30">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
		<s:Label x="11" y="344" text="Groups:" id="selDeviceLabel3"
				 fontStyle="italic" fontSize="11" height="100%" width="30%"/>
		<s:RadioButton x="64" y="342" label="Regions" groupName="regionType" selected="true" 
					   enabled="true" value="0" click="radiobutton3_clickHandler(event)" height="100%" width="35%"/>
		<s:RadioButton x="136" y="342" label="Clusters" groupName="regionType" enabled="true"
					   value="1" click="radiobutton3_clickHandler(event)" height="100%" width="35%"/>
	</s:BorderContainer>
	<s:BorderContainer x="21" y="563" width="100%" height="40%">				
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>		
		<utils:CCheckBoxGrid id="regionsListGrid"
							 labelText="Regions"  top="373" left="10" width="100%" height="100%">
		</utils:CCheckBoxGrid>			
	</s:BorderContainer>
	
</s:Group>

