<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:outputTab1="outputTab1.*" 
		 width="100%" height="100%"
		 xmlns:base="services.base.*"  
		 creationComplete="group1_creationCompleteHandler(event)" 
	>
	
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>

	<!-- for data efficiency, 
	
		 get all data at initial stage & store it locally,
	 	 then just query with selections; query time awfull for aggregated demand!!
		
		 however, for demand split, use query instead.
	!-->
	
	<fx:Declarations>
		<s:RadioButtonGroup id="batTypes"  enabled="false"/>
		<s:RadioButtonGroup id="pwrSource" enabled="false"/>		
		
		<base:Base id="base" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"			    
				   showBusyCursor="true"  />
		
		<s:CallResponder id="getCountriesList" result="cntryList_resultHandler(event)"/>
		<s:CallResponder id="getIndicatorNamesResult" result="getIndicatorNamesResult_resultHandler(event)"/>
		<s:CallResponder id="getOutputDataResult" result="getOutputDataResult_resultHandler(event)"/>		
		
	</fx:Declarations>
	
	<fx:Declarations>		
		<mx:CurrencyFormatter   id="stilius2" precision="2"
								rounding="nearest"
								decimalSeparatorTo="."
								thousandsSeparatorTo=","
								useThousandsSeparator="true"
								currencySymbol=""
								useNegativeSign="true"                  
								/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.ResultEvent;
			
			import utils.helper;
			
			[bindable] public var selectedCntry:int = 1;
			[bindable] public var selectedIndiIn:int = 1;
			[bindable] public var selectedIndiOut:int = 1;
			[bindable] public var selectedDevice:int = 1;
			[bindable] public var selectedBatType:int = 1;
			[bindable] public var selectedPwrType:int = 1;		
			[bindable] public var showSplitByDevices:Boolean = false;
			[bindable] public var showSplitByTypes:Boolean = false;
			[bindable] public var showSplitBySort:Boolean = false;
			
			[bindable] private var workingScenarioID:int = 0;
			[bindable] private var aggType:int = 0;
			
			public function setScenarioID(id:int):void {
				this.workingScenarioID = id;
			}
			
			public function getScenarioID():int {
				return this.workingScenarioID;
			} 
			
			public function startApp(event:FlexEvent):void
			{				
				this.getCountriesList.token = this.base.getCountryList();
				this.getIndicatorNamesResult.token = base.getIndicatorNames();
				
				this.addEventListener("cntrySelectionChanged", refreshData);
				this.addEventListener("typesSelectionChanged", refreshData);		
				this.addEventListener("indiSelectionChanged",  refreshData);
			}
			
			[Bindable] private var isFirstCall:Boolean = true;
			
			protected function refreshData(evt:Event):void {
				if ((this.isFirstCall)||(aggType > 0)) { // only for aggType==0 we call for data once					
					// $aggLevel, $scenarioID, $countryID, $indicatorID, $batTypeID, $pwrTypeID)
					getOutputDataResult.token = base.getOutputData(
						aggType, workingScenarioID, selectedCntry,
						selectedIndiOut, selectedBatType, selectedPwrType);		
					this.isFirstCall = false;
				} else {	
					filterCountries(); // filter funkction for viewing data					
				};
			}
			
			protected function cntryList_resultHandler(event:ResultEvent):void
			{
				var rez:ArrayCollection = new ArrayCollection();
				rez = ArrayCollection(this.getCountriesList.lastResult);
				cntryGrid.dataProvider = rez;
			}			
			// indicators array
			[Bindable] protected var indiRezOut:ArrayCollection = new ArrayCollection();			
			[Bindable] protected var indiRezIn:ArrayCollection = new ArrayCollection();
			
			protected function getIndicatorNamesResult_resultHandler(event:ResultEvent):void
			{
				var hlp:helper = new helper();
				hlp.splitIndisArray(getIndicatorNamesResult.lastResult, indiRezIn, indiRezOut);
								
				indiGridOutput.dataProvider = indiRezOut;
				indiGridInput.dataProvider = indiRezIn;
				
				filterIndicators();
			}
			
			protected function batTypesChange_clickHandler(event:MouseEvent):void
			{
				selectedBatType = int(this.batTypes.selectedValue);
				this.dispatchEvent(new Event("typesSelectionChanged"));				
			}
			
			protected function pwrTypes_clickHandler(event:MouseEvent):void
			{
				selectedPwrType = int(this.pwrSource.selectedValue);
				this.dispatchEvent(new Event("typesSelectionChanged"));				
			}		
			
			protected function cntryGrid_changeHandler(event:ListEvent):void
			{
				selectedCntry = cntryGrid.selectedItem.id;				
				this.dispatchEvent(new Event("cntrySelectionChanged"));							
			}			
			
			protected function indiGridOut_changeHandler(event:ListEvent):void
			{				
				selectedIndiOut = 	this.indiGridOutput.selectedItem.id;			
				this.dispatchEvent(new Event("indiSelectionChanged"));							
			}
			
			protected function indiGridIn_changeHandler(event:ListEvent):void
			{				
				selectedIndiIn = 	this.indiGridInput.selectedItem.id;			
				this.dispatchEvent(new Event("indiSelectionChanged"));							
			}
			
			[Bindable] private var rez:ArrayCollection = new ArrayCollection();
			protected function getOutputDataResult_resultHandler(event:ResultEvent):void
			{									
				rez = ArrayCollection(this.getOutputDataResult.lastResult)
				rezGrid.dataProvider = rez;
			}
			
			private function filterCountries():void {
				rez.filterFunction = filterRezArrCol;
				rez.refresh();
			}
			
			private function filterRezArrCol(item:Object):Boolean {								
				var fl:Boolean = false;
				if ((item.countryID == this.selectedCntry) && 
				   ( (item.indicatorID == this.selectedIndiIn) ||
					  (item.indicatorID == this.selectedIndiOut) ))					
							fl = true
				 	else    fl = false;
				
				return fl;
			}	
			
			private function filterIndicators():void {				
				this.indiRezOut.filterFunction = filterIndisArrColOut;
				this.indiRezOut.refresh();
				
				this.indiRezIn.filterFunction = filterIndisArrColIn;
				this.indiRezIn.refresh();
			}
			
			private function filterIndisArrColOut(item:Object):Boolean {			
				var fl:Boolean = false;
				if ((item.hasSplitByDevices == this.showSplitByDevices)&&
				    (item.hasSplitByTypes   == this.showSplitByTypes)  &&
					(item.isOutputIndicator == false)	) {					
						fl = true
				}  else fl = false;				
				return fl;
			}

			private function filterIndisArrColIn(item:Object):Boolean {			
				var fl:Boolean = false;
				if ((item.hasSplitByDevices == this.showSplitByDevices)&&
					(item.hasSplitByTypes   == this.showSplitByTypes)  && 
					(item.isOutputIndicator == true)) {					
					fl = true
				}  else fl = false;				
				return fl;
			}
			
			// used for initial data load procedure
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{				
				refreshData(event);
			}

			protected function spTypes_changeHandler(event:Event):void
			{
				this.showSplitByTypes = !this.showSplitByTypes;		
				batTypes.enabled = this.showSplitByTypes;
				pwrSource.enabled = this.showSplitByTypes;				
				if (this.showSplitByTypes) aggType = 2 else aggType = 1;
				filterIndicators();
			}

			protected function spDev_changeHandler(event:Event):void
			{
				this.showSplitByDevices = !this.showSplitByDevices;				
				if (this.showSplitByDevices) aggType = 1 else { 
					aggType = 0; this.isFirstCall = true;
				};
				filterIndicators();
			}

		]]> 
	</fx:Script>
	
	<fx:Script>
		<![CDATA[
			/* some text/numbers formatting tasks go here */
			
			public function format_numbers(item:Object, column:DataGridColumn):String { 
				var a:Object = item[column.dataField]				
				return this.stilius2.format(a);	
			}		
			
			public function format_text(item:Object, column:DataGridColumn):String { 
				var a:Object = item[column.dataField]				
				return a.toString();	
			}
		]]>
	</fx:Script>
	
	<mx:DataGrid id="cntryGrid" change="cntryGrid_changeHandler(event)" 
				 left="0" top="0" bottom="289" right="623" height="100%" width="25%">
		<mx:columns>
			<mx:DataGridColumn headerText="id" dataField="id"/>
			<mx:DataGridColumn headerText="namen" dataField="namen"/>
		</mx:columns>
	</mx:DataGrid>
	<s:BorderContainer width="75%" height="100%">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:BorderContainer width="100%" height="50%">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>		
			<s:BorderContainer width="35%" height="100%">
				
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				<s:BorderContainer width="100%" height="50%">
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					<s:Label text="detail level" height="25%" width="100%" verticalAlign="middle"/>
					<s:CheckBox label="Split by Devices?" height="25%" width="100%"
								 change="spDev_changeHandler(event)"
							  id="spDev"/>
					
					<s:CheckBox label="Split by BatTypes?" height="25%" width="100%"
							    change="spTypes_changeHandler(event)"	 id="spTypes"/>
				
				</s:BorderContainer>
				<s:BorderContainer width="100%" height="50%">
					<s:layout>
						<s:TileLayout/>
					</s:layout>
					<s:Label text="BatteryTypes" width="30%" height="20%" verticalAlign="middle" 
							 textAlign="center"/>
					
					<s:RadioButton label="1C" groupName="batTypes" value="1" width="30%" height="20%" 
								   click="batTypesChange_clickHandler(event)" selected="true" textAlign="center"
								   />
					<s:RadioButton label="1D" groupName="batTypes" value="2" width="30%" height="20%" 
								   click="batTypesChange_clickHandler(event)" textAlign="center"
								   />
					<s:RadioButton label="3A" groupName="batTypes" value="3" width="30%" height="20%" 
								   click="batTypesChange_clickHandler(event)" textAlign="center"
								   />
					<s:RadioButton label="9V" groupName="batTypes" value="4" width="30%" height="20%" 
								   click="batTypesChange_clickHandler(event)" textAlign="center"
								   />				
					<s:RadioButton label="AA" groupName="batTypes" value="5" width="30%" height="20%" 
								   selected="false" 
								   click="batTypesChange_clickHandler(event)" textAlign="center"
								   />
					
					<s:Label text="PowerSource" width="30%" height="20%" verticalAlign="middle" textAlign="center"/>
					
					<s:RadioButton label="DPP" groupName="pwrSource" value="1" width="30%" height="20%" selected="true" 
								   click="pwrTypes_clickHandler(event)" textAlign="center"/>
					<s:RadioButton label="RCH" groupName="pwrSource" value="2" width="30%" height="20%" 
								   click="pwrTypes_clickHandler(event)" textAlign="center"/>
				</s:BorderContainer>
			</s:BorderContainer>
			<mx:DataGrid id="indiGridOutput" change="indiGridOut_changeHandler(event)" 
						 height="100%" width="32.5%" >
				<mx:columns>
					<mx:DataGridColumn headerText="id" dataField="id" width="10"/>
					<mx:DataGridColumn headerText="indiOut" dataField="namen" width="30"/>
				</mx:columns>
			</mx:DataGrid>
			<mx:DataGrid id="indiGridInput" change="indiGridIn_changeHandler(event)" 
						 height="100%" width="32.5%" >
				<mx:columns>
					<mx:DataGridColumn headerText="id" dataField="id" width="10"/>
					<mx:DataGridColumn headerText="indiIn" dataField="namen" width="30"/>
				</mx:columns>
			</mx:DataGrid>
		</s:BorderContainer>
		<s:BorderContainer width="100%" height="50%">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>			
			<mx:DataGrid width="100%" height="100%" id="rezGrid" dataProvider="{rez}">
				<mx:columns>
					<mx:DataGridColumn headerText="scenario" dataField="scenarioID"/>
					<mx:DataGridColumn headerText="country" dataField="cntryName"/>
					<mx:DataGridColumn headerText="indicator" dataField="indiName"/>
					<mx:DataGridColumn headerText="device" dataField="deviceID"/>
					<mx:DataGridColumn headerText="Y2004" dataField="Y2004" labelFunction="format_numbers"/>
					<mx:DataGridColumn headerText="Y2005" dataField="Y2005" labelFunction="format_numbers"/>
					<mx:DataGridColumn headerText="Y2006" dataField="Y2006" labelFunction="format_numbers"/>
				</mx:columns>
			</mx:DataGrid>
		</s:BorderContainer>
	</s:BorderContainer>
</s:Group>
