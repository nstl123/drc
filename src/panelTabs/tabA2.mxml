<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="767" height="100%" 
		 xmlns:utils="utils.*"
		 creationComplete="startApp(event)" 
		 xmlns:depot1="services.depot1.*" 
		 xmlns:depot21="services.depot21.*" 
		 xmlns:depot3="services.depot3.*">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import controls.FlowManager;
			
			import flashx.textLayout.formats.Float;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.graphics.SolidColorStroke;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.Depot1;
			import services.depot3.Depot3;
			
			import spark.events.IndexChangeEvent;
			
			import utils.helper;		
			
			public var dataServiceNames:Depot1;
			public var dataServiceData:Depot21;
			public var dataServiceUpdate:Depot3;
			
			[bindable] private var workingScenarioID:int;
			private var hlp:helper;

			[bindable] private var indicatorsList:ArrayCollection;
			
			public var cntryListLoaded:Boolean = false;
			
			[bindable] private var flMngr:FlowManager;
			public function setFlowManagerRef(z:FlowManager):void {
				flMngr = z;
			}
			
			protected function startApp(event:FlexEvent):void {
				trace("app start panelTab A1");			
				hlp = new helper();			
			
				this.addEventListener("updateCharts", updateCharts);
				this.addEventListener("refreshData", refreshData);
				
				initShockControls();		
			}
			
			[bindable] private var yrsList:ArrayCollection = new ArrayCollection();
			protected function initShockControls():void {
				for (var i:int = 2004; i < 2021; i++) {
					yrsList.addItem({"yrs":i});
				};
				this.shockYears.dataProvider = yrsList;
				this.shockYears.labelField = "yrs";
				
				this.shockValue.value = 10;
			}			
			
			public function initNames():void {
				trace("init names inside panel A1");				
				indicatorsNamesList.token = this.dataServiceNames.getIndicatorNames();							
			}
			
			public function setWorkingScenario(nv:int, flag:Boolean):void {
				this.workingScenarioID = nv;
				this.grid.setWorkingScenario(this.workingScenarioID, flag);				
			}					
						
			[bindable]
			private var dataList:ArrayCollection;
			
			public function setDataList(data:ArrayCollection):void {
				this.dataList = data;				
			}	
			
			private var fullIndiList:ArrayCollection;
			public function getFullIndiList():ArrayCollection {
				this.fullIndiList.filterFunction = null;
				this.fullIndiList.refresh();
				return new ArrayCollection(fullIndiList.source);				
			}			
			
			public function setIndicatorsList(evt:ResultEvent):void {
				this.indicatorsList = this.indicatorsNamesList.lastResult;
				this.fullIndiList = this.indicatorsList;
				
				this.dispatchEvent(new Event("indicatorsLoaded", true));
				
				this.indicatorsList.filterFunction = filterB;
				this.indicatorsList.refresh();
				
				var z:Object = {id : 101, namen : 'macroIndicator#1'};
				var arrCol:ArrayCollection = new ArrayCollection();
				arrCol.addItem(z);
				this.indicatorsBox.dataProvider = arrCol;//this.indicatorsList;		
				
				this.setSelectedIndicators();
			}
			
			public function setSelectedIndicators():void {
				var rr:ArrayCollection = this.flMngr.getRecordedSelectedIndicators();
				if (rr) this.setActiveIndis(0, rr.getItemAt(0).id);
				else this.setActiveIndis(0);
			}
				
			
			private function filterB(item:Object):Boolean {			
				var fl:Boolean = true;				
				(item.id == 101) ? fl = true : fl = false;				
				return fl;
			}					
			
			protected function button3_clickHandler(event:MouseEvent):void
			{								
				trace("calling macro data token");
				this.dispatchEvent(new Event("refreshData", false));
				//this.refreshData();			
			}
			
			public function refreshData(evt:Event):void {
				if (!this.dataList) {					
					Alert.show("Select at least one country", "Error A2");
				} else {
					var countryIDs:Array = this.dataList.source;				
					var tmp:Array = this.hlp.formStringFromIDs(countryIDs);
					this.cursorManager.setBusyCursor();
					getMacroDataResult.token = dataServiceData.getMacroData(tmp, selectedIndi, workingScenarioID, false, 0, 1);
				};
			}
			
			[bindable] private var selectedIndi:int = 101;
			[bindable] private var currentData:ArrayCollection = new ArrayCollection();			
			[bindable] private var currentDataGrowth:ArrayCollection = new ArrayCollection();
			
			protected function indicatorsBox_changeHandler(event:IndexChangeEvent):void {
				this.selectedIndi = this.indicatorsBox.selectedItem.id;		
				//this.dispatchEvent(new Event("refreshData", false));
			}			
			
			protected function getMacroDataResult_resultHandler(event:ResultEvent):void
			{					
				this.cursorManager.removeBusyCursor();
				this.currentData = this.getMacroDataResult.lastResult as ArrayCollection;
				//this.currentDataGrowth.source = temp.source;
				this.dispatchEvent(new Event("updateCharts", false));				
			}
			
			private function filterGrid(item:Object):Boolean {				
				var f:Boolean = true;				
				if (item.scenarioID == this.workingScenarioID) {					
					f = true
				}  else f = false;				
				return f;
			}		
			
			[bindable] public var alteredData:ArrayCollection = new ArrayCollection();
			public function digestChanges(evt:Event):void {
				this.dispatchEvent(new Event("changesMadeInScenario", true));
				
				var temp:Object = new Object();		
				
				if (this.isSingleGeo) { 				
					alteredData = this.grid.getData();									
				} else {
					var yrs:int = 2010;
					if (this.shockYears.selectedItem.yrs) yrs = this.shockYears.selectedItem.yrs;
					var val:Number = this.shockValue.value;		

					var rawData:ArrayCollection = this.grid.getAllData();
					alteredData = hlp.formShockArray(selectedIndi, this.workingScenarioID, yrs, val, rawData);				
				};
				
				temp = ({'id':1, data:this.alteredData});				
				this.updateData.token = this.dataServiceUpdate.updateData(temp, false, 0, 0);
			}			

			protected function updateData_resultHandler(event:ResultEvent):void
			{
				Alert.show("Data updated successfully", "Info");
				this.dispatchEvent(new Event("NewScenarioUpdated", true));
				this.dispatchEvent(new Event("refreshData", false));
			}

			protected function updateData_faultHandler(event:FaultEvent):void
			{
				Alert.show("Data update error", "Error");
			}

			[bindable] private var isSingleGeo:Boolean = true;
			protected function changeShockType_handler(event:MouseEvent):void
			{
				this.isSingleGeo = this.shockType.selectedValue;
				this.shockControls.enabled = !this.isSingleGeo;
			}
			
			protected function button_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new Event("scenarioResetRequested", true));
			}			
			
			[bindable] public var tabEditable:Boolean;			
			public function enableGrid(flag:Boolean, isLocal:Boolean) : void {				
				if (!isLocal) this.tabEditable = flag; //&& isLevel;
				this.grid.isEditable = flag && isLevel;
				(flag && isLevel) ? this.flagLabel.text = "Table is editable" : this.flagLabel.text = "Table is not editable";
				this.saveBtn.enabled = (flag && isLevel);
				
				this.shockBtn1.enabled = (flag && isLevel); 
				this.shockBtn2.enabled = (flag && isLevel);
				this.shockControls.enabled = (flag && isLevel && !isSingleGeo);
			}		
			
			protected function getMacroDataResult_faultHandler(event:FaultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				Alert.show(event.fault.faultString, "Error");				
			}

			[bindable] private var isLevel:Boolean = true;
			protected function radiobutton2_clickHandler(event:Event):void
			{
				var tmp:int = 1 - int(this.growthType.selection.value);
				this.isLevel = !this.isLevel;
				this.dispatchEvent(new Event("updateCharts", false));	
				// 0 for levels, 1 for growth				 
				this.enableGrid(tmp == 0 && this.tabEditable, true);	
				this.saveBtn.enabled = (tmp == 0 && this.tabEditable);
			}
			
			protected function updateCharts(evt:Event):void {				
				this.currentData.filterFunction =  null;
				this.currentData.refresh();
				this.chart.setData(currentData, isLevel);// transformation is performed inside chart component
				
				this.currentData.filterFunction = filterGrid;
				this.currentData.refresh();
				
				this.grid.setData(currentData, isLevel);			

				this.chart.updateChartTitle(
					(indicatorsBox.selectedItem  ? indicatorsBox.selectedItem.namen : "macroIndicator#1"), 
					(indicatorsBox.selectedIndex ? indicatorsBox.selectedIndex : 0), 
					false, 
					this.isLevel, 
					(indicatorsBox.selectedItem ? indicatorsBox.selectedItem.namen : "")
				);
			}
			
			public function setActiveIndis(k:int, idd:int = -1):void {
				var kk:int = 0;
				var i:int = 0;				
				if (idd > 0) {				
					while (i < this.indicatorsBox.dataProvider.length) {				    						
						if (this.indicatorsBox.dataProvider.getItemAt(i).id == idd)	break;						
						i++;
					};					
				} else {
					this.indicatorsBox.selectedIndex = k;
					kk = k;
				};
				if (this.indicatorsBox.dataProvider.length > i) {				
					this.indicatorsBox.selectedIndex = i;
					kk = i;
				};
				
				this.indicatorsBox.selectedItem = this.indicatorsBox.dataProvider.getItemAt(kk);
				this.selectedIndi = this.indicatorsBox.selectedItem.id;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<depot1:Depot1 id="depot1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
					   showBusyCursor="true"/>
		<depot21:Depot21 id="depot21" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
						 showBusyCursor="true"/>		
		<depot3:Depot3 id="depot3" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
					   showBusyCursor="true"/>
	
		<s:CallResponder id="indicatorsNamesList" result="setIndicatorsList(event)"/>
		<s:CallResponder id="getMacroDataResult" result="getMacroDataResult_resultHandler(event)" fault="getMacroDataResult_faultHandler(event)"/>
		<s:CallResponder id="updateData" result="updateData_resultHandler(event)" fault="updateData_faultHandler(event)" />
		
		<s:RadioButtonGroup id="growthType"/>
		<s:RadioButtonGroup id="shockType"/>		
	</fx:Declarations>
	
	<utils:CInteractiveGrid width="747" height="189" id="grid"
						   left="10" top="446" 
						 >
	</utils:CInteractiveGrid>
	<utils:CTwoAxisChart width="747" height="277" id="chart" top="72"
						  isLineSeries="true" left="10">
	</utils:CTwoAxisChart>
	
	<s:DropDownList width="243" id="indicatorsBox" labelField="namen"
					 change="indicatorsBox_changeHandler(event)" top="22" 
					 selectedIndex="1" height="20" left="43"></s:DropDownList>
	<s:Button label="refresh data" click="button3_clickHandler(event)" top="47" width="218" height="25" fontWeight="bold" fontSize="13" left="318"/>
	<s:Label text="Step 5: Click the dropdown below to adjust chosen indicator" verticalAlign="middle" fontStyle="italic" fontSize="13" top="5" left="10" fontFamily="Arial" color="#00B050"/>
	<s:Label text="Step 6: Make data changes to shock the system using the drop down box or directly in the data set below. Once data has been adjusted click “save changes”" verticalAlign="middle" fontStyle="italic" fontSize="13" top="353" left="10" fontFamily="Arial" color="#00B050" width="650"/>
	<s:RadioButton label="Levels" groupName="growthType" enabled="true" value="0"
				   selected="true" height="19" change="radiobutton2_clickHandler(event)" top="51" left="77" fontSize="11" fontFamily="Arial"/>
	<s:RadioButton label="Growths" groupName="growthType" value="1" 
				   enabled="true" height="19" change="radiobutton2_clickHandler(event)" top="51" left="140" fontSize="11" fontFamily="Arial"/>
	<s:Button label="reset scenario" width="222" id="button" click="button_clickHandler(event)" height="23" top="412" left="535"/>
	<s:Label text="Table activiy state" width="152" fontStyle="italic" fontSize="11" id="flagLabel" left="10" top="436"/>
	<s:Label text="Data In:" fontStyle="italic" fontSize="11" top="48" height="10" left="10" fontFamily="Arial"/>
	<s:BorderContainer width="517" height="59" left="10" top="377" borderVisible="false" backgroundAlpha="0.0">
		<s:Label text="Shock Mechanism" fontStyle="italic" fontSize="11" x="7" y="8" fontFamily="Arial"/>
		<s:RadioButton x="66" label="Single Country (table below)" groupName="shockType" enabled="true" value="1"
					   selected="true" click="changeShockType_handler(event)" top="19" fontSize="11" id="shockBtn1"/>
		<s:RadioButton x="66" label="All countries  (right)" groupName="shockType" enabled="true" value="0"
					   click="changeShockType_handler(event)" top="35" fontSize="11" id="shockBtn2"/>
		<s:BorderContainer x="265" y="5" width="244" height="48" id="shockControls" enabled="false" borderVisible="false">
			<s:Label x="3" y="1" text="Year" width="106" height="20" verticalAlign="middle" fontSize="10"/>
			<s:Label x="110" y="1" text="Percentage change" width="133" height="20" verticalAlign="middle" fontSize="10"/>
			<s:DropDownList id="shockYears" width="100" left="13" top="19" 
							contentBackgroundAlpha="1.0" borderVisible="false">					
			</s:DropDownList>
			<s:NumericStepper id="shockValue" minimum="-20" maximum="20" stepSize="1" width="97" left="137" top="19"/>
		</s:BorderContainer>
	</s:BorderContainer>
	<s:Button label="save changes" width="222" click="digestChanges(event)" 
			  id="saveBtn" height="27" fontWeight="bold" left="535" top="379"/>
	

</s:Group>

