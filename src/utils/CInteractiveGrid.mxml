<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300"		  
		 creationComplete="appStart(event)">
	
	<fx:Declarations>
		<!-- some dataservice calls here !--> 
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.TextInput;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			
			import utils.helper;
			
			// events for managing user action
			[bindable] public var alteredData:ArrayCollection = new ArrayCollection();
			[bindable] public var scenarioDataChanged : Boolean = false;
			[bindable] public var alteredMacroData:Array = new Array();
			[bindable] public var alteredSplitData:Array = new Array();			
			[bindable] private var dataSet:ArrayCollection = new ArrayCollection();			
			[bindable] private var workingScenarioID:int;			
			[bindable] private static var isEditable:Boolean = false;
			
			[bindable] private var hlp:helper;
			
			// data getters			
			// data setters			
			public function set isEditable(flag:Boolean):void {
				this.testGrid.editable = flag;
				this.testGrid.invalidateDisplayList();
			}			
			
			public function get isEditable():Boolean {
				return this.isEditable;
			}
			
			public function setWorkingScenario(nv:int, isEditable:Boolean):void {
				this.workingScenarioID = nv;
				this.testGrid.editable = isEditable;
			}
			
			public function setData(data:ArrayCollection, isLevel:Boolean):void {
				this.dataSet = data;
				// need level vs growth transform here as well
				refreshView(isLevel);
			}
			
			public function getData():ArrayCollection {
				return saveDataFromGrid();
			}
			
			public function getAllData():ArrayCollection {
				return (this.testGrid.dataProvider as ArrayCollection);
			}
			
			private function disableEditing(event:DataGridEvent):void {
				if(event.columnIndex < 3) {  
					event.preventDefault(); 
				};
			}
			
			private function checkForNewValues(event:DataGridEvent):void { 
				var myEditor:TextInput = TextInput(event.currentTarget.itemEditorInstance);
				var newVal:String = myEditor.text;				
				var oldVal:String = event.currentTarget.editedItemRenderer.data[event.dataField];				
				
				if (Number(newVal) != Number(oldVal)) {
					var s:Object = DataGrid(event.target).editedItemRenderer.data;
					this.recordChanges(s);	
				}
				//myGrid.dataProvider.itemUpdated(event.itemRenderer.data);
				// not sure why we need this, but some update is require
				this.testGrid.dataProvider.itemUpdated(event.itemRenderer.data);				
			}      
			
			[bindable] private var showSplitByDevices:Boolean = true;
			
			private function recordChanges(selectedItem:Object):void {
				// data will be added later on saveInputs() by IDs				
				// need to check of ID arent there yet. in that case, pop and push
				var idx:int = -1;
				if (!this.showSplitByDevices) {					
					for(var j:int = 0; j < this.alteredMacroData.length; j++) {
						if ((this.alteredMacroData[j].countryID == selectedItem.countryID) && 
						    (this.alteredMacroData[j].indicatorID == selectedItem.indicatorID)) { idx = j;}
					};
					
					if ( idx >= 0) { this.alteredMacroData.splice(idx, 1); };
					
					this.alteredMacroData.push({
						"countryID" : selectedItem.countryID, "indicatorID" : selectedItem.indicatorID						
					});					
				} else {
					for(var i:int = 0; i < this.alteredSplitData.length; i++) {
						if ((this.alteredSplitData[i].countryID == selectedItem.countryID) && 
							(this.alteredSplitData[i].indicatorID == selectedItem.indicatorID)) { idx = i;}
					};
					
					if ( idx >= 0) { this.alteredSplitData.splice(idx, 1); };
					
					this.alteredSplitData.push({
						"countryID" : selectedItem.countryID, "indicatorID" : selectedItem.indicatorID,
						"deviceID" : selectedItem.deviceID						
					});					
				};
			}
			
			protected function saveDataFromGrid():ArrayCollection {
				this.scenarioDataChanged = false;
				this.alteredData.removeAll();
				// here data is collected form rezaigrod by a list of IDs from alteredMacroData
				if (this.alteredSplitData.length > 0) {
					this.scenarioDataChanged = true;
					for (var i:int = 0; i < this.alteredSplitData.length; i++) {
						var al:Object = this.alteredSplitData[i];
						for (var jj:int = 0; jj < this.testGrid.dataProvider.length; jj++) {						
							var fin:Object = this.testGrid.dataProvider[jj];							
							if ((fin.countryID == al.countryID) && (fin.indicatorID == al.indicatorID) &&
								fin.scenarioID ==  this.workingScenarioID) {
								this.alteredData.addItem({
									"scenarioID" : this.workingScenarioID,
									"countryID" : fin.countryID, "indicatorID" : fin.indicatorID,
									"deviceID" : fin.deviceID,
									"Y2004":fin.Y2004,
									"Y2005":fin.Y2005, "Y2006":fin.Y2006, "Y2007":fin.Y2007, "Y2008":fin.Y2008,
									"Y2009":fin.Y2009, "Y2010":fin.Y2010, "Y2011":fin.Y2011, "Y2012":fin.Y2012,
									"Y2013":fin.Y2013, "Y2014":fin.Y2014, "Y2015":fin.Y2015, "Y2016":fin.Y2016,
									"Y2017":fin.Y2017, "Y2018":fin.Y2018, "Y2019":fin.Y2019, "Y2020":fin.Y2020,
									"Y2021":fin.Y2021									
								});
							};
						};
					};				
				};						
				if (this.scenarioDataChanged) this.dispatchEvent(new Event("scenarioDataChanged"));
				
				return this.alteredData;
			}		

			protected function refreshView(isLevel:Boolean):void
			{				
				var tmp:ArrayCollection = hlp.transformGridData(this.dataSet, isLevel);				
				this.testGrid.dataProvider = tmp;
				this.testGrid.invalidateDisplayList();
			}				

			protected function appStart(event:FlexEvent):void
			{
				hlp = new helper();
				//this.addEventListener("scenarioDataChanged", updateScenarioData);				
			}

			[bindable] public var w1:int = 55;
			[bindable] public var w2:int = 50;
			private static var fixedCols:int = 3;
			private function startGrid(evt:Event):void {
				for (var i:int = 0; i < this.testGrid.columnCount; i++) {
					this.testGrid.columns[i].width  = (i < fixedCols ? w1 : w2);					
				};
			}
			
		]]>
	</fx:Script>
		
	
	<mx:DataGrid id="testGrid" 
				 horizontalCenter="0" verticalCenter="0" width="100%" height="100%"
				 editable="false" itemEditBegin="{this.disableEditing(event)}"
				 itemEditEnd="{this.checkForNewValues(event)}"
				 lockedColumnCount="3"  horizontalScrollPolicy="on" 
				 creationComplete="startGrid(event)" fontSize="11" borderVisible="true" borderColor="#C8C8C8" verticalGridLineColor="#C8C8C8">
		<mx:columns>
			<mx:DataGridColumn headerText="countryID" dataField="countryID"/>
			<mx:DataGridColumn headerText="indicatorID" dataField="indicatorID" />
			<!-- <mx:DataGridColumn headerText="scenarioID" dataField="scenarioID"/> !-->
			<mx:DataGridColumn headerText="deviceID" dataField="deviceID"/>
			<mx:DataGridColumn headerText="2004" dataField="Y2004" />
			<mx:DataGridColumn headerText="2005" dataField="Y2005" />
			<mx:DataGridColumn headerText="2006" dataField="Y2006" />
			<mx:DataGridColumn headerText="2007" dataField="Y2007" />
			<mx:DataGridColumn headerText="2008" dataField="Y2008" />
			<mx:DataGridColumn headerText="2009" dataField="Y2009" />
			<mx:DataGridColumn headerText="2010" dataField="Y2010" />
			<mx:DataGridColumn headerText="2011" dataField="Y2011" />
			<mx:DataGridColumn headerText="2012" dataField="Y2012"/>
			<mx:DataGridColumn headerText="2013" dataField="Y2013"/>
			<mx:DataGridColumn headerText="2014" dataField="Y2014"/>
			<mx:DataGridColumn headerText="2015" dataField="Y2015"/>
			<mx:DataGridColumn headerText="2016" dataField="Y2016"/>
			<mx:DataGridColumn headerText="2017" dataField="Y2017"/>
			<mx:DataGridColumn headerText="2018" dataField="Y2018"/>
			<mx:DataGridColumn headerText="2019" dataField="Y2019"/>			
			<mx:DataGridColumn headerText="2020" dataField="Y2020"/>			
		</mx:columns>
	</mx:DataGrid>
</s:Group>
