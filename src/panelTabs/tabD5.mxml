<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 		 
		 width="900" height="670" 
		 
		 xmlns:utils="utils.*"
		 creationComplete="startApp(event)"
		 xmlns:depot1="services.depot1.*" 
		 xmlns:depot21="services.depot21.*"
		 >
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import controls.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.Depot1;
			
			import spark.events.IndexChangeEvent;
			
			import utils.helper;
			
			public var dataServiceNames:Depot1;
			public var dataServiceData:Depot21;
			
			[bindable] private var workingScenarioID:int;
			private var hlp:helper;
			[bindable] private var indicatorsList:ArrayCollection;
			
			public static const CNTRYCHANGED:String = "CNTRY_CHANGED";
			public static const CNTRYUNCHANGED:String = "CNTRY_UNCHANGED"			
			
			
			protected function startApp(event:FlexEvent):void {
				trace("app start panelTab B");			
				hlp = new helper();				
			}
			
			public function initNames():void {
				trace("init names inside panel B");				
				indicatorsNamesList.token = this.dataServiceNames.getIndicatorNames();
				//countryListNames.token = this.dataServiceNames.getCountryList(0);
			}
			
			public function setWorkingScenario(nv:int, flag:Boolean):void {
				this.workingScenarioID = nv;
				this.testGrid.setWorkingScenario(this.workingScenarioID, flag);				
			}					
			
			protected function countryListNames_resultHandler(event:ResultEvent):void
			{
				this.countryListGrid.dataList = this.countryListNames.lastResult as ArrayCollection;
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				//this.countryListNames.token = this.dataService.getCountryList();
			}
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				var selCntries:Object = this.countryListGrid.dataList;
				this.dispatchEvent(new Event(tabD5.CNTRYCHANGED, true));
			}
			// ----- COMMUNICATION PART ---------------/////			
			public function getDataList():ArrayCollection {
				return this.countryListGrid.dataList;			
			}
			
			public function setDataList(data:ArrayCollection):void {
				this.countryListGrid.dataList = data;
			}		
			
			public function setDataListActive(data:ArrayCollection):void {				
				this.countryListGrid.activateSelections(data);
			}
			
			public function setIndicatorsList(evt:ResultEvent):void {
				this.indicatorsList = this.indicatorsNamesList.lastResult;
				this.indicatorsList.filterFunction = filterB;
				this.indicatorsList.refresh();
				this.indicatorsBox.dataProvider = this.indicatorsList;			
			}
			
			private function filterB(item:Object):Boolean {			
				// here should be all indis within ID range
				var fl:Boolean = true;				
				if ((item.hasSplitByDevices == 1)&&(item.hasSplitByTypes == 0)&&
					(item.isOutputIndicator == 0)&&(item.id >= 210)) {					
					fl = true
				}  else fl = false;				
				return fl;
			}					
			
			protected function button3_clickHandler(event:MouseEvent):void
			{
				//send query to DB mit countryIDs and IndiID
				var countryIDs:Array = this.countryListGrid.dataList.source;				
				var tmp:Array = this.hlp.formStringFromIDs(countryIDs);				
				trace("calling macro data token");
				getMacroDataResult.token = dataServiceData.getMacroData(tmp, selectedIndi, workingScenarioID, true, 0);
			}
			
			[bindable] private var selectedIndi:int;
			[bindable] private var currentData:ArrayCollection = new ArrayCollection();
			
			protected function indicatorsBox_changeHandler(event:IndexChangeEvent):void {
				this.selectedIndi = this.indicatorsBox.selectedItem.id;
				//this.hasSplitFlag.selected = this.indicatorsBox.selectedItem.hasSplitByDevices;
				//this.hasSplitFlag.selected = this.indicatorsBox.selectedItem.hasSplitByTypes;
			}			
			
			protected function getMacroDataResult_resultHandler(event:ResultEvent):void
			{
				currentData = this.getMacroDataResult.lastResult as ArrayCollection;				
				this.testChart.setData(currentData); // transformation is performed inside chart component
				this.testGrid.setData(currentData);
			}
			

			protected function button4_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new Event("scenarioResetRequested", true));
			}


			protected function button5_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
			}

			public function enableGrid(flag:Boolean) : void {
				this.testGrid.isEditable = flag;
				flag ? this.flagLabel.text = "Table is editable" : this.flagLabel.text = "Table is not editable";
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<depot1:Depot1 id="depot1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
					   showBusyCursor="true"/>
		<depot21:Depot21 id="depot21" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
						 showBusyCursor="true"/>
		
		<s:CallResponder id="countryListNames"  result="countryListNames_resultHandler(event)"/>
		<s:CallResponder id="indicatorsNamesList" result="setIndicatorsList(event)"/>
		<s:CallResponder id="getMacroDataResult" result="getMacroDataResult_resultHandler(event)"/>
		
		
	</fx:Declarations>
	
	<utils:CCheckBoxGrid id="countryListGrid" width="290" height="95%" top="50" left="0">
	</utils:CCheckBoxGrid>
	
	<s:BorderContainer width="300" height="25" top="0" x="0">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>		
		<s:Label text="Tab D. Market Size" height="100%" width="50%" x="61" y="38"/>		
		<s:Button label="notify D" click="button2_clickHandler(event)" width="50%" height="100%"/>			
	</s:BorderContainer>
	
	<utils:CTwoAxisChart x="298" width="556" height="260" id="testChart" top="87">
	</utils:CTwoAxisChart>
	<utils:CInteractiveGrid x="296" width="557" height="223" id="testGrid" top="416">
	</utils:CInteractiveGrid>
	<s:DropDownList x="304" width="300" id="indicatorsBox"  labelField="namen" top="50"></s:DropDownList>
	<s:Button x="430" y="355" label="Reset" click="button4_clickHandler(event)" width="118"/>
	<s:Button x="294" y="356" label="Update DB" click="button5_clickHandler(event)" width="106"/>
	<s:Label x="302" y="397" text="Table activiy state" width="196" fontStyle="italic" fontSize="11" id="flagLabel"/>
</s:Group>
