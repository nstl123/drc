<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%"
		 xmlns:inputTab2 = "inputTabas.inputTab2"
		 xmlns:base1="services.base1.*"
		 creationComplete="appStart(event)" 
		 xmlns:base="services.base.*" 
		 xmlns:baseinsdel="services.baseinsdel.*" 
		 xmlns:base3="services.base3.*" 
		 xmlns:inputTabas="inputTabas.*">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.TextInput;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			
			// import valueObjects.TimeSeries;			
			
			[bindable] public var workingScenarioID:int;
			[bindable] private var aggLevel:int = 0;
			
			protected function appStart(event:FlexEvent):void
			{
				this.addEventListener("splitByDevicesChanged", filterIndicators);
				this.addEventListener("scenarioDataChanged",   updateScenarioData);			
				this.addEventListener("scenariosToShow", changeFilters); 
				
				cntrySelList.srv = this.base1;
			 	this.cntrySelList.load();				
			}
			
			public function setScenarioID(id:int):void {
				this.workingScenarioID = id;
			}
			
			protected function updateScenarioData(evt:Event):void {
				// clean the old value
				alteredMacroData.splice(0, this.alteredMacroData.length);
				//send some php calls here mit alteredData			
			}
			
			protected function dataGrid_creationCompleteHandler(event:FlexEvent):void
			{
				getCountryListResult.token = base1.getCountryList();				
			}			
			
			protected function indisList_creationCompleteHandler(event:FlexEvent):void
			{
				getIndicatorNamesResult.token = base1.getIndicatorNames();
			}
			
			[bindable] private var selectedIndicator:int = 0; 
			protected function indisList_changeHandler(event:IndexChangeEvent):void
			{
				this.selectedIndicator = this.indisList.selectedItem.id;
				this.indicatorsLabel.text = "Selected: " + this.indisList.selectedItem.namen;
			}

			private function filterIndicators(evt:Event):void {				
				this.indiNamesArr.filterFunction = filterIndisArrColOut;
				this.indiNamesArr.refresh();
			}
			
			private function changeFilters(evt:Event):void {
				if (this.showOnlyNewScenario)
					this.rezai.filterFunction = filterScenarios;
				else 
					this.rezai.filterFunction = null;
				this.rezai.refresh();
			}
			
			[bindable] private var showSplitByDevices:Boolean = false;
			private function filterIndisArrColOut(item:Object):Boolean {			
				var fl:Boolean = false;
				if ((item.hasSplitByDevices == this.showSplitByDevices)&&					
					(!item.isOutputIndicator && item.hasTimeSeries)&&
					(!item.hasSplitByTypes)) {					
					fl = true
				}  else fl = false;				
				return fl;
			}
			
			private function filterScenarios(item:Object):Boolean {			
				var fl:Boolean = false;
				
				if (item.scenarioID == this.workingScenarioID) {					
					fl = true
				}  else fl = false;				
			
				return fl;
			}
			
			[Bindable] private var indiNamesArr:ArrayCollection = new ArrayCollection();
			protected function getIndicatorNamesResult_resultHandler(event:ResultEvent):void
			{
				this.indiNamesArr = ArrayCollection(this.getIndicatorNamesResult.lastResult);
				filterIndicators(event);
			}

			protected function checkbox1_changeHandler(event:Event):void
			{
				this.showSplitByDevices = !this.showSplitByDevices;
				this.dispatchEvent(new Event("splitByDevicesChanged"));
				if (this.showSplitByDevices) aggLevel = 1
				else aggLevel = 0;
			}
			
			protected function test_clickHandler(event:MouseEvent):void
			{				
				getOutputDataResult.token = base.getOutputData(
					aggLevel, this.workingScenarioID, this.selectedCountry, this.selectedIndicator, 0, 0, false);
			}

			[Bindable] private var selectedCountry:int = 0;
			protected function dataGrid_changeHandler(event:ListEvent):void
			{
				this.selectedCountry = this.dataGrid.selectedItem.id;
			}

			[bindable] private var rezai:ArrayCollection = new ArrayCollection();
			[bindable] private var rezaiBckup:Object = new Object();
			
			protected function getOutputDataResult_resultHandler(event:ResultEvent):void
			{
				rezai = ArrayCollection(this.getOutputDataResult.lastResult);
				this.rezaiGrid.dataProvider = rezai;
				this.dispatchEvent(new Event("scenariosToShow"));	
				// need to make a copy of array
				var z:Array = rezai.source.slice()
				this.rezaiBckup = z;				
				// add some filter function??? for country and device???
			}
			
			//??
			private function disableEditing(event:DataGridEvent):void {
				if(event.columnIndex < 3)
				{  
					event.preventDefault(); 
				}
			}   
			
			[bindable] public var alteredData:Array = new Array();
			[bindable] public var scenarioDataChanged : Boolean = false;
			
			private function saveDataFromGrid(event:DataGridEvent):void {
				this.scenarioDataChanged = false;
				// here data is collected form rezaigrod by a list of IDs from alteredMacroData
				if (this.alteredMacroData.length > 0) {
					this.scenarioDataChanged = true;
					for (var i:int = 0; i < this.alteredMacroData.length; i++) {
						var al:Object = this.alteredMacroData[i];
						for (var jj:int = 0; jj < this.rezaiGrid.dataProvider.length; jj++) {						
							var fin:Object = this.rezaiGrid.dataProvider[jj];							
							if ((fin.countryID == al.countryID) && (fin.indicatorID == al.indicatorID) &&
								 fin.scenarioID ==  this.workingScenarioID) {
								this.alteredData.push({
									"scenarioID" : this.workingScenarioID, "sessionID":this.workingScenarioID,
									"countryID" : fin.countryID, "indicatorID" : fin.indicatorID, 
									//"Y2000":fin.Y2000,
									//"Y2001":fin.Y2001, "Y2002":fin.Y2002, "Y2003":fin.Y2003, "Y2004":fin.Y2004,									
									"Y2005":fin.Y2005,/* "Y2006":fin.Y2006, "Y2007":fin.Y2007, "Y2008":fin.Y2008,
									//"Y2009":fin.Y2009,*/ "Y2010":fin.Y2010/*, "Y2011":fin.Y2011, "Y2012":fin.Y2012,
									"Y2013":fin.Y2013, "Y2014":fin.Y2014, "Y2015":fin.Y2015, "Y2016":fin.Y2016,
									"Y2017":fin.Y2017, "Y2017":fin.Y2017, "Y2018":fin.Y2018, "Y2019":fin.Y2019,
									"Y2020":fin.Y2020, "Y2021":fin.Y2021, "Y2022":fin.Y2022, "Y2023":fin.Y2023,
									"Y2024":fin.Y2024, "Y2025":fin.Y2025*/
								});
							};
						};
					};				
				};
				
				if (this.scenarioDataChanged) this.dispatchEvent(new Event("scenarioDataChanged"));
			}   
			
			private function checkForNewValues(event:DataGridEvent):void {
				var myEditor:TextInput = TextInput(event.currentTarget.itemEditorInstance);
				var newVal:String = myEditor.text;				
				var oldVal:String = event.currentTarget.editedItemRenderer.data[event.dataField];				
				
				if (Number(newVal) != Number(oldVal)) {
					var s:Object = DataGrid(event.target).editedItemRenderer.data;
					this.recordChanges(s);	
				}
				//myGrid.dataProvider.itemUpdated(event.itemRenderer.data);
				// not sure why we need this, but some update is require
				this.rezaiGrid.dataProvider.itemUpdated(event.itemRenderer.data);

			}                               
			
			[bindable] public var alteredMacroData:Array = new Array();
			[bindable] public var alteredSplitData:Array = new Array();
			
			private function recordChanges(selectedItem:Object):void {
				// data will be added later on saveInputs() by IDs
				if (!this.showSplitByDevices) {
					this.alteredMacroData.push({
						"countryID" : selectedItem.countryID, "indicatorID" : selectedItem.indicatorID						
					});
				} else {
					this.alteredSplitData.push({
						"countryID" : selectedItem.countryID, "indicatorID" : selectedItem.indicatorID,
						"deviceID" : selectedItem.deviceID						
					});
				};
			}
			
			import mx.events.DataGridEventReason;			


			protected function button1_clickHandler(event:MouseEvent):void			
			{
				// revert back to last result of dataservice
				getOutputDataResult.token = base.getOutputData(
					aggLevel, this.workingScenarioID, this.selectedCountry, this.selectedIndicator, 0, 0, false);
			}


			protected function updateOnPhp_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
				updateMacroIndisResult.token = baseInsDel.updateMacroIndis(this.alteredData[this.alteredData.length - 1]);
			}


			protected function updateMacroIndisResult_resultHandler(event:ResultEvent):void
			{
				var s:int = 0;
			}

			[Bindable] public var showOnlyNewScenario:Boolean = false;
			protected function showOnlyNewscenario_clickHandler(event:MouseEvent):void
			{
				this.showOnlyNewScenario = !this.showOnlyNewScenario;
				this.dispatchEvent(new Event("scenariosToShow"));				
			}


			protected function getCountryListResult_resultHandler(event:ResultEvent):void
			{
				//this.cntrySelList.dataList = this.getCountryListResult.lastResult;
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="demandMethodGroup"/>
		
		<base1:Base1 id="base1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" showBusyCursor="true"/>
		<base:Base id="base" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" showBusyCursor="true"/>
		
		<s:CallResponder id="getCountryListResult" result="getCountryListResult_resultHandler(event)"/>
		<s:CallResponder id="getIndicatorNamesResult" result="getIndicatorNamesResult_resultHandler(event)"/>
		<s:CallResponder id="getOutputDataResult" result="getOutputDataResult_resultHandler(event)"/>
		<s:CallResponder id="updateMacroIndisResult" result="updateMacroIndisResult_resultHandler(event)"/>
		
		<base3:Base3 id="baseInsDel" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" showBusyCursor="true"/>
		
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:DataGrid x="5" y="11" width="195" height="119" id="dataGrid" 
				 creationComplete="dataGrid_creationCompleteHandler(event)" 
				 dataProvider="{getCountryListResult.lastResult}"
				 change="dataGrid_changeHandler(event)" >
		<mx:columns>			
			<mx:DataGridColumn headerText="id" dataField="id" width="50"/>			
			<mx:DataGridColumn headerText="namen" dataField="namen" width="300"/>
		</mx:columns>
	</mx:DataGrid>
	
	<inputTabas:ColumnCheck id="cntrySelList"  labelText="Country Selections"
							height="350" x="0" y="138">
		
	</inputTabas:ColumnCheck>
	
	<s:BorderContainer x="210" y="321" width="597" height="293">
		<s:Label text="Preview of New Scenario" width="95%" height="17" textAlign="left" horizontalCenter="0" top="5" fontStyle="italic"/>
		<mx:DataGrid y="20" width="95%" height="261" horizontalCenter="0" id="rezaiGrid"
					 editable="true" itemEditBegin="{this.disableEditing(event)}"
				     itemEditEnd="checkForNewValues(event)">
			<mx:columns>
				<mx:DataGridColumn headerText="countryID" dataField="countryID"/>
				<mx:DataGridColumn headerText="indicatorID" dataField="indicatorID"/>
				<mx:DataGridColumn headerText="scenarioID" dataField="scenarioID"/>
				<mx:DataGridColumn headerText="deviceID" dataField="deviceID"/>
				<mx:DataGridColumn headerText="Y2005" dataField="Y2005"/>
				<mx:DataGridColumn headerText="Y2010" dataField="Y2010"/>
			</mx:columns>
		</mx:DataGrid>
	</s:BorderContainer>
	<s:Button x="209" y="294" label="Confirm Inputs" click="saveDataFromGrid(null)"/>
	<s:Button x="515" y="294" label="Reset to Baseline" click="button1_clickHandler(event)"/>
	<s:BorderContainer x="213" y="187" width="386" height="98">
		<s:Label text="Schock" width="95%" height="17" textAlign="left" horizontalCenter="0" top="5" fontStyle="italic"/>
		<s:Label x="81" y="10" text="When, Magnitude, Where?" width="124" height="45" textAlign="left" verticalAlign="middle" color="#2D8D1D"/>
		<s:CheckBox x="219" y="62" label="show only new scenario?" width="155" 
					id="showOnlyNewscen" selected="false" click="showOnlyNewscenario_clickHandler(event)"/>
	</s:BorderContainer>
	<s:BorderContainer x="213" y="91" width="386" height="92">
		<s:Label text="Calculation Method:" width="95%" height="17" textAlign="left" top="5" horizontalCenter="0" fontStyle="italic"/>
		<s:RadioButton label="Macro" groupName="demandMethodGroup" right="139" top="26" width="45%" enabled="false"/>
		<s:RadioButton label="Deterministic" groupName="demandMethodGroup" right="15" top="26" width="45%" selected="true"/>
		<s:Label text="Aggregation Level:" width="95%" textAlign="left" top="48" horizontalCenter="0" fontStyle="italic"/>
		<s:CheckBox x="135" y="62" label="Split Device Base?" width="152"
					selected="false" change="checkbox1_changeHandler(event)"
					enabled="true" />
	</s:BorderContainer>
	<s:List x="631" y="33" width="176" height="280" contentBackgroundColor="#C4D5F7" 
			id="indisList" enabled="true" 
			creationComplete="indisList_creationCompleteHandler(event)" 
			labelField="namen" change="indisList_changeHandler(event)">
		<s:AsyncListView list="{this.indiNamesArr}"/>
	</s:List>
	<s:Label x="609" y="13" text="Available Indicators (choose one)" width="244" textAlign="left" fontStyle="italic" id="indicatorsLabel"/>
	<s:Button x="213" y="35" label="Upload Historic/Baseline" width="187" height="33" enabled="false"/>
	<s:Button x="408" y="35" label="Upload New Scenario" width="191" height="33"/>
	<s:Label x="214" y="76" text="Last Update was on : 2013-02-28" fontStyle="italic" color="#FF5A09" width="385"/>
	<s:Label x="213" y="9" text="Scenario Construction" fontSize="16" fontStyle="italic" width="387" height="18" textAlign="left" color="#585858" fontWeight="bold"/>
	<s:Button x="411" y="294" label="getSomeData" width="96" id="test" click="test_clickHandler(event)"/>
	<s:Button x="308" y="294" label="updateOnPhp" id="updateOnPhp" click="updateOnPhp_clickHandler(event)" width="96"/>
</s:Group>
