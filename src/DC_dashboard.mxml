<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			    
			   xmlns:depot1="services.depot1.*"
			   xmlns:depot3="services.depot3.*"		   		   
			   
			   creationComplete="application1_creationCompleteHandler(event)"
			   
			   xmlns:panelTabs="panelTabs.*" 
			   width="100%" height="850" xmlns:utils="utils.*"
			   minHeight="850" pageTitle="Battery Demand Tool">
	
	<!-- creationComplete="initAll(event)" !-->
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" paddingTop="10" paddingBottom="20" gap="0"/>
	</s:layout>
	<fx:Declarations>	
		
		<depot1:Depot1 id="depot1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
					   showBusyCursor="true"/>		
		<depot3:Depot3 id="depot3" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" showBusyCursor="true"/>
		
		<s:CallResponder id="createNewWorkingScenarioResult" result="createNewWorkingScenarioResult_resultHandler(event)"
						 fault="createNewWorkingScenarioResult_faultHandler(event)"/>		
		<s:CallResponder id="deleteAllScenariosResult" result="deleteAllScenariosResult_resultHandler(event)" 
						 fault="deleteAllScenariosResult_faultHandler(event)"/>
		<s:CallResponder id="indicatorsNamesList" result="indicatorsNamesList_resultHandler(event)" /> 
		
		<s:RadioButtonGroup id="viewingModeGroup"/>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[			
			import controls.FlowManager;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.*;
			import services.depot21.Depot21;
			
			import utils.IDgenerator;			
			private var dataServiceNames:Depot1;
			private var dataServiceData:Depot21;
			private var dataServiceUpdate:Depot3;
			
			public  var masterTab:FlowManager;
			
			private var workingScenarioID:int;
			private var currTime:String;
			protected var IDgen:IDgenerator = new IDgenerator();
									
			protected function initAll(evt:FlexEvent):void {				
				trace("application creationComplete part. start initAll");
				this.tabai.createDeferredContent();				
				this.startApp(evt);
			}		
			
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				this.currentState = "landingState";
				this.currentStateLabel.text = "Current State: " + this.currentState;				
			}
			
			public var flagApplicationStarted:int = 0;
			protected function startApp(event:FlexEvent):void
			{
				flagApplicationStarted = flagApplicationStarted + 1;
				if (flagApplicationStarted == 1) {
					trace("starting init Depot1, Depot21, Depot3");
					//this.pathLabel.text = "Init";			
					
					this.dataServiceNames = new Depot1();
					this.dataServiceData = new Depot21();
					this.dataServiceUpdate = new Depot3();				
					
					this.workingScenarioID = this.IDgen.generateID();	
					this.currTime = this.IDgen.generateTimeStamp();
					
					cleanOldScenarios(); // clean DB from unneccesary scenarios
					this.addEventListener("dbCleaned", initScenarioDB);				
					
					this.addEventListener("CNTRY_CHANGED", digestUpdate);				
					this.addEventListener("cntryChecked",   digestUpdate);
					this.addEventListener("cntryUnChecked", digestUpdate);				
					this.addEventListener("updateClusterType", digestUpdate);				
					this.addEventListener("NewScenarioUpdated", refreshDeviceBase);				
					this.addEventListener("scenarioResetRequested", resetScenario);
					this.addEventListener("scenarioResetDone", refreshAllTabs);
					
					this.addEventListener("changesMadeInScenario", recordState);
					
					this.addEventListener("pathChanged", digestPathChange);
					
					this.addEventListener("init", createNext);
					this.addEventListener("cTree", createNext);
					this.addEventListener("tabA", createNext);
					this.addEventListener("tabB", createNext);
					this.addEventListener("tabC", createNext);
					this.addEventListener("tabD", createNext);				
					this.addEventListener("tabF", createNext);
					this.addEventListener("tabE", createNext);
					
					this.addEventListener("stateChanged", changeState); // further get state from navControl					
					this.addEventListener("viewingModeChanged", manageViewModeChanged);					
					masterTab = new FlowManager();					
					this.masterTab.setStateSpacePos(1);
					//updateStateSpaceLabel();				
				} else if (flagApplicationStarted == 2)	{				
					this.dispatchEvent(new Event("init", true))
				};
			}
			
			public function updateStateSpaceLabel():void {
				//this.stateSpaceLabel.text = this.masterTab.getStateSpaceName();
			}
			
			[bindable] private var currState:int;
			public function changeState(evt:Event) : void {
				//this.currState = this.navigatorBox.getState();
				//this.digestStateChange(this.currState);
				// take approprate action hide/show tabs
			}
			
			private function manageViewModeChanged(evt:Event):void {
				/*var crntSt:String = this.panelTabPath.getViewingState();
				if (crntSt == "viewingState") {
					// set state to viewing one
					this.currentState = "viewingState";
				} else {
					// set to edit state
					this.currentState = "scenarioState";
				};		
				this.dispatchEvent(new Event("pathChanged", true));*/				
			}
			
			private function digestStateChange(ind:int):void {
				switch (ind) {
					case 0:
						//this.tabai.selectedIndex = 0;
						break;
					case 1:
						this.tabai.selectedIndex = 0;					
						break;
					case 2:						
						for (var i:int = 0; i < this.pathFlags.length; i++) {
							if (this.pathFlags[i] == 1) break;
						};
						if (i == 5) this.tabai.selectedIndex = i - 1;
						else if (i == 3) this.tabai.selectedIndex = i;	
						else this.tabai.selectedIndex = i + 1;
						
						break;
					case 3:
						this.tabai.selectedIndex = 5;
						break;
				};
			}
			
			protected function refreshAllTabs(evt:Event):void {
				this.panelTabA2.refreshData(null);
				this.panelTabB3.refreshData();		
				if (this.panelTabC4.getWorkingScenario() == 0) 
					this.panelTabC4.setWorkingScenario(this.workingScenarioID, false);
				this.panelTabC4.rewriteDeviceBase();				
				this.panelTabD5.refreshData(null);				
				this.panelTabF51.refreshData(null);
				this.panelTabE61.refreshData(null);
			}

			[bindable] public var changeMadeInScenario:Boolean = false;
			protected function recordState(evt:Event):void {
				this.changeMadeInScenario = true;
				
				this.masterTab.setStateSpacePos(4);
				this.updateStateSpaceLabel();
				//or record cTree values here
			}
			
			[bindable] private var firstDeviceBase:int = 0;
			protected function refreshDeviceBase(evt:Event):void {
				this.firstDeviceBase = this.firstDeviceBase + 1;				 
				this.panelTabC4.rewriteDeviceBase();				
			}
			
			public function resetScenario(evt:Event):void {
				this.changeMadeInScenario = false;
				createNewWorkingScenarioResult.token = depot3.createNewWorkingScenario(workingScenarioID);
			}
			
			public function digestUpdate(event:Event):void {			
				var cntryData:ArrayCollection = this.cntryTree.getDataList();				
				var regData:ArrayCollection = this.cntryTree.getRegionsDataList();
				var uCluster:Boolean = this.cntryTree.getUseCluster();
				
				this.masterTab.setDataList(cntryData, regData, uCluster);				
				
				
				
				if (isStart < 2) { // enable path selection and buttons									
					//this.navigatorBox.setState(1, this.currentState);					
					//this.panelTabPath.enablePaths(true);
				};
				
				if (this.masterTab.getStateSpacePos() == 1) {					
						this.masterTab.setStateSpacePos(2);
						this.updateStateSpaceLabel();
				};
				
			}		

			[bindable] private var selPath:String = "";
			[bindable] public static var isStart:int = 0;			
			[bindable] public var selPathObj:Object;
			[bindable] public var selPathObjLabel:String;
			
			public function digestPathChange(event:Event):void {
				this.selPathObj = event.target.selPath;
				this.selPathObjLabel = event.target.selPathLabel;
				
				
				if (isStart  < 2) { 
					isStart = isStart + 1;					
				};
				if (isStart > 1) {
					//this.navigatorBox.setState(2, this.currentState);
				};
				if ((isStart > 1)&&(this.masterTab.getStateSpacePos() == 2)) {
						this.masterTab.setStateSpacePos(3);
						this.updateStateSpaceLabel();
				};				
				
				if (this.changeMadeInScenario) {
					Alert.show("Changes were made in Working Scenario. Do you want to reset?", 
						"Info", Alert.OK | Alert.CANCEL, this, alertListener, null, Alert.OK);
				} else {					
					this.pathLabel.text = "Selected Path: " + this.selPathObj;					
					//this.selPath = this.panelTabPath.selPath;				
					
					pathFlags = this.masterTab.registerPath(this.selPath, isStart);					
					//this.colorLabelsOnPath(pathFlags);
				};				
			}

			private var pathFlags:Array;
			private function alertListener(eventObj:CloseEvent):void {				
				if (eventObj.detail==Alert.OK) {
					this.pathLabel.text = "Selected Path: " + this.selPathObj;					
					//this.selPath = this.panelTabPath.selPath;				
					
					pathFlags = this.masterTab.registerPath(this.selPath, isStart);					
					this.colorLabelsOnPath(pathFlags);
					
					this.dispatchEvent(new Event("scenarioResetRequested", true));			
				} else {
					//this.panelTabPath.pathTypes.selectedValue = selPath;
				};
			}
			
			private function colorLabelsOnPath(arr:Array):void {				
				var col1:String = '0x83d342'; //for active input 83d342
				var col2:String = '0xd1d1d1'; // grey
				var prop:String = 'backgroundColor'; // 'backgroundColor'; color
				
				var col3:String = '0x3e9a3e'; 
								
				if (this.currentState == "scenarioState") {
					//lab0.setStyle(prop, col2);
					(arr[0] == 1) ? labA.setStyle(prop, col1) : labA.setStyle(prop, col2); 
					(arr[1] == 1) ? labB.setStyle(prop, col1) : labB.setStyle(prop, col2);
					//(arr[2] == 1) ? labC.setStyle(prop, col1) : labC.setStyle(prop, col2);
					(arr[3] == 1) ? labD.setStyle(prop, col1) : labD.setStyle(prop, col2);
					(arr[4] == 1) ? labE.setStyle(prop, col3) : labE.setStyle(prop, col3);
					(arr[5] == 1) ? labF.setStyle(prop, col1) : labF.setStyle(prop, col2);
				} else {					
					labA.setStyle(prop, col2); 
					labB.setStyle(prop, col2);					
					labD.setStyle(prop, col2);
					labE.setStyle(prop, col2);
					labF.setStyle(prop, col2);
				};
				
				if (this.currentState == "scenarioState") {				
					this.labAt.visible = (arr[0] == 1); 
					this.labBt.visible = (arr[1] == 1);
	//				this.labCt.visible = (arr[2] == 1);
					this.labDt.visible = (arr[3] == 1);
					this.labEt.visible = true; // = (arr[4] == 1)
					this.labFt.visible = (arr[5] == 1);			
				};
				this.invalidateDisplayList();
			}
			
			public function cleanOldScenarios():void {
				//this.statusLabel.text = "cleaning DB...";
				deleteAllScenariosResult.token = depot3.deleteAllScenarios();		
			}
			
			public function initScenarioDB(evt:Event):void {
				createNewWorkingScenarioResult.token = depot3.createNewWorkingScenario(workingScenarioID);
			}		
			
			[bindable] private var scenarioCreatedFlag:Boolean = false;
			private var startas:int = 0;
			protected function createNewWorkingScenarioResult_resultHandler(event:ResultEvent):void
			{ 
				scenarioCreatedFlag = true;
				startas = startas + 1;
				if (startas > 1) dispatchEvent(new Event("scenarioResetDone", true));
				this.statusLabel.text = "new scenario created: " + this.workingScenarioID + "  ";
			}		

			protected function createNewWorkingScenarioResult_faultHandler(event:FaultEvent):void
			{ 
				scenarioCreatedFlag = false;	
				dispatchEvent(new Event("scenarioCreationFailed", true));
				this.statusLabel.text = "new scenario not created"
			}	
			
			protected function taba11_creationCompleteHandler(event:FlexEvent):void
			{			
				this.panelTabA2.setWorkingScenario(this.workingScenarioID, false);
				
				this.panelTabA2.dataServiceNames = this.dataServiceNames;
				this.panelTabA2.dataServiceData =  this.dataServiceData;
				this.panelTabA2.dataServiceUpdate = this.dataServiceUpdate;
				this.panelTabA2.initNames();				
				
				this.masterTab.addTab(this.panelTabA2, 0);
				this.panelTabA2.setFlowManagerRef(this.masterTab);
				//this.panelTabPath.enablePaths(true);
				
				this.dispatchEvent(new Event("tabA", true));				
				trace("creation complete of tab A1");
			}
			
			protected function tabb11_creationCompleteHandler(event:FlexEvent):void
			{				
				this.panelTabB3.setWorkingScenario(this.workingScenarioID, false);								
				this.panelTabB3.dataServiceNames = this.dataServiceNames;
				this.panelTabB3.dataServiceData = this.dataServiceData;
				this.panelTabB3.dataServiceUpdate = this.dataServiceUpdate;
				
				this.panelTabB3.initNames();								
				this.masterTab.addTab(this.panelTabB3, 1);
				this.panelTabB3.setFlowManagerRef(this.masterTab);
				
				this.dispatchEvent(new Event("tabB", true));
				trace("creation complete of tab B1");
			}

			protected function tabc11_creationCompleteHandler(event:FlexEvent):void
			{				
				this.panelTabC4.setWorkingScenario(this.workingScenarioID, false);
				this.panelTabC4.dataServiceData = this.dataServiceData;				
				this.panelTabC4.dataServiceNames = this.dataServiceNames;	
				this.panelTabC4.dataServiceUpdate = this.dataServiceUpdate;
				
				this.panelTabC4.initNames();				
				this.masterTab.addTab(this.panelTabC4, 2);
				
				this.panelTabC4.rewriteDeviceBase();
				
				this.dispatchEvent(new Event("tabC", true));
				trace("creation complete of tab C4");
			}

			protected function tabd11_creationCompleteHandler(event:FlexEvent):void
			{				
				this.panelTabD5.setWorkingScenario(this.workingScenarioID, false);				
				this.panelTabD5.dataServiceNames = this.dataServiceNames;
				this.panelTabD5.dataServiceData = this.dataServiceData;
				this.panelTabD5.dataServiceUpdate = this.dataServiceUpdate;
				
				this.panelTabD5.initNames();							
				this.masterTab.addTab(this.panelTabD5, 3);	
				this.panelTabD5.setFlowManagerRef(this.masterTab);
				
				this.dispatchEvent(new Event("tabD", true));
				trace("creation complete of tab D1");
			}


			protected function deleteAllScenariosResult_resultHandler(event:ResultEvent):void
			{
			     this.statusLabel.text = "data cleaned from DB";
				 this.dispatchEvent(new Event("dbCleaned"));
				 
			}

			protected function cntryTreeInit():void
			{
				this.cntryTree.dataServiceNames = this.dataServiceNames;
				this.cntryTree.initNames();
				
				//this.dispatchEvent(new Event("cTree", true));
				trace("creation complete of cTree");				
			}
			
		
			protected function tabf511_creationCompleteHandler(event:FlexEvent):void
			{			
				this.panelTabF51.setWorkingScenario(this.workingScenarioID, false);
				
				this.panelTabF51.dataServiceNames = this.dataServiceNames;
				this.panelTabF51.dataServiceData =  this.dataServiceData;
				this.panelTabF51.dataServiceUpdate = this.dataServiceUpdate;
				
				this.panelTabF51.initNames();			
				
				this.masterTab.addTab(this.panelTabF51, 4);
				this.panelTabF51.setFlowManagerRef(this.masterTab);
				
				this.dispatchEvent(new Event("tabF", true));
				trace("creation complete of tab F5");
								
				this.tabaiCreationComplete = true;
				this.dispatchEvent(new Event("tabaiCreated", true));
				this.masterTab.notifyAll();
				
				// here we get the dataList from Master
			}

			protected function tabe11_creationCompleteHandler(event:FlexEvent):void
			{				
				this.panelTabE61.setWorkingScenario(this.workingScenarioID, false);				
				this.panelTabE61.dataServiceNames = this.dataServiceNames;
				this.panelTabE61.dataServiceData = this.dataServiceData;
				
				this.panelTabE61.initNames();								
				this.masterTab.addTab(this.panelTabE61, 5);			
				
				this.dispatchEvent(new Event("tabE", true));
				trace("creation complete of tab E61");				
			}			
			
			protected function createNext(evt:Event):void {
				var c:String = evt.type;
				switch (c) {
					case 'init':
						//this.pathLabel.text = "Loading Module: cTree";
						this.cntryTreeInit();
						break;
					case 'cTree':
						this.pathLabel.text = "Loading Module: A2";
						this.nc_A2.createDeferredContent();				
						break;
					case 'tabA':
						this.pathLabel.text = "Loading Module: B3";					
						this.nc_B3.createDeferredContent();						
						break;
					case 'tabB':
						this.pathLabel.text = "Loading Module: C4";
						this.termpBrd.createDeferredContent();
						//here should go code for deviceBase write procedure
						break;
					case 'tabC':
						this.pathLabel.text = "Loading Module: D5";
						this.nc_D5.createDeferredContent();						
						break;
					case 'tabD':
						this.pathLabel.text = "Loading Module: E61";
						this.nc_E61.createDeferredContent();												
						break;
					case 'tabE':
						this.pathLabel.text = "Loading Module: F51";
						this.nc_F51.createDeferredContent();						
						break;					
					case 'tabF':				
						this.pathLabel.text = "Loading Module: N00";
						//this.nc_00.createDeferredContent();
						//this.panelTabPath.enablePaths(false);
						this.pathLabel.text = "Content Loaded";
						
						this.panelTabA2.enabled = true;
						this.panelTabB3.enabled = true;
						//this.panelTabC4.enabled = false;					
						this.panelTabE61.enabled = true;
						this.panelTabF51.enabled = true;
						//this.panelTabPath.enabled = false;
					break;
				}				
			}			

			protected function panelTabPath_creationCompleteHandler(event:FlexEvent):void
			{
				//this.panelTabPath.enablePaths(false);
				trace("creation complete of tab pathSelections");
				//this.panelTabPath.enabled == (this.currentState == "scenarioState");
			}

			[bindable] private var tabaiCreationComplete:Boolean = false;
			protected function tabai_creationCompleteHandler(event:FlexEvent):void
			{
				trace("tabai creation complete");			
			}			

			protected function deleteAllScenariosResult_faultHandler(event:FaultEvent):void
			{
				Alert.show("could not clean old scenarios from DB...", "Error");
			}					

			
			[bindable] private var viewMode:String = "viewDataOnly";
			protected function modeSwitch_clickHandler(event:Event):void
			{
				this.viewMode = String(this.viewingModeGroup.selection.value);				
			}			

			protected function btnNext_clickHandler(event:MouseEvent):void		
			{								
				this.viewMode = String(this.viewingModeGroup.selection.value);
				var tmp:String;				
				
				switch (this.currentState) {
					case "landingState" :
						if (viewMode == "viewDataOnly") {							
							this.currentState =  "geoList";
							this.navigatorBox2.setButtonColors("#8c8c8c", 1, false);
							this.navigatorBox2.setButtonColors(null,      2, false);
							this.navigatorBox2.setButtonColors("#8c8c8c", 3, false);
							this.navigatorBox2.setButtonColors("#8c8c8c", 4, false);							
							this.startApp(null);
							if (this.flagApplicationStarted < 2) this.dispatchEvent(new Event("init", true))
							//this.invalidateDisplayList();
						} else {
							this.currentState =  "BQList"
							this.navigatorBox2.setButtonColors(null, 1);
							this.startApp(null);
						};
						break;
					case "BQList" :											
						this.currentState = "geoList";
						this.navigatorBox2.setButtonColors(null, 2);
						this.startApp(null);
						break;
					case "geoList" :					
						if (this.viewMode == "viewDataOnly") { 
							this.digestUpdate(null);
							currentState = "viewingState"
							this.navigatorBox2.setButtonColors("#000000", 2, false);
							this.navigatorBox2.setButtonColors("#8c8c8c", 3, false);
							this.navigatorBox2.setButtonColors("#8c8c8c", 4, false);							
							this.navigatorBox2.setButtonColors(null,      5, false);
							if (!tabaiCreationComplete) this.tabai.createDeferredContent();
							this.cntryTree.setRegionsGridEnabled(true);
						} else {
							currentState = "indicatorsList";							
							this.navigatorBox2.setButtonColors(null, 3);	
							this.originalBQLabel.text = this.selPathObjLabel;
						};									
						break;
					case "indicatorsList":
						this.digestUpdate(null);
						currentState = "scenarioState";
						this.navigatorBox2.setButtonColors(null, 4);					
						
						if (!tabaiCreationComplete) this.tabai.createDeferredContent();					
						this.tabai.selectedIndex = 0;
						
						var z:ArrayCollection = getSelectedIndicators();
						this.masterTab.recordSelectedIndicators(z);
						
						//this.panelTabA2.setActiveIndis(z.getItemAt(0).id);
						
						this.cntryTree.setRegionsGridEnabled(true);
						break;					
					case "viewingState" :						
						this.navigatorBox2.setButtonColors("#8c8c8c", 3, false);
						this.navigatorBox2.setButtonColors("#8c8c8c", 4, false);
						//this.navigatorBox2.setButtonColors("#8c8c8c", 5, false);
						if (this.tabaiCreationComplete) { 
							this.tabai.selectedIndex = 4;
							//this. this.masterTab.getDataList()
						};						
						break;					
					case "scenarioState" :
						this.navigatorBox2.setButtonColors(null, 5);
						this.tabai.selectedIndex = 4;
						this.btnNext.enabled = false;
						
						break;					
				}			
				
				this.currentStateLabel.text = "Current State: " + this.currentState;
				this.invalidateDisplayList();			
			}

			protected function btnBack_clickHandler(event:MouseEvent):void
			{
				switch (this.currentState) {
					case "landingState" :
						//null
						break;
					case "BQList" :
						this.currentState = "landingState";						
						break;
					case "geoList" :
						if (viewMode == "viewDataOnly") {
							currentState =  "landingState";							
						} else {
							currentState = "BQList";
							this.navigatorBox2.setButtonColors(null, 1);
						} 
						break;
					case "indicatorsList" :
						currentState = "geoList";
						this.navigatorBox2.setButtonColors(null, 2);						 
						break;					
					case "viewingState" :
						if (this.tabai.selectedIndex == 4) {
							this.tabai.selectedIndex = 0;
							//this.navigatorBox2.setButtonColors(null,      4, false);
							//this.navigatorBox2.setButtonColors("#8c8c8c", 3, false); // data inputs disabled
						} else {
							this.currentState = "geoList";
							this.navigatorBox2.setButtonColors("#8c8c8c", 1, false); // data inputs disabled
							this.navigatorBox2.setButtonColors(null,      2, false);
							this.navigatorBox2.setButtonColors("#8c8c8c", 3, false); // data inputs disabled
							this.navigatorBox2.setButtonColors("#8c8c8c", 4, false);
							this.navigatorBox2.setButtonColors("#000000", 5, false);
							this.cntryTree.setRegionsGridEnabled(false);
						};
						break;					
					case "scenarioState" :
						if (this.tabai.selectedIndex == 4) {
							this.tabai.selectedIndex = 0;
							this.navigatorBox2.setButtonColors(null, 4);
						} else {
							this.currentState = "indicatorsList";
							this.navigatorBox2.setButtonColors(null, 3);
							this.cntryTree.setRegionsGridEnabled(false);
						};
						this.btnNext.enabled = true;					
						break;					
				}		
				
				this.currentStateLabel.text = "Current State: " + this.currentState;
				this.invalidateDisplayList();
			}			
			
			public function getTheData(evt:Event):void {
				trace("init names inside panel A1");				
				indicatorsNamesList.token = this.depot1.getIndicatorNames();			
			}

			private function filterByBQ(item:Object):Boolean {			
				var fl:Boolean = true;				
				(item.isOutputIndicator) ? fl = false : fl = true;				
				return fl;
			}	
			
			[bindable] public var indiListBQ:ArrayCollection;			
			protected function indicatorsNamesList_resultHandler(event:ResultEvent):void
			{			
				indiListBQ = this.indicatorsNamesList.lastResult as ArrayCollection
				indiListBQ.filterFunction = filterByBQ;
				indiListBQ.refresh();
				this.indicatorGrid.setDataList(indiListBQ);
			}
			
			protected function getSelectedIndicators():ArrayCollection {
				return this.indicatorGrid.getActiveDataList();
			}		

		]]>
	</fx:Script>
		
	<s:states>
		<s:State name="landingState" />
		<s:State name="BQList" />
		<s:State name="geoList" />
		<s:State name="indicatorsList" />
		<s:State name="viewingState" />
		<s:State name="scenarioState" />		
	</s:states>
	
	<s:BorderContainer width="992" height="15" fontFamily="Verdana" 
					   horizontalCenter="0" top="0" borderVisible="false" id="a">
		<s:layout>
			<s:HorizontalLayout verticalAlign="justify" />
		</s:layout>
		
		<s:Label text="Battery Demand Analysis Tool. v.05-09-5pm" height="100%" width="40%" 
				 fontFamily="Arial" fontSize="9"/>
		<s:Label text="Selected Path" height="15" verticalAlign="middle"
				 id="pathLabel" width="30%" fontFamily="Arial" fontSize="9"/>
		<s:Label text="info bar" id="statusLabel" width="30%" textAlign="right" height="100%"
				 fontFamily="Arial" fontSize="9"/>
		
	</s:BorderContainer>	
	
	<s:BorderContainer width="992" id="playBorder" 
					   borderWeight="2" borderColor="#A7A7A7"
					   borderAlpha="0.5" borderVisible="false" height="30">
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
		<s:Button label="Next &gt;&gt;" width="110" height="25" id="btnNext" 
				  click="btnNext_clickHandler(event)" 
				  verticalCenter="0" right="15"  
				  fontWeight="bold" fontFamily="Arial" fontSize="12" 
				   />
		<s:Button label="&lt;&lt; Back" width="110" height="25" 
				  verticalCenter="0" id="btnBack"  click="btnBack_clickHandler(event)"  
				  right="140" fontWeight="bold" fontFamily="Arial" fontSize="12"
				  enabled.landingState="false"/>
		<s:Label  text="emptyLabel" id="currentStateLabel" verticalCenter="0" 
				 fontFamily="Verdana"  fontSize="12"/>
	</s:BorderContainer>

	<s:BorderContainer height="30" width="992"  excludeFrom="landingState" 
					   borderVisible="false">	
		<utils:navigatorLabels id="navigatorBox2" width="100%" height="100%"
							    horizontalCenter="0" verticalCenter="0">
		</utils:navigatorLabels>
	</s:BorderContainer>	
	
	<s:BorderContainer includeIn="landingState" width="992" height="400" borderVisible="false">
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
		<s:RadioButton y="182" label="View data only" value="viewDataOnly"
					   groupName="viewingModeGroup" 
					   selected="true" click="modeSwitch_clickHandler(event)" 
					   fontFamily="Arial" fontSize="14" color="#525252" fontWeight="bold" horizontalCenter="-238"/>
		<s:RadioButton y="244" label="Run scenarios" value="runScenarios" 
					   groupName="viewingModeGroup"
					   click="modeSwitch_clickHandler(event)" fontFamily="Arial" fontSize="14" color="#525252" fontWeight="bold" horizontalCenter="-238"/>
		<s:Label y="18" text="Home" color="#F27C21" fontWeight="bold" fontFamily="Arial" fontSize="18" horizontalCenter="-331"/>
		
		<mx:Text width="671" text="Welcome to the Duracell Device-Based Consumption Model Data Tool. This tool, developed by Euromonitor International, allows for immediate access to battery-powered device data across 53 markets globally.  In addition to viewing the base forecasts, this tool can also be used to manipulate key inputs (e.g. macroeconomic factors, device demand, etc.) in order to run various scenarios." 
				 y="44" height="85" horizontalCenter="0" fontSize="14" fontFamily="Arial" color="#656565"/>
		<mx:Text width="671" text="Step 1: Indicate below how you intend to use the tool:" 
				 y="141" height="29" horizontalCenter="-1" fontSize="14" fontFamily="Arial" color="#00B050"/>		
		<mx:Text width="500" text="Click this selection to simply jump to output options" y="204" height="35" horizontalCenter="0" fontFamily="Arial" fontSize="12" fontStyle="italic" color="#656565"/>
		<mx:Text width="500" text="Click this selection to follow three simple steps to scenario plan:&#13;&#13;1) Select business question to address&#13;2) Select geographies of interest&#13;3) Select inputs for modification" y="268" height="108" horizontalCenter="0" fontFamily="Arial" fontSize="12" fontStyle="italic" color="#656565"/>
	</s:BorderContainer>
	
<s:BorderContainer width="992" height="100%" borderVisible="false" 
				   excludeFrom="landingState" itemCreationPolicy="immediate">	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" paddingTop.scenarioState="10" paddingTop.indicatorsList="10"/>
	</s:layout>



	<!-- <utils:navigator id="navigatorBox" height="20" width="992"
					  excludeFrom="landingState" itemCreationPolicy="immediate">
		<utils:layout>
			<s:HorizontalLayout paddingLeft="15" paddingRight="15"/>
		</utils:layout>
	</utils:navigator> !-->

	<s:BorderContainer id="mainBC" width="992" height="700" horizontalCenter="0" top="25" 
					   borderVisible="false" 
					 excludeFrom="landingState, BQList, indicatorsList">	
		<s:layout>
			<s:HorizontalLayout gap="10" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0"/>	
		</s:layout>
		
		<s:BorderContainer width="225" height="100%" horizontalCenter="0" top="" borderVisible="false"
						   creationPolicy="auto" >
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
			<s:layout.geoList>
				<s:HorizontalLayout/>
			</s:layout.geoList>
			<utils:CTree id="cntryTree" width="100%" height="100%" horizontalCenter="0" 
						 verticalCenter="0" >
			</utils:CTree>		
			
		</s:BorderContainer>
		
		<s:BorderContainer width="770" height="100%" left="0" borderVisible="true" borderColor="#C8C8C8"
						   includeIn="viewingState, scenarioState" >
			<s:layout>
				<s:VerticalLayout gap="0"/>
			</s:layout>

			<s:BorderContainer width="100%" height="15" borderVisible="false">
				<s:layout>
					<s:HorizontalLayout verticalAlign="contentJustify" gap="0"/>
				</s:layout>
				<s:Label id="lab0t" visible.viewingState="false" visible="false"
						 verticalCenter="0" height="100%" verticalAlign="middle" textAlign="center"  width="109" fontFamily="Verdana" fontSize="10" fontWeight="normal" text="DATA INPUT HERE" includeIn="scenarioState"/>
				<s:Label id="labAt" visible.viewingState="false" visible="false"
						 verticalCenter="0" height="100%" verticalAlign="middle" textAlign="center"  fontFamily="Verdana" fontSize="10" width="109" fontWeight="normal" text="DATA INPUT HERE" includeIn="scenarioState"/>
				<s:Label id="labBt" visible.viewingState="false" visible="false"
						 verticalCenter="0" height="100%" verticalAlign="middle" textAlign="center"  fontFamily="Verdana" fontSize="10" width="109" fontWeight="normal" text="DATA INPUT HERE" includeIn="scenarioState"/>
<!--			<s:Label id="labCt" visible="false" verticalCenter="0" height="100%" verticalAlign="middle" textAlign="center"  fontFamily="Verdana" fontSize="10" width="109" fontWeight="normal" text="DATA INPUT HERE"/> !-->
				<s:Label id="labDt" visible.viewingState="false" visible="false"
						 verticalCenter="0" height="100%" verticalAlign="middle" textAlign="center"  fontFamily="Verdana" fontSize="10" width="109" fontWeight="normal" text="DATA INPUT HERE" includeIn="scenarioState"/>
				<s:Label id="labFt" visible.viewingState="false" visible="false"
						 verticalCenter="0" height="100%" verticalAlign="middle" textAlign="center"  fontFamily="Verdana" fontSize="10" width="109" fontWeight="normal" text="DATA INPUT HERE" includeIn="scenarioState"/>
				<s:Label id="labEt" visible.viewingState="false" visible="false"
						 verticalCenter="0" height="100%" verticalAlign="middle" textAlign="center"  fontFamily="Verdana" fontSize="10" width="109" fontWeight="normal" text="RESULTS" includeIn="scenarioState"/>
			</s:BorderContainer>
			
			<s:BorderContainer width="100%" height="10" id="someCols" backgroundColor="#D1D1D1" color="#D1D1D1" borderVisible="false" color.scenarioState="#000000" backgroundColor.scenarioState="#F7F7F7">
				<s:layout>
					<s:HorizontalLayout verticalAlign="contentJustify" gap="0"/>
				</s:layout>
				<s:Label id="lab0"   verticalCenter="0"  height="100%" verticalAlign="middle" textAlign="center"  width="109" fontFamily="Verdana" fontSize="11" paddingLeft="0" paddingTop="0"  fontWeight="normal" chromeColor="#D1D1D1" includeIn="scenarioState"/>
				<s:Label id="labA" verticalCenter="0" height="100%" verticalAlign="middle" textAlign="center"  fontFamily="Verdana" fontSize="11" width="109" fontWeight="normal" chromeColor="#3E9A3E"/>
				<s:Label id="labB"   verticalCenter="0"  height="100%" verticalAlign="middle" textAlign="center"  fontFamily="Verdana" fontSize="11" width="109" fontWeight="normal"/>
				<!--<s:Label id="labC"  verticalCenter="0"  height="100%" verticalAlign="middle" textAlign="center"  fontFamily="Verdana" fontSize="11" width="109" fontWeight="normal"/>!-->
				<s:Label id="labD" verticalCenter="0"  height="100%" verticalAlign="middle" textAlign="center"  fontFamily="Verdana" fontSize="11" width="109" fontWeight="normal"/>
				<s:Label id="labF"  verticalCenter="0"  height="100%" verticalAlign="middle" textAlign="center"  fontFamily="Verdana" fontSize="11" width="109" fontWeight="normal"/>
				<s:Label id="labE" verticalCenter="0"  height="100%" verticalAlign="middle" textAlign="center"  fontFamily="Verdana" fontSize="11" width="109" fontWeight="normal"/>
			</s:BorderContainer>
			
			<mx:TabNavigator id="tabai" height="100%" fontFamily="Arial"						
							 creationPolicy="none" creationComplete="tabai_creationCompleteHandler(event)"  fontSize="11" dropShadowVisible="false" borderVisible="false" verticalCenter="0" horizontalCenter="0" 
							 textAlign="left" chromeColor="#F8F8F8"
							 backgroundAlpha="1.0" contentBackgroundAlpha="0.95" tabWidth="110">
	
			<!--	<s:NavigatorContent id="nc_00" label="Method " width="100%" height="100%" 
									creationPolicy="none">
					<panelTabs:tabPathSelection id="panelTabPath" width="100%" height="100%" 
												enabled.scenarioState="true"
											 	enabled.viewingState = "false"
												creationComplete="panelTabPath_creationCompleteHandler(event)" 
												horizontalCenter="0" verticalCenter="0">
					</panelTabs:tabPathSelection>				
				</s:NavigatorContent> !-->
				
				<s:NavigatorContent id="nc_A2" label="A. Macro Environment"
									width="100%" height="100%" 
									creationPolicy="none">
					<panelTabs:tabA2 id="panelTabA2" width="100%" height="100%"  enabled="true"
									 creationComplete="taba11_creationCompleteHandler(event)"  top="0" left="0">
					</panelTabs:tabA2>
				</s:NavigatorContent>
				
				<s:NavigatorContent id="nc_B3" label="B. Household" width="100%" height="100%" 
									creationPolicy="none">
					<panelTabs:tabB3 id="panelTabB3" width="100%" height="100%" enabled="true"
									 creationComplete="tabb11_creationCompleteHandler(event)" top="0" left="0">					
					</panelTabs:tabB3> 
				</s:NavigatorContent>
				
				<!-- <s:NavigatorContent id="nc_C4" label="C. Device Base" width="0%" height="100%" 
									creationPolicy="none" visible="false">
					<panelTabs:tabC4 id = "panelTabC4" width="0%" height="100%" enabled="false" visible="false"
									 creationComplete="tabc11_creationCompleteHandler(event)" top="0" left="0">					
					</panelTabs:tabC4> 
				</s:NavigatorContent> !--> 				
				
				<s:NavigatorContent id="nc_D5" label="D. Market Size" width="100%" height="100%" 
									creationPolicy="none">
					<panelTabs:tabD5 id="panelTabD5" creationComplete="tabd11_creationCompleteHandler(event)"
									 enabled="true" top="0" width="100%" height="100%" left="0">					
					</panelTabs:tabD5>
				</s:NavigatorContent>
				
				
				<s:NavigatorContent id="nc_F51" label="E. Other" width="100%" height="100%" creationPolicy="none">
					<panelTabs:tabF51 id="panelTabF51" width="100%" 
									  height="100%" enabled="true"
									  creationComplete="tabf511_creationCompleteHandler(event)"  top="0" left="0">
					</panelTabs:tabF51>
				</s:NavigatorContent>
				
				<s:NavigatorContent id="nc_E61" label="F. Battery Demand" width="100%" height="100%" creationPolicy="none">
					<panelTabs:tabE61 id="panelTabE61" enabled="false" 
									  creationComplete="tabe11_creationCompleteHandler(event)" top="0" width="100%" height="100%" left="0">					
					</panelTabs:tabE61> 					
				</s:NavigatorContent> 
				
			</mx:TabNavigator>
		</s:BorderContainer>
		<s:BorderContainer height="100%" borderVisible="false" width.geoList="500">
			<mx:Text text="Step 3: Please select your geographies of interest below and click “Next” to continue.&#13;&#13;(Note: you may also select regions or clusters (developed, developing, or emerging)." includeIn="geoList"  color="#00B050" verticalCenter="-115" horizontalCenter="-10" height="120" fontSize="13"/>
		</s:BorderContainer>

		<s:BorderContainer id="termpBrd" creationPolicy="none" borderVisible="false">
			<panelTabs:tabC4 id = "panelTabC4" width="0%" height="0%"  top="0" left="0"
							 enabled="false" visible="false"
							 creationComplete="tabc11_creationCompleteHandler(event)">					
			</panelTabs:tabC4> 
		</s:BorderContainer>		
	</s:BorderContainer>
	
	<s:BorderContainer borderVisible="false" width="90%" height="100%" includeIn="BQList">
		<panelTabs:tabPathSelection width="95%" height="100%"
									horizontalCenter="0" visible="true" top="10">
		</panelTabs:tabPathSelection>
	</s:BorderContainer>
	<mx:Text width="600" text="Step 4: Please select the inputs you would like to adjust in your scenario." 
			 height="34" fontSize="14" fontFamily="Arial" color="#00B050" includeIn="indicatorsList"/>
	<s:Label text="Note: you may select more than one input for manipulation." fontStyle="normal" fontSize="11" includeIn="indicatorsList" width="600"/>
	<mx:Text width="600" text="selected BQ here" 
			 fontSize="14" fontFamily="Arial" includeIn="indicatorsList" id="originalBQLabel"/>
	
	<utils:CCheckBoxGrid  id="indicatorGrid" creationComplete="getTheData(event)"
		includeIn="indicatorsList" width="600" height="300"
		labelText="Indicators">
		
	</utils:CCheckBoxGrid>
</s:BorderContainer>
	
</s:Application>

