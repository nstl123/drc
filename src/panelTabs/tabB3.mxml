<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="900" height="670" 
		 xmlns:utils="utils.*"
		 creationComplete="startApp(event)" 
		 xmlns:depot1="services.depot1.*" 
		 xmlns:depot21="services.depot21.*">
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>

	<fx:Script>
		<![CDATA[
			protected function getDeviceList_resultHandler(event:ResultEvent):void
			{
				this.deviceListDrop.dataProvider = this.getDeviceList.lastResult as ArrayCollection;
			}

			protected function updateData_faultHandler(event:FaultEvent):void
			{
				var z:Object = event.message.body.toString();
			}		
			
			public function enableGrid(flag:Boolean) : void {
				this.testGrid.isEditable = flag;
				flag ? this.flagLabel.text = "Table is editable" : this.flagLabel.text = "Table is not editable";
			}

		]]>
	</fx:Script>


	<fx:Script>
		<![CDATA[
			
			import controls.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.Depot1;
			import services.depot3.Depot3;
			
			import spark.events.IndexChangeEvent;
			
			import utils.helper;
			
			public var dataServiceNames:Depot1;
			public var dataServiceData:Depot21;
			public var dataServiceUpdate:Depot3;
			
			[bindable] private var workingScenarioID:int;
			private var hlp:helper;
			[bindable] private var indicatorsList:ArrayCollection;
			
			public static const CNTRYCHANGED:String = "CNTRY_CHANGED";
			public static const CNTRYUNCHANGED:String = "CNTRY_UNCHANGED"			
				
			protected function updateData_resultHandler(event:ResultEvent):void
			{
				var rez:Object = this.updateData.lastResult;
			}				
				
			protected function startApp(event:FlexEvent):void {
				trace("app start panelTab B");			
				hlp = new helper();		
				this.addEventListener("updateCharts", updateCharts);
			}
			
			public function initNames():void {
				trace("init names inside panel B");				
				indicatorsNamesList.token = this.dataServiceNames.getIndicatorNames();			
				this.getDeviceList.token = this.dataServiceNames.getDeviceNames();
			}
			
			public function setWorkingScenario(nv:int, flag:Boolean):void {
				this.workingScenarioID = nv;
				this.testGrid.setWorkingScenario(this.workingScenarioID, flag);				
			}					
			
			protected function countryListNames_resultHandler(event:ResultEvent):void
			{
				this.countryListGrid.dataList = this.countryListNames.lastResult as ArrayCollection;
			}

			protected function button2_clickHandler(event:MouseEvent):void
			{
				var selCntries:Object = this.countryListGrid.dataList;
				this.dispatchEvent(new Event(tabB3.CNTRYCHANGED, true));
			}
 // ----- COMMUNICATION PART ---------------/////			
			public function getDataList():ArrayCollection {
				return this.countryListGrid.dataList;			
			}

			public function setDataList(data:ArrayCollection):void {
				this.countryListGrid.dataList = data;
			}		
			
			public function setDataListActive(data:ArrayCollection):void {				
				this.countryListGrid.activateSelections(data);
			}			
			
			public function setIndicatorsList(evt:ResultEvent):void {
				this.indicatorsList = this.indicatorsNamesList.lastResult;
				this.indicatorsList.filterFunction = filterB;
				this.indicatorsList.refresh();
				this.indicatorsBox.dataProvider = this.indicatorsList;			
			}
			
			private function filterB(item:Object):Boolean {
				var fl:Boolean = true;				
				if ((item.id == 201)||(item.id == 202)) {					
					fl = true
				}  else fl = false;				
				return fl;
			}					
			
			protected function button3_clickHandler(event:MouseEvent):void
			{
				var countryIDs:Array = this.countryListGrid.getActiveDataList().source;				
				var tmp:Array = this.hlp.formStringFromIDs(countryIDs);				
				trace("calling macro data token");
				getMacroDataResult.token = dataServiceData.getMacroData(tmp, selectedIndi, 
					workingScenarioID, hasSplitFlag.selected, 0, 1);
			}

			[bindable] private var selectedIndi:int;
			[bindable] private var currentData:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataGrid:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataChart:ArrayCollection = new ArrayCollection();
			
			protected function indicatorsBox_changeHandler(event:IndexChangeEvent):void {
				this.selectedIndi = this.indicatorsBox.selectedItem.id;
				this.hasSplitFlag.selected = this.indicatorsBox.selectedItem.hasSplitByTypes;
			}			
			
			protected function getMacroDataResult_resultHandler(event:ResultEvent):void
			{
				currentData = this.getMacroDataResult.lastResult as ArrayCollection;			
				this.currentDataChart.source = this.currentData.source;
				this.currentDataGrid.source  = this.currentData.source;
				
				this.dispatchEvent(new Event("updateCharts", false));
			}

			private function filterGrid(item:Object):Boolean {				
				var f:Boolean = true;				
				if ((item.scenarioID == this.workingScenarioID)
					&& (item.deviceID == this.selDevice)) {					
					f = true
				}  else f = false;				
				return f;
			}	

			private function filterChart(item:Object):Boolean {				
				var f:Boolean = true;				
				if (item.deviceID == this.selDevice) {					
					f = true
				}  else f = false;				
				return f;
			}	

			[bindable] public var alteredData:ArrayCollection = new ArrayCollection();
			public function digestChanges(evt:Event):void {
				alteredData = this.testGrid.getData();
				var temp:Object = new Object();
				temp = ({'id':1, data:this.alteredData});			
				this.updateData.token = this.dataServiceUpdate.updateData(temp, false, this.selDevice, 0);			
			}

			protected function button4_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new Event("scenarioResetRequested", true));
			}

			[bindable] private var selDevice:int = 0;
			protected function deviceListDrop_changeHandler(event:IndexChangeEvent):void
			{
				this.selDevice = this.deviceListDrop.selectedItem.id;
				this.dispatchEvent(new Event("updateCharts", false));
			}
			
			[bindable] private var isLevel:Boolean = true;
			protected function radiobutton2_changeHandler(event:Event):void
			{
				this.isLevel = !this.isLevel;
				this.dispatchEvent(new Event("updateCharts", false));
			}
			
			protected function updateCharts(evt:Event):void {
				this.currentDataGrid.filterFunction = this.filterGrid;
				this.currentDataGrid.refresh();
				
				this.currentDataChart.filterFunction = this.filterChart;
				this.currentDataChart.refresh();
				
				this.testChart.setData(currentDataChart, isLevel); // transformation is performed inside chart component
				this.testGrid.setData(currentDataGrid, isLevel);
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<depot1:Depot1 id="depot1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
					   showBusyCursor="true"/>
		<depot21:Depot21 id="depot21" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
						 showBusyCursor="true"/>
		
		<s:CallResponder id="countryListNames"  result="countryListNames_resultHandler(event)"/>
		<s:CallResponder id="indicatorsNamesList" result="setIndicatorsList(event)"/>
		<s:CallResponder id="getMacroDataResult" result="getMacroDataResult_resultHandler(event)"/>
		<s:CallResponder id="updateData" result="updateData_resultHandler(event)" fault="updateData_faultHandler(event)" />
		<s:CallResponder id="getDeviceList" result="getDeviceList_resultHandler(event)" />
		
	</fx:Declarations>
	
	<utils:CCheckBoxGrid id="countryListGrid" width="220" height="556" top="38" x="13"
						  >
	</utils:CCheckBoxGrid>
	
	<s:BorderContainer width="221" height="25" top="6" left="12">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>		
		<s:Label text="Tab - B. HH related factors" height="100%" width="50%" x="61" y="38"/>		
		<s:Button label="notify B" click="button2_clickHandler(event)" width="50%" height="100%" x="56" y="66"/>			
	</s:BorderContainer>
	
	<utils:CTwoAxisChart x="243" width="540" height="258" id="testChart" top="68">
	</utils:CTwoAxisChart>
	
	<utils:CInteractiveGrid x="239" width="544" height="232" id="testGrid" top="384">
	</utils:CInteractiveGrid>
	
	<s:DropDownList x="241" width="243" height="18" id="indicatorsBox" 
					change="indicatorsBox_changeHandler(event)" labelField="namen" top="10"/>
	
	<s:Button x="609" label="getSomeData" click="button3_clickHandler(event)" id="button" top="39" width="174"/>
	
	<s:CheckBox x="242" y="40" label="hasSplit" enabled="false" id="hasSplitFlag"/>
	<s:Button x="238" y="334" label="updateDB" width="215" click="digestChanges(event)"/>
	<s:Button x="461" y="334" label="Reset" width="103" click="button4_clickHandler(event)"/>
	<s:DropDownList x="492" y="10" width="291" id="deviceListDrop" labelField="namen" 
					change="deviceListDrop_changeHandler(event)"></s:DropDownList>	
	<s:Label x="239" y="365" text="Table activiy state" width="196" fontStyle="italic" fontSize="11" id="flagLabel"/>
	<s:RadioButton x="338" y="40" label="Levels" groupName="growthType" enabled="true" 
				   selected="true" height="19" change="radiobutton2_changeHandler(event)"/>
	<s:RadioButton x="400" y="40" label="Growths" groupName="growthType" 
				   enabled="true" height="19" change="radiobutton2_changeHandler(event)"/>
</s:Group>
