<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 		 
		 width="900" height="670" 
		 
		 xmlns:utils="utils.*"
		 creationComplete="startApp(event)"
		 xmlns:depot1="services.depot1.*" 
		 xmlns:depot21="services.depot21.*"
		 xmlns:depot3="services.depot3.*"
		 >
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>

	<fx:Script>
		<![CDATA[
			protected function writeViewToTableResult_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
			}

			protected function writeViewToTableResult_resultHandler(event:ResultEvent):void
			{
				if (event.message.body != "ok") //this.someLabel.text = "view written successfully";
					Alert.show("data could not be written to DB", "Error C4");
//				this.dispatchEvent(new Event("deviceBaseWritten", true));
			}
	
			protected function getDeviceLits_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
			}
	
			import services.depot3.Depot3;
			protected function getDeviceLits_resultHandler(event:ResultEvent):void
			{
				this.deviceListDrop.dataProvider = this.getDeviceList.lastResult as ArrayCollection;
			}
			
			import controls.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.Depot1;
			
			import spark.events.IndexChangeEvent;
			
			import utils.helper;
			
			public var dataServiceNames:Depot1;
			public var dataServiceData:Depot21;
			public var dataServiceUpdate:Depot3;
			
			[bindable] private var workingScenarioID:int;
			private var hlp:helper;
			[bindable] private var indicatorsList:ArrayCollection;
			
			public static const CNTRYCHANGED:String = "CNTRY_CHANGED";
			public static const CNTRYUNCHANGED:String = "CNTRY_UNCHANGED"			
			
			
			protected function startApp(event:FlexEvent):void {
				trace("app start panelTab D");			
				hlp = new helper();		
				this.addEventListener("updateCharts", updateCharts);	
				this.addEventListener("refreshData", refreshData);
				
				this.addEventListener("deviceBaseWritten", refreshData);
				this.rewriteDeviceBase();
			}
			
			public function initNames():void {
				trace("init names inside panel D");				
				indicatorsNamesList.token = this.dataServiceNames.getIndicatorNames();
				this.getDeviceList.token = this.dataServiceNames.getDeviceNames();
			}
			
			public function setWorkingScenario(nv:int, flag:Boolean):void {
				this.workingScenarioID = nv;
				this.testGrid.setWorkingScenario(this.workingScenarioID, flag);				
			}					
			
			protected function countryListNames_resultHandler(event:ResultEvent):void
			{
				this.countryListGrid.dataList = this.countryListNames.lastResult as ArrayCollection;
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				//this.countryListNames.token = this.dataService.getCountryList();
			}
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				var selCntries:Object = this.countryListGrid.dataList;
				this.dispatchEvent(new Event(tabD5.CNTRYCHANGED, true));
			}
			// ----- COMMUNICATION PART ---------------/////			
			public function getDataList():ArrayCollection {
				return this.countryListGrid.dataList[0]["res"];			
			}
			
			public function setDataList(data:ArrayCollection):void {
				this.countryListGrid.dataList = data;
			}		
			
			public function setDataListActive(data:ArrayCollection):void {				
				this.countryListGrid.activateSelections(data);
			}
			
			public function setOpenItems(opIt:Object):void {
				this.countryListGrid.setOpenItems(opIt);
			}
			
			public function setIndicatorsList(evt:ResultEvent):void {
				this.indicatorsList = this.indicatorsNamesList.lastResult;
				this.indicatorsList.filterFunction = filterB;
				this.indicatorsList.refresh();
				this.indicatorsBox.dataProvider = this.indicatorsList;			
			}
			
			private function filterB(item:Object):Boolean {						
				var fl:Boolean = true;				
				if ((item.id == 210)||(item.id == 211)) {					
					fl = true
				}  else fl = false;				
				return fl;
			}					
			
			protected function button3_clickHandler(event:MouseEvent):void
			{
				//send query to DB mit countryIDs and IndiID
				var countryIDs:Array = this.countryListGrid.dataList.source;				
				var tmp:Array = this.hlp.formStringFromIDs(countryIDs);				
				trace("calling macro data token");
				getMacroDataResult.token = dataServiceData.getMacroData(tmp, selectedIndi, 
					workingScenarioID, true, 0, 1);
			}
			
			[bindable] private var selectedIndi:int = 210;
			[bindable] private var currentData:ArrayCollection = new ArrayCollection();
			
			protected function indicatorsBox_changeHandler(event:IndexChangeEvent):void {
				this.selectedIndi = this.indicatorsBox.selectedItem.id;
				
				this.refreshData(null);
			}			
			
			protected function getMacroDataResult_resultHandler(event:ResultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				currentData = this.getMacroDataResult.lastResult as ArrayCollection;				
				this.currentDataChart.source = this.currentData.source;
				this.currentDataGrid.source  = this.currentData.source;
				
				this.dispatchEvent(new Event("updateCharts", false));
			}
			

			protected function button4_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new Event("scenarioResetRequested", true));
			}


			[bindable] public var alteredData:ArrayCollection = new ArrayCollection();
			public function digestChanges(evt:Event):void {
				this.dispatchEvent(new Event("changesMadeInScenario", true));				
				alteredData = this.testGrid.getData();
				var temp:Object = new Object();
				temp = ({'id':1, data:this.alteredData});			
				this.updateData.token = this.dataServiceUpdate.updateData(temp, false, this.selDevice, 0);			
			}

			[bindable] public var tabEditable:Boolean;			
			public function enableGrid(flag:Boolean, isLocal:Boolean) : void {				
				if (!isLocal) this.tabEditable = flag; // && isLevel;
				this.testGrid.isEditable = flag && isLevel;
				(flag && isLevel) ? this.flagLabel.text = "Table is editable" : this.flagLabel.text = "Table is not editable";
				this.saveBtn.enabled = (flag && isLevel);
			}
			
			[bindable] private var isLevel:Boolean = true;
			protected function radiobutton2_changeHandler(event:Event):void
			{
				this.isLevel = !this.isLevel;
				this.dispatchEvent(new Event("updateCharts", false));

				var tmp:int = 1 - int(this.growthType.selection.value);
				this.enableGrid(tmp == 0 && this.tabEditable, true);	
				this.saveBtn.enabled = (tmp == 0 && this.tabEditable);
			}			
			
			[bindable] private var currentDataGrid:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataChart:ArrayCollection = new ArrayCollection();			
			[bindable] private var selDevice:int = 1;
			
			protected function updateCharts(evt:Event):void {
				this.currentDataGrid.filterFunction = this.filterGrid;
				this.currentDataGrid.refresh();
				
				this.currentDataChart.filterFunction = this.filterChart;
				this.currentDataChart.refresh();
				
				this.testChart.setData(currentDataChart, isLevel); // transformation is performed inside chart component
				this.testGrid.setData(currentDataGrid, isLevel);
			}
			
			private function filterGrid(item:Object):Boolean {				
				var f:Boolean = true;				
				if ((item.scenarioID == this.workingScenarioID)
					&& (item.deviceID == this.selDevice)) {					
					f = true
				}  else f = false;				
				return f;
			}	
			
			private function filterChart(item:Object):Boolean {				
				var f:Boolean = true;				
				if (item.deviceID == this.selDevice) {					
					f = true
				}  else f = false;				
				return f;
			}	

			protected function button6_clickHandler(event:MouseEvent):void
			{
				trace("calling market size token");
				this.refreshData(null);				
			}

			public function refreshData(evt:Event):void {
				this.rewriteDeviceBase();
				var countryIDs:Array = this.countryListGrid.getActiveDataList()[0]["res"].source;				
				var tmp:Array = this.hlp.formStringFromIDs(countryIDs);	
				if (tmp.length < 1) { 
					Alert.show("Select at least one country", "Error D5"); 
				} else {
					this.cursorManager.setBusyCursor();
					getMacroDataResult.token = dataServiceData.getMacroData(tmp, selectedIndi, 
						workingScenarioID, 0, 0, 1);
				};
			}			

			protected function getMacroDataResult_faultHandler(event:FaultEvent):void
			{
				this.cursorManager.removeBusyCursor();

			}

			protected function deviceListDrop_changeHandler(event:IndexChangeEvent):void
			{
				this.selDevice = this.deviceListDrop.selectedItem.id;
				this.dispatchEvent(new Event("updateCharts", false));
			}
			
			
			protected function updateData_resultHandler(event:ResultEvent):void
			{
				var rez:Object = this.updateData.lastResult;				
				Alert.show("data updated", "Info");			
				this.dispatchEvent(new Event("refreshData", false));
			}	
			
			protected function updateData_faultHandler(event:FaultEvent):void
			{
				var z:Object = event.message.body.toString();
			}	
			
			public var startInd:int = 0;
			public function rewriteDeviceBase():void {
				startInd = startInd + 1;
				// in writeView: 0 goes for view deviceBase, 1 for deviceBaseMarket
				if (this.startInd > 1) writeViewToTableResult.token = this.dataServiceUpdate.writeViewToTable(workingScenarioID, 1);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="growthType" />
		
		<depot1:Depot1 id="depot1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
					   showBusyCursor="true"/>
		<depot21:Depot21 id="depot21" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
						 showBusyCursor="true"/>
		
		<s:CallResponder id="countryListNames"  result="countryListNames_resultHandler(event)"/>
		<s:CallResponder id="indicatorsNamesList" result="setIndicatorsList(event)"/>
		<s:CallResponder id="getMacroDataResult" result="getMacroDataResult_resultHandler(event)" fault="getMacroDataResult_faultHandler(event)"/>
		<s:CallResponder id="getDeviceList" result="getDeviceLits_resultHandler(event)" fault="getDeviceLits_faultHandler(event)" />
		<s:CallResponder id="updateData" result="updateData_resultHandler(event)" fault="updateData_faultHandler(event)" />
		<s:CallResponder id="writeViewToTableResult" result="writeViewToTableResult_resultHandler(event)" fault="writeViewToTableResult_faultHandler(event)" />
		
	</fx:Declarations>
	
	<s:BorderContainer width="220" height="25" top="7" left="10">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>		
		<s:Label text="Tab D. Market Size" height="100%" width="50%" x="61" y="38"/>		
		<s:Button label="notify D" click="button2_clickHandler(event)" width="50%" height="100%"/>			
	</s:BorderContainer>
	
	<utils:CTwoAxisChart width="521" height="277" id="testChart" top="82" left="240">
	</utils:CTwoAxisChart>
	<utils:CInteractiveGrid width="635" height="227" id="testGrid" top="397" left="239">
	</utils:CInteractiveGrid>
	
	<s:DropDownList width="243" id="indicatorsBox"  labelField="namen" top="20" left="278" 
					change="indicatorsBox_changeHandler(event)"/>
	
	<s:Button label="Reset" click="button4_clickHandler(event)" width="122" top="366" height="20" left="753"/>
	<s:Button label="save changes" click="digestChanges(event)" width="215" id="saveBtn" left="441" top="366" height="20" fontWeight="bold"/>
	<s:Label text="Table activiy state" width="196" fontStyle="italic" fontSize="11" id="flagLabel" left="239" top="385"/>
	<s:RadioButton label="Levels" groupName="growthType" enabled="true" value="0"
				   selected="true" height="19" change="radiobutton2_changeHandler(event)" left="290" top="57"/>
	<s:RadioButton label="Growths" groupName="growthType" value="1" 
				   enabled="true" height="19" change="radiobutton2_changeHandler(event)" top="57" left="353"/>
	<s:Label text="Data In:" fontStyle="italic" fontSize="11" y="50" left="243"/>
	<s:Label text="Select Indicator" fontStyle="italic" fontSize="11" top="8" height="10" left="243"/>
	<s:Button label="refresh data" left="428" top="50" height="25" width="241" fontWeight="bold"
			   click="button6_clickHandler(event)"/>
	<s:DropDownList width="272" id="deviceListDrop" labelField="namen" 
					change="deviceListDrop_changeHandler(event)" selectedIndex="0" top="20" height="20" x="599"></s:DropDownList>
	<s:Label x="570" text="Select Device" fontStyle="italic" fontSize="11" top="8" height="10"/>
	<utils:CTree width="220" left="10" top="37" height="400" id="countryListGrid">
	</utils:CTree>
</s:Group>
