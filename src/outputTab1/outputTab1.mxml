<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 
		 xmlns:outputTab1="outputTab1.*" 
		 width="100%" height="100%"
		 xmlns:base="services.base.*"
		 xmlns:base1="services.base1.*"
		 creationComplete="group1_creationCompleteHandler(event)"	 
		 >
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>
	<fx:Declarations>
		<s:RadioButtonGroup id="batTypes"  enabled="false"/>
		<s:RadioButtonGroup id="pwrSource" enabled="false"/>		
		
		<base:Base id="base" fault="Alert.show(event.fault.faultString + '\n' + 
				   event.fault.faultDetail)"  showBusyCursor="true"  />
		<base1:Base1 id="base1" fault="Alert.show(event.fault.faultString + '\n' + 
					 event.fault.faultDetail)" showBusyCursor="true"/>
		
		<s:CallResponder id="getCountriesList" result="cntryList_resultHandler(event)"/>
		<s:CallResponder id="getIndicatorNamesResult" result="getIndicatorNamesResult_resultHandler(event)"/>
		<s:CallResponder id="getOutputDataResult" result="getOutputDataResult_resultHandler(event)"/>		
		<s:CallResponder id="getDeviceNamesResult" result="getDeviceNamesResult_resultHandler(event)"/>
		<s:RadioButtonGroup id="switchView"/>
		<s:RadioButtonGroup id="swicthGrowths"/>
		
		
		
	</fx:Declarations>
	
	<fx:Declarations>		
		<mx:CurrencyFormatter   id="stilius2" precision="2"
								rounding="nearest"
								decimalSeparatorTo="."
								thousandsSeparatorTo=","
								useThousandsSeparator="true"
								currencySymbol=""
								useNegativeSign="true"                  
								/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.charts.CategoryAxis;
			import mx.charts.LinearAxis;
			import mx.charts.chartClasses.AxisBase;
			import mx.charts.chartClasses.Series;
			import mx.charts.series.LineSeries;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			
			import utils.helper;
			
			[bindable] public var selectedCntry:int = 1;
			[bindable] public var selectedIndiIn:int = 1;
			[bindable] public var selectedIndiOut:int = 1;
			[bindable] public var selectedDevice:int = 1;
			[bindable] public var selectedBatType:int = 1;
			[bindable] public var selectedPwrType:int = 1;		
			
			[bindable] public var showSplitByDevices:Boolean = false;
			[bindable] public var showSplitByTypes:Boolean = false;
			[bindable] public var showSplitBySort:Boolean = false;
			
			[bindable] private var workingScenarioID:int = 0;
			[bindable] private var aggType:int = 0;
			
			public function setScenarioID(id:int):void {
				this.workingScenarioID = id;
			}
			
			public function getScenarioID():int {
				return this.workingScenarioID;
			} 
			
			public function startApp(event:FlexEvent):void
			{				
				getCountriesList.token = this.base1.getCountryList();
				getIndicatorNamesResult.token = this.base1.getIndicatorNames();					
				getDeviceNamesResult.token = base1.getDeviceNames();
				
				this.addEventListener("cntrySelectionChanged",  refreshData);
				this.addEventListener("typesSelectionChanged",  refreshData);		
				this.addEventListener("indiSelectionChanged",   refreshData); 
				
				this.addEventListener("deviceSelectionChanged", filterDevices);				
				
				this.addEventListener("indicatorsSelectionChanged", filterIndicators);
				this.addEventListener("splitByDevicesChanged",      filterIndicators);
			}
			
			[Bindable] private var isFirstCall:Boolean = true;
			
			protected function refreshData(evt:Event):void {
				if ((this.aggType > 0) || (this.isFirstCall)) {
						getOutputDataResult.token = base.getOutputData(
							aggType, workingScenarioID, selectedCntry,
							selectedIndiOut, selectedBatType, selectedPwrType, true);					
						this.isFirstCall = false;						
					} else {
						this.filterCountries();
					};	
				drawChart(null);
			};
			
			protected function cntryList_resultHandler(event:ResultEvent):void
			{
				var rez:ArrayCollection = new ArrayCollection();
				rez = ArrayCollection(this.getCountriesList.lastResult);
				cntryGrid.dataProvider = rez;
			}			
			// indicators array
			[Bindable] protected var indiRezOut:ArrayCollection = new ArrayCollection();			
			[Bindable] protected var indiRezIn:ArrayCollection = new ArrayCollection();
			
			protected function getIndicatorNamesResult_resultHandler(event:ResultEvent):void
			{
				var hlp:helper = new helper();
				hlp.splitIndisArray(getIndicatorNamesResult.lastResult, indiRezIn, indiRezOut);
								
				indiGridOutput.dataProvider = indiRezOut;
				indiGridInput.dataProvider = indiRezIn;
								
				this.dispatchEvent(new Event("indicatorsSelectionChanged"));				
			}
			
			protected function batTypesChange_clickHandler(event:MouseEvent):void
			{
				selectedBatType = int(this.batTypes.selectedValue);
				this.dispatchEvent(new Event("typesSelectionChanged"));				
			}
			
			protected function pwrTypes_clickHandler(event:MouseEvent):void
			{
				selectedPwrType = int(this.pwrSource.selectedValue);
				this.dispatchEvent(new Event("typesSelectionChanged"));				
			}		
			
			protected function cntryGrid_changeHandler(event:ListEvent):void
			{
				selectedCntry = cntryGrid.selectedItem.id;				
				this.dispatchEvent(new Event("cntrySelectionChanged"));							
			}			
			
			protected function indiGridOut_changeHandler(event:ListEvent):void
			{				
				selectedIndiOut = 	this.indiGridOutput.selectedItem.id;			
				this.dispatchEvent(new Event("indiSelectionChanged"));							
			}
			
			protected function indiGridIn_changeHandler(event:ListEvent):void
			{				
				selectedIndiIn = 	this.indiGridInput.selectedItem.id;			
				this.dispatchEvent(new Event("indiSelectionChanged"));							
			}
			
			[Bindable] private var rez:ArrayCollection = new ArrayCollection();
			
			protected function getOutputDataResult_resultHandler(event:ResultEvent):void
			{									
				rez = ArrayCollection(this.getOutputDataResult.lastResult)
				rezGrid.dataProvider = rez;
				
				if (this.aggType > 0) filterDevices(event);
			}
			
			private function filterDevicesLabel(item:Object):Boolean {								
				var fl:Boolean = false;
				if ((item.countryID == this.selectedCntry) && 
					( (item.indicatorID == this.selectedIndiIn) ||
						(item.indicatorID == this.selectedIndiOut)) &&
					 (item.deviceID == this.selectedDevice))					
						fl = true
				else    fl = false;				
				return fl;
			}	

			private function filterDevices(evt:Event):void {
				rez.filterFunction = filterDevicesLabel;
				rez.refresh();
				drawChart(null);
			}
			
			private function filterCountries():void {
				rez.filterFunction = filterRezArrCol;
				rez.refresh();
			}
			
			private function filterRezArrCol(item:Object):Boolean {								
				var fl:Boolean = false;				
				if ((item.countryID == this.selectedCntry) &&				
			   	   ((item.indicatorID == this.selectedIndiIn) ||
				    (item.indicatorID == this.selectedIndiOut) ))					
						fl = true
			 	else    fl = false;
			
				return fl;
			}	
			
			private function filterIndicators(evt:Event):void {				
				this.indiRezOut.filterFunction = filterIndisArrColOut;
				this.indiRezOut.refresh();
				
				this.indiRezIn.filterFunction = filterIndisArrColIn;
				this.indiRezIn.refresh();
				
				drawChart(null);
			}
			
			private function filterIndisArrColOut(item:Object):Boolean {			
				var fl:Boolean = false;
				if ((item.hasSplitByDevices == this.showSplitByDevices)&&
				    (item.hasSplitByTypes   == this.showSplitByTypes)  &&
					(item.isOutputIndicator == false)	) {					
						fl = true
				}  else fl = false;				
				return fl;
			}

			private function filterIndisArrColIn(item:Object):Boolean {			
				var fl:Boolean = false;
				if ((item.hasSplitByDevices == this.showSplitByDevices)&&
					(item.hasSplitByTypes   == this.showSplitByTypes)  && 
					(item.isOutputIndicator == true)) {					
					fl = true
				}  else fl = false;				
				return fl;
			}
			
			// used for initial data load procedure
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{				
				refreshData(event);
			}

			protected function spTypes_changeHandler(event:Event):void
			{
				this.showSplitByTypes = !this.showSplitByTypes;		
				batTypes.enabled = this.showSplitByTypes;
				pwrSource.enabled = this.showSplitByTypes;		
				this.deviceList.enabled = this.showSplitByDevices;
				
				if (this.showSplitByTypes) aggType = 2 else aggType = 1;		
				
				this.dispatchEvent(new Event("splitByDevicesChanged"));				
			}

			protected function spDev_changeHandler(event:Event):void
			{
				this.showSplitByDevices = !this.showSplitByDevices;
				this.deviceList.enabled = this.showSplitByDevices;
				if (this.showSplitByDevices) aggType = 1 else { 
					aggType = 0; isFirstCall = true;
				};	
				this.dispatchEvent(new Event("splitByDevicesChanged"));
			}
			
			protected function getDeviceNamesResult_resultHandler(event:ResultEvent):void
			{
				this.deviceList.dataProvider = this.getDeviceNamesResult.lastResult;
			}

			protected function deviceList_changeHandler(event:IndexChangeEvent):void
			{
				selectedDevice = this.deviceList.selectedItem.id;
				this.devIDtext.text = this.deviceList.selectedItem.id;				
				this.dispatchEvent(new Event("deviceSelectionChanged"));			
			}
			
			[bindable] public var rezForChart:ArrayCollection = new ArrayCollection();
			
			protected function drawChart(event:MouseEvent):void
			{
				var z:ArrayCollection = ArrayCollection(this.rezGrid.dataProvider);
				var hlp:helper = new helper();
				rezForChart = hlp.transformArrCol(z);
				createSeries(rezForChart);
				// some transformation of arrColl here
			}
			
			[Bindable] private var vaxis1:LinearAxis = new LinearAxis;
			[Bindable] private var vaxis2:LinearAxis = new LinearAxis;
			private var series2:Object;
			private var mySeries:Array=new Array(); 
			
			public function createSeries(someData:ArrayCollection):void {
				vaxis1 = new LinearAxis;
				vaxis2 = new LinearAxis;
				var hAxis:CategoryAxis = new CategoryAxis();
				mySeries.splice(0, mySeries.length);
				var counter:int = 0;
				
				
				for (var i:int = 0; i < someData.length; i++) {
					series2 = new LineSeries();
					series2.dataProvider = someData.getItemAt(i);			
					series2.xField="yrs";
					series2.yField="data";
					
					var tmp:Object = someData.getItemAt(i)[0]; 
					
					if (tmp.indicatorID == someData.getItemAt(0)[0].indicatorID) series2.verticalAxis = vaxis1
					else series2.verticalAxis = vaxis2;
					
					series2.displayName = tmp.countryID + "|" + tmp.indicatorID + "\n" + tmp.scenarioID;
					
					hAxis.dataProvider = someData.getItemAt(i);
					vaxis1.baseAtZero = false;
					vaxis2.baseAtZero = false;
					// vaxis1.labelFunction = defineLabel;
					mySeries.push(series2);
				};					
				hAxis.categoryField = "yrs";						
				this.testChart.horizontalAxis = hAxis;				     
				this.testChart.series = mySeries;			
				this.testChart.dataProvider = mySeries;
				//this.testChart.dataTipFunction = show_label;				
				this.testChart.invalidateDisplayList();
			}
			
		]]> 
	</fx:Script>
	
	<fx:Script>
		<![CDATA[
			/* some text/numbers formatting tasks go here */
			
			public function format_numbers(item:Object, column:DataGridColumn):String { 
				var a:Object = item[column.dataField]				
				return this.stilius2.format(a);	
			}		
			
			public function format_text(item:Object, column:DataGridColumn):String { 
				var a:Object = item[column.dataField]				
				return a.toString();	
			}
		]]>
	</fx:Script>
	
	
		<s:BorderContainer width="1000" height="600" horizontalCenter="-1" verticalCenter="-8">
			<s:layout>
				<s:BasicLayout/>
			</s:layout>
			<s:BorderContainer width="255" height="121" x="465" y="108">
				<s:layout>
					<s:BasicLayout/>
				</s:layout>
				<s:Label text="BatteryTypes" width="107" height="23" verticalAlign="middle" 
						 textAlign="center" top="-1" left="10"/>
				
				<s:RadioButton label="1C" groupName="batTypes" value="1" width="50" height="20" 
							   click="batTypesChange_clickHandler(event)" selected="true" textAlign="center"
							    x="10" y="21"/>
				<s:RadioButton label="1D" groupName="batTypes" value="2" width="50" height="20" 
							   click="batTypesChange_clickHandler(event)" textAlign="center"
							    x="10" y="50"/>
				<s:RadioButton label="3A" groupName="batTypes" value="3" width="50" height="20" 
							   click="batTypesChange_clickHandler(event)" textAlign="center"
							    x="63" y="24"/>
				<s:RadioButton label="9V" groupName="batTypes" value="4" width="50" height="20" 
							   click="batTypesChange_clickHandler(event)" textAlign="center"
							    x="66" y="51"/>				
				<s:RadioButton label="AA" groupName="batTypes" value="5" width="50" height="20" 
							   selected="false" 
							   click="batTypesChange_clickHandler(event)" textAlign="center"
							    x="10" y="77"/>
				
				<s:Label text="PowerSource" width="99" height="18" verticalAlign="middle" textAlign="center" top="5" right="11"/>
				
				<s:RadioButton label="DPP" groupName="pwrSource" value="1" width="50" height="20" selected="true" 
							   click="pwrTypes_clickHandler(event)" textAlign="center" x="168" y="26"/>
				<s:RadioButton label="RCH" groupName="pwrSource" value="2" width="50" height="20" 
							   click="pwrTypes_clickHandler(event)" textAlign="center" x="168" y="55"/>
				<mx:VRule height="100%" horizontalCenter="0" verticalCenter="0"/>
			</s:BorderContainer>
			<s:BorderContainer width="212" height="81" id="borderContainer" x="242" y="106">
				<s:layout>
					<s:BasicLayout/>
				</s:layout>
				<s:Label text="detail level" height="23" width="100%" verticalAlign="middle" top="0" horizontalCenter="0"/>
				<s:CheckBox label="Split by Devices?" height="25" width="159"
							change="spDev_changeHandler(event)"
						  	id="spDev"  x="21" y="22"/>
				
				<s:CheckBox label="Split by BatTypes?" height="26" width="150"
						    change="spTypes_changeHandler(event)"	 id="spTypes" x="21" y="47"/>
			
			</s:BorderContainer>
			<mx:DataGrid id="cntryGrid" change="cntryGrid_changeHandler(event)" 
						 width="218" x="10" height="578" y="10">
				<mx:columns>
					<mx:DataGridColumn headerText="id" dataField="id"/>
					<mx:DataGridColumn headerText="namen" dataField="namen"/>
				</mx:columns>
			</mx:DataGrid>
			<mx:DataGrid id="indiGridInput" change="indiGridIn_changeHandler(event)" 
						 height="89" width="212"  x="241" y="10">
				<mx:columns>
					<mx:DataGridColumn headerText="id" dataField="id" width="10"/>
					<mx:DataGridColumn headerText="indiIn" dataField="namen" width="30"/>
				</mx:columns>
			</mx:DataGrid>
			<mx:DataGrid id="indiGridOutput" change="indiGridOut_changeHandler(event)" 
						 height="88" width="259"  x="465" y="10">
				<mx:columns>
					<mx:DataGridColumn headerText="id" dataField="id" width="10"/>
					<mx:DataGridColumn headerText="indiOut" dataField="namen" width="30"/>
				</mx:columns>
			</mx:DataGrid>
			<s:DropDownList y="30" width="266" id="deviceList" labelField="namen" contentBackgroundAlpha="1.0" contentBackgroundColor="#FFFFFF"
							dropShadowVisible="false" 
							change="deviceList_changeHandler(event)" enabled="false" textAlign="left" fontSize="11" x="732"></s:DropDownList>
			<s:Label text="Devices" width="121" height="18" verticalAlign="middle" textAlign="center" x="735" y="10"/>
			<s:Label x="927" y="10" text="dev id" width="61" height="17" id="devIDtext" textAlign="right"/>
			<s:BorderContainer x="424" y="232" width="141" height="30">
				<s:layout>
					<s:BasicLayout/>
				</s:layout>
				<s:RadioButton label="levels" groupName="swicthGrowths" horizontalCenter="-35" verticalCenter="0" enabled="false" selected="true"/>
				<s:RadioButton label="growths" groupName="swicthGrowths" verticalCenter="0" horizontalCenter="35" enabled="false"/>
			</s:BorderContainer>
			<s:BorderContainer x="239" y="232" width="157" height="30">
				<s:layout>
					<s:BasicLayout/>
				</s:layout>
				<s:RadioButton label="dataGrid" groupName="switchView" verticalCenter="0" horizontalCenter="-35" enabled="false" selected="true"/>
				<s:RadioButton label="Chart" groupName="switchView" horizontalCenter="35" verticalCenter="0" enabled="false"/>
			</s:BorderContainer>
			<s:BorderContainer x="592" y="232" width="237" height="30">
				<s:layout>
					<s:BasicLayout/>
				</s:layout>
				<s:RadioButton label="working Scenario" groupName="swicthGrowths" enabled="false" selected="true" verticalCenter="0" horizontalCenter="-40"/>
				<s:RadioButton label="both" groupName="swicthGrowths" enabled="false" verticalCenter="0" horizontalCenter="60"/>
			</s:BorderContainer>
			<s:BorderContainer x="239" y="267" width="651" height="208">
				<s:layout>
					<s:HorizontalLayout/>
				</s:layout>
				
				<mx:LineChart id="testChart" width="80%" height="100%" x="10.5" y="3.65" seriesFilters="[]" >					 
					<mx:verticalAxisRenderers>
						<mx:AxisRenderer placement="left" axis="{this.vaxis1}"/>
						<mx:AxisRenderer placement="right" axis="{this.vaxis2}"/>
					</mx:verticalAxisRenderers>
				</mx:LineChart>
				
				<mx:Legend dataProvider="{testChart}" width="20%" top="24.85" right="-234.95001"/>
				
			</s:BorderContainer>
			<s:Button x="761" y="201" label="testChart" width="97" click="drawChart(event)"/>
			<mx:DataGrid width="652" height="109" id="rezGrid" dataProvider="{rez}" x="239" y="483">
				<mx:columns>
					<mx:DataGridColumn headerText="scenario" dataField="scenarioID"/>
					<mx:DataGridColumn headerText="country" dataField="cntryName"/>
					<mx:DataGridColumn headerText="indicator" dataField="indiName"/>
					<mx:DataGridColumn headerText="device" dataField="deviceID"/>
					<mx:DataGridColumn headerText="batType" dataField="batTypeID"/>
					<mx:DataGridColumn headerText="pwrType" dataField="pwrTypeID"/>
					<mx:DataGridColumn headerText="Y2004" dataField="Y2004" labelFunction="format_numbers"/>
					<mx:DataGridColumn headerText="Y2010" dataField="Y2010" labelFunction="format_numbers"/>
					<mx:DataGridColumn headerText="Y2015" dataField="Y2015" labelFunction="format_numbers"/>
				</mx:columns>
			</mx:DataGrid>
		</s:BorderContainer>	
</s:Group>
