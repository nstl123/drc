<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			    
			   xmlns:depot1="services.depot1.*"
			   xmlns:depot3="services.depot3.*"
			   
			   creationComplete="initAll(event)"		   
			   
			   xmlns:panelTabs="panelTabs.*" 
			   width="1000" height="750">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Declarations>	
		
		<depot1:Depot1 id="depot1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
					   showBusyCursor="true"/>		
		<depot3:Depot3 id="depot3" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" showBusyCursor="true"/>
		
		<s:CallResponder id="createNewWorkingScenarioResult" result="createNewWorkingScenarioResult_resultHandler(event)"
						 fault="createNewWorkingScenarioResult_faultHandler(event)"/>		
		<s:CallResponder id="deleteAllScenariosResult" result="deleteAllScenariosResult_resultHandler(event)"/>
		
	</fx:Declarations>
	
		<fx:Script>
		<![CDATA[	
			
			
			import controls.FlowManager;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.*;
			import services.depot21.Depot21;
			
			import utils.IDgenerator;			
			private var dataServiceNames:Depot1;
			private var dataServiceData:Depot21;
			private var dataServiceUpdate:Depot3;
			
			private var masterTab:FlowManager;			
			private var workingScenarioID:int;			
			protected var IDgen:IDgenerator = new IDgenerator();
			
			protected function initAll(evt:FlexEvent):void {				
				this.tabai.createDeferredContent();
				this.startApp(evt);
			}		
			
			protected function startApp(event:FlexEvent):void
			{
				this.pathLabel.text = "Init";
				
				this.dataServiceNames = new Depot1();
				this.dataServiceData = new Depot21();
				this.dataServiceUpdate = new Depot3();
				trace("init Depot1, Depot21");
				
				this.workingScenarioID = this.IDgen.generateID();			
				cleanOldScenarios(); // this should be removed later				
				this.addEventListener("dbCleaned", initScenarioDB);
				
				this.addEventListener("CNTRY_CHANGED", digestUpdate);		
				this.addEventListener("countryListLoaded", digestUpdate);
				
				this.addEventListener("pathChanged", digestPathChange);	
				
				this.addEventListener("NewScenarioUpdated", refreshDeviceBase);				
				this.addEventListener("scenarioResetRequested", resetScenario);
				this.addEventListener("scenarioResetDone", refreshAllTabs);
				
				this.addEventListener("changesMadeInScenario", recordState);
				
				this.addEventListener("init", createNext);
				this.addEventListener("tabA", createNext);
				this.addEventListener("tabB", createNext);
				this.addEventListener("tabC", createNext);
				this.addEventListener("tabD", createNext);				
				this.addEventListener("tabF", createNext);
				this.addEventListener("tabE", createNext);
				
				masterTab = new FlowManager();
				
				this.dispatchEvent(new Event("init", true));
			}
			
			protected function refreshAllTabs(evt:Event):void {
				this.panelTabA2.refreshData();
				this.panelTabB3.refreshData();				
				this.panelTabC4.rewriteDeviceBase();
				// this has two parts: rewrite deviceTable; reload Data;
				//this.panelTabD5.refeshData();				
				this.panelTabF51.refreshData();
				this.panelTabE61.refreshData();
			}

			[bindable] public var changeMadeInScenario:Boolean = false;
			protected function recordState(evt:Event):void {
				this.changeMadeInScenario = true;
			}
			
			protected function refreshDeviceBase(evt:Event):void {			
				this.panelTabC4.rewriteDeviceBase();
			}
			
			public function resetScenario(evt:Event):void {
				this.changeMadeInScenario = false;
				createNewWorkingScenarioResult.token = depot3.createNewWorkingScenario(this.workingScenarioID);
			}
			
			public function digestUpdate(event:Event):void {	
				if (event)	{
					this.masterTab.manageUpdate(event.target.className);
				} else {
					this.masterTab.manageUpdate("tabA2");
				};
			}
			
			[bindable] private var selPath:String = "";
			[bindable] public static var isStart:int = 0;			
			[bindable] public var selPathObj:Object;
			
			public function digestPathChange(event:Event):void {
				this.selPathObj = event.target.selPath;
				if (isStart  < 2) { isStart = isStart + 1; }			
							
				if (this.changeMadeInScenario) {
					Alert.show("Changes were made in Working Scenario. Do you want to reset?", 
						"Info", Alert.OK | Alert.CANCEL, this, alertListener, null, Alert.OK);
				} else {
					this.pathLabel.text = "Selected Path: " + this.selPathObj;					
					this.selPath = this.panelTabPath.selPath;				
					this.masterTab.registerPath(this.selPath, isStart);
				};				
			}

			private function alertListener(eventObj:CloseEvent):void {				
				if (eventObj.detail==Alert.OK) {
					this.pathLabel.text = "Selected Path: " + this.selPathObj;					
					this.selPath = this.panelTabPath.selPath;				
					this.masterTab.registerPath(this.selPath, isStart);		

					this.dispatchEvent(new Event("scenarioResetRequested", true));			
				} else {
					this.panelTabPath.pathTypes.selectedValue = selPath;
				};
			}
			
			public function cleanOldScenarios():void {
				this.statusLabel.text = "cleaning DB...";
				deleteAllScenariosResult.token = depot3.deleteAllScenarios();		
			}
			
			public function initScenarioDB(evt:Event):void {
				createNewWorkingScenarioResult.token = depot3.createNewWorkingScenario(this.workingScenarioID);
			}		
			
			[bindable] private var scenarioCreatedFlag:Boolean = false;
			private var startas:int = 0;
			protected function createNewWorkingScenarioResult_resultHandler(event:ResultEvent):void
			{ 
				scenarioCreatedFlag = true;
				startas = startas + 1;
				if (startas > 1) dispatchEvent(new Event("scenarioResetDone", true));
				this.statusLabel.text = "new scenario created"
			}		

			protected function createNewWorkingScenarioResult_faultHandler(event:FaultEvent):void
			{ 
				scenarioCreatedFlag = false;	
				dispatchEvent(new Event("scenarioCreationFailed", true));
				this.statusLabel.text = "new scenario not created"
			}	
			
			protected function tabb11_creationCompleteHandler(event:FlexEvent):void
			{
				trace("creation complete of tab B1");
				this.panelTabB3.setWorkingScenario(this.workingScenarioID, false);								
				this.panelTabB3.dataServiceNames = this.dataServiceNames;
				this.panelTabB3.dataServiceData = this.dataServiceData;
				this.panelTabB3.dataServiceUpdate = this.dataServiceUpdate;
				
				this.panelTabB3.initNames();		
				
				this.panelTabB3.countryListGrid.dataList = this.masterTab.getDataList();				
				this.masterTab.addTab(this.panelTabB3, 1);
				
				this.dispatchEvent(new Event("tabB", true));
			}

			protected function tabc11_creationCompleteHandler(event:FlexEvent):void
			{
				trace("creation complete of tab C4");
				this.panelTabC4.setWorkingScenario(this.workingScenarioID, false);
				this.panelTabC4.dataServiceData = this.dataServiceData;				
				this.panelTabC4.dataServiceNames = this.dataServiceNames;	
				this.panelTabC4.dataServiceUpdate = this.dataServiceUpdate;
				
				this.panelTabC4.initNames();
				
				this.panelTabC4.countryListGrid.dataList = this.masterTab.getDataList();
				this.masterTab.addTab(this.panelTabC4, 2);
				
				this.dispatchEvent(new Event("tabC", true));
			}

			protected function tabd11_creationCompleteHandler(event:FlexEvent):void
			{
				trace("creation complete of tab D1");
				this.panelTabD5.setWorkingScenario(this.workingScenarioID, false);				
				this.panelTabD5.dataServiceNames = this.dataServiceNames;
				this.panelTabD5.dataServiceData = this.dataServiceData;
				
				this.panelTabD5.initNames();	
				
				this.panelTabD5.countryListGrid.dataList = this.masterTab.getDataList();
				this.masterTab.addTab(this.panelTabD5, 3);
				
				this.dispatchEvent(new Event("tabD", true));
			}


			protected function deleteAllScenariosResult_resultHandler(event:ResultEvent):void
			{
			     this.statusLabel.text = "data cleaned from DB";
				 this.dispatchEvent(new Event("dbCleaned"));
				 
			}

			protected function taba11_creationCompleteHandler(event:FlexEvent):void
			{
				trace("creation complete of tab A1");
				this.panelTabA2.setWorkingScenario(this.workingScenarioID, false);
				
				this.panelTabA2.dataServiceNames = this.dataServiceNames;
				this.panelTabA2.dataServiceData =  this.dataServiceData;
				this.panelTabA2.dataServiceUpdate = this.dataServiceUpdate;
				this.panelTabA2.initNames();				
		
				this.masterTab.addTab(this.panelTabA2, 0);
				
				this.dispatchEvent(new Event("tabA", true));
			}


			protected function tabf511_creationCompleteHandler(event:FlexEvent):void
			{
				trace("creation complete of tab F5");
				this.panelTabF51.setWorkingScenario(this.workingScenarioID, false);
				
				this.panelTabF51.dataServiceNames = this.dataServiceNames;
				this.panelTabF51.dataServiceData =  this.dataServiceData;
				this.panelTabF51.dataServiceUpdate = this.dataServiceUpdate;
				
				this.panelTabF51.initNames();
				
				this.panelTabF51.countryListGrid.dataList = this.masterTab.getDataList();
				this.masterTab.addTab(this.panelTabF51, 4);
				
				this.dispatchEvent(new Event("tabF", true));
			}

			protected function tabe11_creationCompleteHandler(event:FlexEvent):void
			{
				trace("creation complete of tab E61");
				this.panelTabE61.setWorkingScenario(this.workingScenarioID, false);				
				this.panelTabE61.dataServiceNames = this.dataServiceNames;
				this.panelTabE61.dataServiceData = this.dataServiceData;
				
				this.panelTabE61.initNames();
				this.panelTabE61.countryListGrid.dataList = this.masterTab.getDataList();				
				this.masterTab.addTab(this.panelTabE61, 5);
				
				this.dispatchEvent(new Event("tabE", true));
			}
			
			protected function createNext(evt:Event):void {
				var c:String = evt.type;
				switch (c) {
					case 'init':
						this.pathLabel.text = "Loading Module: A2";
						this.nc_A2.createDeferredContent();						
						break;
					case 'tabA':
						this.pathLabel.text = "Loading Module: B3";
						this.nc_B3.createDeferredContent();						
						break;
					case 'tabB':
						this.pathLabel.text = "Loading Module: C4";
						this.nc_C4.createDeferredContent();						
						break;
					case 'tabC':
						this.pathLabel.text = "Loading Module: D5";
						this.nc_D5.createDeferredContent();						
						break;
					case 'tabD':
						this.pathLabel.text = "Loading Module: E61";
						this.nc_E61.createDeferredContent();												
						break;
					case 'tabE':
						this.pathLabel.text = "Loading Module: F51";
						this.nc_F51.createDeferredContent();						
						break;					
					case 'tabF':				
						this.pathLabel.text = "Loading Module: N00";
						this.nc_00.createDeferredContent();
						this.panelTabPath.enablePaths(true);
						this.pathLabel.text = "Content Loaded";
					break;
				}				
			}			

			protected function panelTabPath_creationCompleteHandler(event:FlexEvent):void
			{
				this.panelTabPath.enablePaths(false);
				this.pathLabel.text = "Loading Module...";
			}

		]]>
	</fx:Script>
		
	<s:BorderContainer width="100%" height="15">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
		<s:Label text="Battery Dermand Analysis Tool. v.03-28-11am" width="50%" height="100%"/>
		<s:Label text="info bar" id="statusLabel" width="50%" textAlign="right" height="100%"/>
	</s:BorderContainer>
	<s:Label text="Selected Path" width="100%" height="15" verticalAlign="middle" id="pathLabel"/>
	
	<mx:HRule width="100%" height="1%"/>
	<s:BorderContainer width="1000" height="700" horizontalCenter="0" verticalCenter="0">	
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>		
		<mx:TabNavigator id="tabai" width="100%" height="100%" fontFamily="Georgia" 
						 creationPolicy="none" >

			<s:NavigatorContent id="nc_00" label="Path selection" width="100%" height="100%" 
								creationPolicy="none">
				<panelTabs:tabPathSelection id="panelTabPath" top="0" left="0" width="100%"
											 creationComplete="panelTabPath_creationCompleteHandler(event)">
				</panelTabs:tabPathSelection>
				<s:Label x="896" y="6" text="Init" id="statusFlag"/>
			</s:NavigatorContent>
			
			<s:NavigatorContent id="nc_A2" label="MacroIndicators (A1 + A2)" width="100%" height="100%" 
								creationPolicy="none">
				<panelTabs:tabA2 id="panelTabA2" width="100%" height="100%"  enabled="true"
								 creationComplete="taba11_creationCompleteHandler(event)"  top="0" left="0">
				</panelTabs:tabA2>
			</s:NavigatorContent>
			
			<s:NavigatorContent id="nc_B3" label="B. Factors" width="100%" height="100%" creationPolicy="none">
				<panelTabs:tabB3 id="panelTabB3" width="100%" height="100%" enabled="true"
								 creationComplete="tabb11_creationCompleteHandler(event)"  left="0" top="0">					
				</panelTabs:tabB3>				
			</s:NavigatorContent>
			
			<s:NavigatorContent id="nc_C4" label="C. Device Base" width="100%" height="100%" creationPolicy="none">
				<panelTabs:tabC4 id = "panelTabC4" width="100%" height="100%" enabled="true"
								 creationComplete="tabc11_creationCompleteHandler(event)" left="0" top="0">					
				</panelTabs:tabC4>
			</s:NavigatorContent>
			
			<s:NavigatorContent id="nc_D5" label="D. Market Size" width="100%" height="100%" creationPolicy="none"
								 >
				<panelTabs:tabD5 id="panelTabD5" creationComplete="tabd11_creationCompleteHandler(event)"
								  enabled="false" left="0" top="0">					
				</panelTabs:tabD5>
			</s:NavigatorContent>
			
			<s:NavigatorContent id="nc_F51" label="F. batFactors" width="100%" height="100%" creationPolicy="none">
				<panelTabs:tabF51 id="panelTabF51" horizontalCenter="0" verticalCenter="0" width="100%" 
								  height="100%" enabled="true"
								  creationComplete="tabf511_creationCompleteHandler(event)" >
				</panelTabs:tabF51>
			</s:NavigatorContent>
			
			<s:NavigatorContent id="nc_E61" label="E. Demand" width="100%" height="100%" creationPolicy="none">
				<panelTabs:tabE61 id="panelTabE61" enabled="true" 
								  creationComplete="tabe11_creationCompleteHandler(event)" left="0" top="0">					
				</panelTabs:tabE61>		
			</s:NavigatorContent>			
			
			
		</mx:TabNavigator>		
	</s:BorderContainer>
	
</s:Application>

