<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 		 
		 width="100%" height="100%" 
		 
		 xmlns:utils="utils.*"
		 creationComplete="startApp(event)"
		 xmlns:depot1="services.depot1.*" 
		 xmlns:depot21="services.depot21.*"
		 xmlns:depot31="services.depot31.*"
		 >
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<s:states>
		<s:State name="default" />
		<s:State name="viewingOnly" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import services.depot31.Depot31;
			protected function writeViewToTableResult_faultHandler(event:FaultEvent):void
			{
				Alert.show("Could not write to DB", "Error D5");
			}

			protected function writeViewToTableResult_resultHandler(event:ResultEvent):void
			{
				if (event.message.body != "ok") { //this.someLabel.text = "view written successfully";
					Alert.show("data could not be written to DB", "Error in message format");
				} else {
					this.refreshData(null);	
					this.dispatchEvent(new Event("marketSizeWritten", true));
				};
			}
	
			protected function getDeviceLits_faultHandler(event:FaultEvent):void
			{
				Alert.show("could not get deviceList form DB", "error D5");
			}
			
			private var deviceNamesFullList:ArrayCollection;
			protected function getDeviceLits_resultHandler(event:ResultEvent):void
			{			
				deviceNamesFullList = this.getDeviceList.lastResult as ArrayCollection;			
				this.deviceNamesFullList.filterFunction = this.flMngr.filterDeviceList;				
				this.deviceNamesFullList.refresh();
				this.deviceListDrop.dataProvider = this.deviceNamesFullList;			
			}
			
			import controls.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.depot1.Depot1;
			
			import spark.events.IndexChangeEvent;
			
			import utils.helper;
			
			public var dataServiceNames:Depot1;
			public var dataServiceData:Depot21;
			public var dataServiceUpdate:Depot31;
			
			[bindable] private var workingScenarioID:int;
			[bindable] private var baselineScenarioID:int = 10001;
			private var hlp:helper;
			[bindable] private var indicatorsList:ArrayCollection;			
			
			protected function startApp(event:FlexEvent):void {
				trace("app start panelTab D");			
				hlp = new helper();		
				this.addEventListener("updateCharts", updateCharts);	
				this.addEventListener("refreshData", refreshData);
				
				this.addEventListener("deviceBaseWritten", refreshData);
				
				//this.rewriteMarketSize();
				
				initShockControls();		
			}
			
			public function initNames():void {
				trace("init names inside panel D");				
//				indicatorsNamesList.token = this.dataServiceNames.getIndicatorNames();
				this.getDeviceList.token = this.dataServiceNames.getDeviceNames();
			}
			
			[bindable] private var yrsList:ArrayCollection = new ArrayCollection();
			protected function initShockControls():void {
				for (var i:int = 2012; i <= 2021; i++) {
					yrsList.addItem({"yrs":i});
				};
				this.shockYears.dataProvider = yrsList;
				this.shockYears.labelField = "yrs";
				
				this.shockValue.value = 10;
			}	
			
			[bindable] private var flMngr:FlowManager;
			public function setFlowManagerRef(z:FlowManager):void {
				flMngr = z;
				this.testChart.setVwmode(this.flMngr.isViewingMode());
			}
			
			public function setWorkingScenario(nv:int, flag:Boolean):void {
				this.workingScenarioID = nv;
				this.testGrid.setWorkingScenario(this.workingScenarioID, flag);				
			}
			
			// ----- COMMUNICATION PART ---------------/////
			[bindable]
			private var dataList:ArrayCollection;
			public function getDataList():ArrayCollection {
				return this.dataList;
			}
			
			public function setDataList(data:ArrayCollection):void {
				this.dataList = data;
			}
			
			public function setIndicatorsList(arr:ArrayCollection):void {
				this.indicatorsList = arr;
				this.indicatorsList.filterFunction = filterB;
				this.indicatorsList.refresh();
				this.indicatorsBox.dataProvider = this.indicatorsList;		
				
				this.setSelectedIndicators();
			}
			
			public function setSelectedIndicators():void {
				var rr:ArrayCollection = this.flMngr.getRecordedSelectedIndicators();
				if (rr) this.setActiveIndis(0, rr.getItemAt(0).id);
				else this.setActiveIndis(0);
			}
			
			private function filterB(item:Object):Boolean {						
				var fl:Boolean = true;				
				if ((item.id == 210)||(item.id == 211)) {					
					fl = true
				}  else fl = false;				
				return fl;
			}					
			
			protected function button3_clickHandler(event:MouseEvent):void
			{
				//send query to DB mit countryIDs and IndiID
				var countryIDs:Array = this.dataList.source;				
				var tmp:String = this.hlp.formStringFromIDs2(countryIDs);				
				trace("calling macro data token");
				getMacroDataResult.token = dataServiceData.getMacroData(tmp, selectedIndi, 
					workingScenarioID, 1, 0, 1);
			}
			
			[bindable] public var selectedIndi:int = 210;
			[bindable] private var currentData:ArrayCollection = new ArrayCollection();
			
			protected function indicatorsBox_changeHandler(event:IndexChangeEvent):void {
				this.selectedIndi = this.indicatorsBox.selectedItem.id;				
				this.refreshData(null);
			}			
			
			protected function getMacroDataResult_resultHandler(event:ResultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				currentData = this.getMacroDataResult.lastResult as ArrayCollection;				
				this.currentDataChart.source = this.currentData.source;
				this.currentDataGrid.source  = this.currentData.source;
				
				this.dispatchEvent(new Event("updateCharts", false));
			}			

			protected function button4_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new Event("scenarioResetRequested", true));
			}

			[bindable] public var alteredData:ArrayCollection = new ArrayCollection();
			public function digestChanges(evt:Event):void {				
				if (this.tabEditable) {									
					var temp:Object = new Object();				
					if (this.isSingleGeo) { 				
						alteredData = this.testGrid.getData();									
					} else {
						var yrs:int = 2010;
						yrs = (this.shockYears.selectedItem ? this.shockYears.selectedItem.yrs : 2010);					
						var val:Number = this.shockValue.value;							
						//var rawData:ArrayCollection = this.grid.getAllData();
						var rawData:ArrayCollection = this.testChart.getBaseData(this.flMngr.baselineScenarioID);
						alteredData = hlp.formShockArray(selectedIndi, this.workingScenarioID, yrs, val, rawData);	
					};					
					temp = ({'id':1, data:this.alteredData});
					if (this.alteredData.length > 0) {						
						this.updateData.token = this.dataServiceUpdate.updateData2(temp, int(false), this.selDevice, 0, yrs, val);
						this.dispatchEvent(new Event("changesMadeInScenario", true));
					} else {
						this.dispatchEvent(new Event("refreshData", false));
					};
				} else {
					this.dispatchEvent(new Event("refreshData", false));
				};
			}

			[bindable] public var tabEditable:Boolean;			
			public function enableGrid(flag:Boolean, isLocal:Boolean) : void {				
				if (!isLocal) this.tabEditable = flag; // && isLevel;
				this.testGrid.isEditable = flag && isLevel;
				(flag && isLevel) ? this.flagLabel.text = "Table is editable" : this.flagLabel.text = "Table is not editable";
				//this.saveBtn.enabled = (flag && isLevel);				
				this.shockBtn1.enabled = (flag && isLevel); 
				this.shockBtn2.enabled = (flag && isLevel);
				
				this.shockControls.enabled = (flag && isLevel && !isSingleGeo);
				this.shLbl.enabled = (flag && isLevel && !isSingleGeo);
			}
			
			[bindable] private var isLevel:Boolean = true;
			protected function radiobutton2_changeHandler(event:Event):void
			{
				this.isLevel = !this.isLevel;
				this.dispatchEvent(new Event("updateCharts", false));

				var tmp:int = 1 - int(this.growthType.selection.value);
				this.enableGrid(tmp == 0 && this.tabEditable, true);
				if (this.currentState == "viewingOnly") tmp = 0;				
				this.saveBtn.enabled = (tmp == 0);// && this.tabEditable);
			}			
			
			[bindable] private var currentDataGrid:ArrayCollection = new ArrayCollection();
			[bindable] private var currentDataChart:ArrayCollection = new ArrayCollection();			
			[bindable] private var selDevice:int = 1;
			
			protected function updateCharts(evt:Event):void {
				this.testChart.setVwmode(this.flMngr.isViewingMode());
				
				this.currentDataGrid.filterFunction = this.filterGrid;
				this.currentDataGrid.refresh();
				
				this.currentDataChart.filterFunction = this.filterChart;
				this.currentDataChart.refresh();
				
				this.testChart.setData(currentDataChart, isLevel); // transformation is performed inside chart component
				this.testGrid.setData(currentDataGrid, isLevel);
				
				this.testChart.updateChartTitle(
					(indicatorsBox.selectedItem ? indicatorsBox.selectedItem.namen : "marketSize"),
					(deviceListDrop.selectedIndex ? deviceListDrop.selectedIndex : 0), 
					(deviceListDrop.selectedIndex >= 0), 
					this.isLevel, 
					(deviceListDrop.selectedItem ? deviceListDrop.selectedItem.namen : ""),
					false,
					(indicatorsBox.selectedItem  ? indicatorsBox.selectedItem.unit : ""));

			}
			
			[bindable] private var isSingleGeo:Boolean = true;
			protected function changeShockType_handler(event:MouseEvent):void
			{
				this.isSingleGeo = this.shockType.selectedValue;
				this.shockControls.enabled = !this.isSingleGeo;
			}
			
			private function filterGrid(item:Object):Boolean {				
				var f:Boolean = true;				
				if (this.currentState == "viewingOnly") {
					f = ((item.scenarioID == baselineScenarioID)&&(item.deviceID == selDevice));
				} else {				
					f = ((item.scenarioID == workingScenarioID) && (item.deviceID == selDevice));
				};
				
				return f;
			}	
			
			private function filterChart(item:Object):Boolean {				
				var f:Boolean = true;
				
				if (this.flMngr.isViewingMode()) {
					f = ((item.deviceID == this.selDevice) && (item.scenarioID == this.baselineScenarioID));
				} else {
					f = (item.deviceID == this.selDevice);
				};
				return f;
			}	

			protected function button6_clickHandler(event:MouseEvent):void
			{
				trace("calling market size token");
				this.refreshData(null);				
			}

			public function refreshData(evt:Event):void {
				//this.rewriteMarketSize();								
					
				if ((!this.dataList)||(this.dataList.length < 1)) {					
					Alert.show("Please select at least one country", "Selection error");
				} else {					
					/*if (this.dataList.length >= 10 ) {
						Alert.show("Maximum number of selected counties should less of equal to 10", "Info");
						this.dataList.source.splice(10, this.dataList.source.length - 10);
					};*/				
					var countryIDs:Array = this.dataList.source;
					var tmp:String = this.hlp.formStringFromIDs2(countryIDs);
					
					this.cursorManager.removeAllCursors();
					this.cursorManager.setBusyCursor();
					//if (selDeviceAggLevel > 1 ) { // category level
					getMacroDataCategory.token = dataServiceData.getMacroDataCategory(tmp, selectedIndi,
						workingScenarioID, 0, 0, 1);						
					/*} else {
						getMacroDataResult.token = dataServiceData.getMacroData(tmp, selectedIndi, 
							workingScenarioID, 0, 0, 1);*/
					//};
				};
			}			

			protected function getMacroDataResult_faultHandler(event:FaultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				Alert.show("could not read DB", "error D5");
			}

			public function deviceListDrop_changeHandler(event:IndexChangeEvent):void
			{
				if (this.deviceListDrop.selectedIndex < 0) this.deviceListDrop.selectedIndex = 0;
				this.selDevice = this.deviceListDrop.selectedItem.id;
				
				selDeviceAggLevel = 1 - int(this.deviceListDrop.selectedItem.id == this.deviceListDrop.selectedItem.categoryID);
				this.flMngr.setSelDeviceAggLevel(selDeviceAggLevel);
				this.flMngr.setSelBatType(0);
				this.flMngr.setSelPwrType(0);
				this.dispatchEvent(new Event("updateCharts", false));
			}			
			
			protected function updateData_resultHandler(event:ResultEvent):void
			{
				var rez:Object = this.updateData.lastResult;				
				Alert.show("data updated", "Info");			
				this.dispatchEvent(new Event("refreshData", false));
			}	
			
			protected function updateData_faultHandler(event:FaultEvent):void
			{
				var z:Object = event.message.body.toString();
			}	
			
			public var startInd:int = 0;
			public function rewriteMarketSize():void {
				startInd = startInd + 1;
				// in writeView: 0 goes for view deviceBase, 1 for deviceBaseMarket
				if (this.startInd > 1) writeViewToTableResult.token = this.dataServiceUpdate.writeViewToTable(workingScenarioID, 0, 1);
			}
			
			public function setActiveIndis(k:int, idd:int = -1):void {
				var kk:int = 0;
				var i:int = 0;				
				if (idd > 0) {				
					while (i < this.indicatorsBox.dataProvider.length) {				    						
						if (this.indicatorsBox.dataProvider.getItemAt(i).id == idd)	break;						
						i++;
					};					
				} else {
					this.indicatorsBox.selectedIndex = k;
					kk = k;
				};
				if (this.indicatorsBox.dataProvider.length > i) {				
					this.indicatorsBox.selectedIndex = i;
					kk = i;
				};
				
				this.indicatorsBox.selectedItem = this.indicatorsBox.dataProvider.getItemAt(kk);
				this.selectedIndi = this.indicatorsBox.selectedItem.id;
			}
			
			[bindable] private var selDeviceAggLevel:int = 0;
			[bindable] private var devicesActiveFlag:Boolean;
			protected function devicesActive_clickHandler(event:MouseEvent):void
			{				
				selDeviceAggLevel = int(this.splitByDevices_C.selectedValue);
				this.flMngr.setSelDeviceAggLevel(selDeviceAggLevel);
				devicesActiveFlag = (this.selDeviceAggLevel > 0);				
				this.flMngr.setDevicesActiveFlag(this.devicesActiveFlag);									
				this.deviceNamesFullList.refresh();	
				
				if (this.selDeviceAggLevel > 1) {
					deviceListDrop.selectedIndex = 0;
				} else {
					deviceListDrop.selectedIndex = 1;
				};				
				deviceListDrop_changeHandler(null);
				this.dispatchEvent(new Event("refreshData", false));				
			}
			
			protected function getMacroDataCategory_resultHandler(event:ResultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				currentData = this.getMacroDataCategory.lastResult as ArrayCollection;			
				this.currentDataChart.source = this.currentData.source;
				this.currentDataGrid.source  = this.currentData.source;
				
				deviceListDrop_changeHandler(null);				
				this.dispatchEvent(new Event("updateCharts", false));
			}
			
			protected function getMacroDataCategory_faultHandler(event:FaultEvent):void
			{
				this.cursorManager.removeBusyCursor();
				Alert.show("could not read data", "error B3");
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="growthType" />
		<s:RadioButtonGroup id="shockType"/>
		<s:RadioButtonGroup id="splitByDevices_C" />
		
		<depot1:Depot1 id="depot1" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
					   showBusyCursor="true"/>
		<depot21:Depot21 id="depot21" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" 
						 showBusyCursor="true"/>		

<!--		<s:CallResponder id="indicatorsNamesList" result="setIndicatorsList(event)"/> !-->
		<s:CallResponder id="getMacroDataResult" result="getMacroDataResult_resultHandler(event)" fault="getMacroDataResult_faultHandler(event)"/>
		<s:CallResponder id="getMacroDataCategory" result="getMacroDataCategory_resultHandler(event)" fault="getMacroDataCategory_faultHandler(event)" />
	
		<s:CallResponder id="getDeviceList" result="getDeviceLits_resultHandler(event)" fault="getDeviceLits_faultHandler(event)" />
		<s:CallResponder id="updateData" result="updateData_resultHandler(event)" fault="updateData_faultHandler(event)" />
		<s:CallResponder id="writeViewToTableResult" result="writeViewToTableResult_resultHandler(event)" fault="writeViewToTableResult_faultHandler(event)" />
		
	</fx:Declarations>
	
	<utils:CTwoAxisChart width="747" height="250" id="testChart" top="93" left="10" top.viewingOnly="78" left.viewingOnly="10" top.default="90" left.default="10">
	</utils:CTwoAxisChart>
	<utils:CInteractiveGrid width="747" height="195" id="testGrid" top="465" left="10" top.viewingOnly="405" left.viewingOnly="10" top.default="470" left.default="10">
	</utils:CInteractiveGrid>
	
	<s:DropDownList width="243" id="indicatorsBox"  labelField="namen" top="32" left="49" 
					change="indicatorsBox_changeHandler(event)" top.viewingOnly="17" left.viewingOnly="50" top.default="32" left.default="50"/>
	
	<s:Button click="button4_clickHandler(event)" width="222" top="427" height="23" 
			  left="535" top.viewingOnly="369" left.viewingOnly="535" top.default="425" 
			  left.default="535" label="Reset Scenario" enabled.default="true" enabled.viewingOnly="false"/>
	<s:Button label="Update Chart" click="digestChanges(event)" width="222" id="saveBtn" left="535" top="394" height="27" fontWeight="bold" top.viewingOnly="335" left.viewingOnly="535" top.default="392" left.default="535"/>
	<s:Label text="Table activiy state" fontStyle="italic" fontSize="11" id="flagLabel" left="10" top="439" top.viewingOnly="391" left.viewingOnly="10" top.default="456" left.default="10"/>
	<s:BorderContainer width="517" height="59" left="10" top="389" borderVisible="false" top.viewingOnly="335" left.viewingOnly="10" backgroundAlpha.viewingOnly="0.0" top.default="389" left.default="10">
		<s:Label text="Scenario Mechanism" fontStyle="italic" fontSize="11" y="8" 
				 fontFamily="Arial" 
				 id="shLbl" left.default="0" left.viewingOnly="0"/>
		<s:BorderContainer x="265" y="5" width="244" height="48" id="shockControls"
						   enabled="false" borderVisible="false">
			<s:Label x="3" y="1" text="Year" width="106" height="20" verticalAlign="middle" fontSize="10"/>
			<s:Label x="110" y="1" text="Percentage change" width="133" height="20" verticalAlign="middle" fontSize="10"/>
			<s:DropDownList id="shockYears" width="100" left="13" top="19" height="20">					
			</s:DropDownList>
			<s:NumericStepper id="shockValue" minimum="-20" maximum="20" stepSize="1" width="97" left="137" top="19" height="20"/>
		</s:BorderContainer>
		<s:RadioButton x="66" label="Single Country (table below)" groupName="shockType" enabled="true" value="1"
					   selected="true" top="19" fontSize="11" click="changeShockType_handler(event)" id="shockBtn1"/>
		<s:RadioButton x="66" label="All countries  (right)" groupName="shockType" enabled="true" value="0"
					   top="35" fontSize="11" click="changeShockType_handler(event)" id="shockBtn2"/>
	</s:BorderContainer>
	<s:RadioButton label="Absolutes" groupName="growthType" enabled="true" value="0"
				   selected="true" height="19" change="radiobutton2_changeHandler(event)" left="77" top="62" fontFamily="Arial" fontSize="11" top.viewingOnly="47" left.viewingOnly="77"/>
	<s:RadioButton label="Growth Rates" groupName="growthType" value="1" 
				   enabled="true" height="19" change="radiobutton2_changeHandler(event)" top="62" left="140" fontFamily="Arial" fontSize="11" top.viewingOnly="47" left.viewingOnly="157" top.default="62" left.default="157"/>
	<s:Label text="Data In:" fontStyle="italic" fontSize="11" left="10" fontFamily="Arial" top="57" top.viewingOnly="42" left.viewingOnly="10"/>
	<s:Label text="Select Indicator" fontStyle="italic" fontSize="11" top="21" height="10" left="10" fontFamily="Arial" top.viewingOnly="6" left.viewingOnly="10"/>
	<s:Button label="Update Chart" left="222" top="61" height="25" width="241" fontWeight="bold"
			   click="button6_clickHandler(event)" visible="false" top.viewingOnly="46" left.viewingOnly="222"/>
	<s:DropDownList width="272" id="deviceListDrop" labelField="namen" 
					change="deviceListDrop_changeHandler(event)" selectedIndex="0" top="32" height="20" left="370" top.viewingOnly="17" left.viewingOnly="482" top.default="32" left.default="482"></s:DropDownList>
	<s:Label text="Select Device" fontStyle="italic" fontSize="11" top="21" height="10" left="341" fontFamily="Arial" top.viewingOnly="6" left.viewingOnly="469" top.default="21" left.default="469"/>
	<s:Label text="Step 4: Click the dropdown below to adjust chosen indicator" verticalAlign="middle" fontStyle="normal" fontSize="13" top="2" left="10" fontFamily="Arial" color="#007E9D" includeIn="default" id="labelTop"/>
	<s:Label text="Step 5: Make changes to the data by editing right within the table below. You may also input shocks into the data by using the drop down menus. Once data has been adjusted, click “Update Chart” to view changes. To remove changes, click “Reset Scenario" verticalAlign="middle" fontStyle="normal" fontSize="13" top="347" left="10" fontFamily="Arial" color="#007E9D" width="747" includeIn="default" id="labelBot"/>
	<s:RadioButton visible="false" value="2" label="Device category" selected="false" fontFamily="Arial" fontSize="11" 
				   left="340" top="56" top.viewingOnly="41" left.viewingOnly="340"
				   groupName="splitByDevices_C" click="devicesActive_clickHandler(event)"/>
	<s:RadioButton visible="false" value="1" label="Single device" groupName="splitByDevices_C" 
				   selected="true" fontFamily="Arial" fontSize="11" left="340" top="35" top.viewingOnly="20" left.viewingOnly="340"
				   click="devicesActive_clickHandler(event)" />
	<s:Label visible="false" text="Devices Aggeragtion Level" fontSize="11" fontStyle="italic" top="21" left="313" fontFamily="Arial" backgroundColor="#FFFFFF" 
			 backgroundAlpha="1.0" chromeColor="#FFFFFF"  top.viewingOnly="6" left.viewingOnly="313" />
</s:Group>
