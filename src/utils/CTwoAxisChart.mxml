<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300"
		  creationComplete="startApp(event)">
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>
	
	<fx:Declarations>		
		<mx:CurrencyFormatter   id="stilius2" precision="0"
								rounding="nearest"
								decimalSeparatorTo="."
								thousandsSeparatorTo=","
								useThousandsSeparator="true"
								currencySymbol=""
								useNegativeSign="true"                  
								/>
		
		<mx:CurrencyFormatter   id="stilius3" precision="2"
								rounding="nearest"
								decimalSeparatorTo="."
								thousandsSeparatorTo=","
								useThousandsSeparator="true"
								currencySymbol=""
								useNegativeSign="true"                  
								/>
		<mx:NumberFormatter id="numForm" useThousandsSeparator="true"/>
		
	</fx:Declarations>
	
		
	<fx:Script>
		<![CDATA[			
			import mx.charts.LegendItem;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.FlexEvent;		
			
			public function format_numbers(item:Object, column:DataGridColumn):String { 
				var a:Object = item[column.dataField]				
				return this.stilius2.format(a);	
			}		
			
			public function format_text(item:Object, column:DataGridColumn):String { 
				var a:Object = item[column.dataField]				
				return a.toString();	
			}		

			import mx.charts.AxisRenderer;
			import mx.charts.HitData;
			import mx.graphics.SolidColorStroke;
			import mx.charts.series.ColumnSeries;
			import mx.charts.series.LineSeries;
			import mx.charts.LinearAxis;
			import mx.charts.CategoryAxis;
			
			[bindable] public var isLineSeries:Boolean = true;
			
			[bindable] public var selectedCntry:int = 1;
			[bindable] public var selectedIndiIn:int = 1;
			[bindable] public var selectedIndiOut:int = 1;
			[bindable] public var selectedDevice:int = 1;
			[bindable] public var selectedBatType:int = 1;
			[bindable] public var selectedPwrType:int = 1;
			[bindable] public var isLevel:Boolean = false;
			[bindable] public var vwMode:Boolean = true; // is mode viewOnly?			
			
			[bindable] private var dataSet:ArrayCollection = new ArrayCollection();		
			
			private var hlp:helper;
			
			
			import mx.collections.ArrayCollection;			
			import utils.helper;			
			
			
			protected function startApp(event:FlexEvent):void
			{
				hlp = new helper();						
			}		

			public function setVwmode(z:Boolean):void {
				this.vwMode = z;
			}
			
			public function setData(data:ArrayCollection, isLevel:Boolean):void {
				this.dataSet = data;	
				this.isLevel = isLevel;
				drawChart(isLevel);
			}
			
			public function getData():ArrayCollection {
				return this.dataSet;			
			}
			
			public function getBaseData(scen:int):ArrayCollection {
				var rez:ArrayCollection = new ArrayCollection();				
				for (var i:uint = 0; i < this.dataSet.length; i++) {
					var z:Object = this.dataSet.getItemAt(i);
					if (z.scenarioID == scen) {
						rez.addItem(z);
					};				
				};
				return rez;			
			}
			
			public function prepareDataForChart(raw:ArrayCollection):ArrayCollection {
				// iterate to change Y200x to yrs field
				return raw;
			}
			
			protected function drawChart(isLevel:Boolean):void {
				var tmp:ArrayCollection = hlp.transformArrCol(this.dataSet, isLevel);
				createSeries(tmp);
				// some transformation of arrColl here
			}
			
			[Bindable] private var vaxis1:LinearAxis = new LinearAxis;
			[Bindable] private var vaxis2:LinearAxis = new LinearAxis;
			[Bindable] private var hAxis:CategoryAxis = new CategoryAxis;
			
			[Bindable] private var vaRndr:AxisRenderer = new AxisRenderer;
			[Bindable] private var axStroke:SolidColorStroke = new SolidColorStroke;
			
			private var series2:Object;
			private var mySeries:Array=new Array(); 
			
			public function createSeries(someData:ArrayCollection):void {
				vaxis1 = new LinearAxis;
				vaxis2 = new LinearAxis;		
				
				hAxis = new CategoryAxis();
				mySeries.splice(0, mySeries.length);
				var counter:int = 0;		
				
				for (var i:int = 0; i < someData.length; i++) {
					if (isLineSeries) series2 = new LineSeries();
					else series2 = new ColumnSeries();
					
					series2.dataProvider = someData.getItemAt(i);			
					series2.xField="yrs";
					series2.yField="data";
					
					var tmp:Object = someData.getItemAt(i)[0]; 
					
					series2.verticalAxis = vaxis1;					
					series2.displayName = tmp.countryName + ", " 
						+ (tmp.scenarioID == 10001 ? "Baseline" : "Scenario");	
					
					hAxis.dataProvider = someData.getItemAt(i);
					vaxis1.baseAtZero = false;
					vaxis2.baseAtZero = false;
					vaxis1.labelFunction = this.defineLabel;				
					
					//vaxis2.labelFunction = this.defineLabel;
					mySeries.push(series2);
				};	
				
				hAxis.categoryField = "yrs";						
				this.lineChart.horizontalAxis  = hAxis;				     
				this.lineChart.series = mySeries;			
				this.lineChart.dataProvider = mySeries;
				this.lineChart.showDataTips = true;
				this.lineChart.dataTipFunction = tooltips_formater;			
				
				//this.lineChart.invalidateDisplayList();	
				//----- redrawing colors here				
				this.redrawColors();							
			}
			
			private var pssprtQualitativeMapColours:Array = [0x00AED9,0xF7941E,0xAB6DAD, 0xFFCB05, 0x50B848, 0xDA2128, 0x91632E, 0x0072BC];			
			private static var baselineScenarioID:int = 10001;
			
			public function redrawLegend():void {
				
				for (var k:int = 0; k < this.lineChart.series.length; k++) {
					var series:LineSeries = this.lineChart.series[k];
					var newItem:LegendItem = new LegendItem();
					newItem.name = series.displayName;					
				};			
			}
			
			public function redrawColors():void {
				var u:int = 0;
				var transp:Number = 1;  // tranparency 
				var wght:Number   = 1;  // weight				
				
				this.legendChart.removeAllElements();			
				
				for (var k:int = 0; k < this.lineChart.series.length; k++) {
					var series:LineSeries = this.lineChart.series[k];
					
					var legItem:LegendItem = new LegendItem();
					//var legItem:LegendItem = this.legendChart.getElementAt(0) as LegendItem;
					legItem.label = series.displayName.split(",")[0];
					
					var ui:int = ( k % (2*this.pssprtQualitativeMapColours.length) );	
					
					if ( (int(series.dataProvider[0].scenarioID) == baselineScenarioID) && !vwMode ) {
						transp = 0.75;  wght = 1;						
						series.setStyle('lineStroke', new SolidColorStroke(this.pssprtQualitativeMapColours[ui - u], wght, transp));						
						//legItem.setStyle('stroke',    new SolidColorStroke(this.pssprtQualitativeMapColours[ui - u], wght, transp));
						//legItem.setStyle('fill', this.pssprtQualitativeMapColours[ui - u]);						
					} else {
						transp = 1;    wght = 2;
						series.setStyle('lineStroke', new SolidColorStroke(this.pssprtQualitativeMapColours[ui], wght, transp));
						legItem.setStyle('stroke',    new SolidColorStroke(this.pssprtQualitativeMapColours[ui], wght, transp));
						legItem.setStyle('fill', this.pssprtQualitativeMapColours[ui]);
						this.legendChart.addElement(legItem);
						u++;
					};					
					//var z:Object = this.legendChart.getElementAt(k);					
				};
				this.legendChart.invalidateDisplayList();
			}			
			
			private function toHexValue(r:int, g:int, b:int):uint
			{
				var hex:uint = r << 16 ^ g << 8 ^ b;
				return hex;
			}
			
			private function intToHex(color:uint = 0):String {
				var mask:String = "00000F";
				var str:String = mask + color.toString(16).toUpperCase();
				return "0x" + str.substr(str.length - 6);
			}
			
			private function createLegend():void {
				var myLegend:Legend = new Legend();
				myLegend.dataProvider = this.lineChart;
				panel1.addChild(myLegend);
			}
			
			public function defineLabel(cat:Object, pcat:Object, ax:LinearAxis):String 
			{
				if (cat < 1000)				
					return stilius3.format(cat)
				else
					return stilius2.format(cat)
				//return cat.toString();
			}
			
			[Bindable] private var chartDGToolTip:String;		 
			public function tooltips_formater(m:Object):String		{			
				(m.item.scenarioID == "10001") ? chartDGToolTip = "Baseline" : chartDGToolTip = "Working Scenario";			
								
				chartDGToolTip = m.item['countryName'] + ", " + chartDGToolTip + "\n";
				chartDGToolTip = chartDGToolTip + m.item['yrs'] + ": ";
				
				if (Math.abs(m.item['data']) < 100) {
					chartDGToolTip = chartDGToolTip + stilius3.format(m.item['data']);
				} else {
					chartDGToolTip = chartDGToolTip + stilius2.format(m.item['data']);
				};				
				
				return chartDGToolTip + (!this.isLevel ? "%" : "");            
			}
			
			[bindable] public var chartTitleText:String = "";
			/*public function setChartTitle(tx:String):void {
				this.chartTitle.text = tx;
			}*/
			
			public function updateChartTitle(baseName:String, selIndi:int, activityFlag:Boolean, isLv:Boolean, nm:String, perHH:Boolean, defaultUnit:String):void {
				var tx1:String = baseName;
				var tx2:String = "";
				var addTx:String = ": All Devices";
				if ((selIndi >= 0) && (activityFlag)) 
					tx1 = tx1 + ": "+ nm;
				else 
					tx1 = tx1 + ( ((baseName.substr(0, 14) == "Battery demand")) ? addTx : "" );			
				//tx1 = tx1 + defaultUnit;				
				tx2 = tx2 + ( perHH ? ("per HH, ") : "");
				tx2 = tx2 + ( isLv  ? defaultUnit : ("Growth (%)") );
				
				this.chartTitle.text = tx1;
				this.chartSubtitle.text = tx2;
			}
			
		]]>
	</fx:Script>	
	
	
	<s:BorderContainer width="100%" height="100%" horizontalCenter="0" verticalCenter="0" borderVisible="false">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
		<s:BorderContainer width="70%" height="100%" borderVisible="false" id="panel1">
			<s:layout>
				<s:VerticalLayout gap="0"/>
			</s:layout>
			<s:Label width="100%" fontStyle="normal"
					 verticalAlign="bottom" textAlign="center" fontSize="12" 
					 fontFamily="Arial" id="chartTitle" color="#000000" fontWeight="normal" height="20"/>
			<s:Label text="Label" width="100%" height="15" verticalAlign="middle" textAlign="center" fontSize="10" id="chartSubtitle"/>
			<mx:LineChart id="lineChart" width="100%" height="100%"
						  seriesFilters="[]" showDataTips="true" top="0" horizontalCenter="0">
				
	  <mx:verticalAxisRenderers>
		 		<mx:AxisRenderer placement="left" axis="{this.vaxis1}">
					 <mx:axisStroke>
						 <s:SolidColorStroke weight="1" alpha=".6" caps="round"/>
					 </mx:axisStroke>
				 </mx:AxisRenderer>									 
			 </mx:verticalAxisRenderers> 
			 <mx:horizontalAxisRenderers>
				<mx:AxisRenderer axis="{this.hAxis}">
					<mx:axisStroke>
						<s:SolidColorStroke weight="1" alpha=".6" caps="round"/>
					</mx:axisStroke>
				</mx:AxisRenderer>
			</mx:horizontalAxisRenderers>

			</mx:LineChart>
		</s:BorderContainer>
	
	<mx:Legend  width="30%" height="100%" horizontalCenter="0"
			   verticalCenter="139" fontWeight="normal" fontFamily="Arial" fontSize="11" borderVisible="false" textAlign="left" fontStyle="normal" backgroundAlpha="0.5" contentBackgroundAlpha="0.5"
			   id="legendChart">
		<s:DataGroup width="100%" height="100%">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
		</s:DataGroup>		
	</mx:Legend>
		
	</s:BorderContainer>
</s:Group>
